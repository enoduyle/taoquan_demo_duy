{
  "ver": "1.0.15",
  "uuid": "f6448c02-c3e6-47cf-b00c-c213449b7880",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform float iTime;\n\n  uniform sampler2D LandTexture;\n  uniform sampler2D LandMaskTexture;\n\n  uniform sampler2D WaterTexture;\n  uniform float WaterNoiseScaleX;\n  uniform float WaterNoiseScaleY;\n  uniform float WaterNoiseSpeed;\n  uniform float WaterNoisePower;\n\n  uniform sampler2D NoiseTexture;\n\n  varying mediump vec2 v_uv0;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\nfloat remap(float value, float min1, float max1, float min2, float max2) \n{\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid main () {\n  vec4 color = v_color;\n\n  vec4 Land = vec4(1.0);\n  vec4 LandMask = vec4(1.0);\n\n  vec4 Water = vec4(1.0);\n  vec4 WaterNoise = vec4(1.0);\n\n  vec4 BGAll = vec4(1.0);\n\n  #if USE_TEXTURE\n    vec2 toCenter = vec2(0.5) - v_uv0;\n\n    LandMask *= texture2D(LandMaskTexture, v_uv0);\n    Land = texture2D(LandTexture, v_uv0) ;\n\n    WaterNoise *= texture2D(NoiseTexture, vec2(toCenter.x * WaterNoiseScaleX, toCenter.y * WaterNoiseScaleY + (iTime * WaterNoiseSpeed)));\n    Water *= texture2D(WaterTexture, vec2(v_uv0.x, ((v_uv0.y - 0.5835) * 2.405) + (WaterNoise.y * WaterNoisePower))) * (1.0 - LandMask);\n\n    BGAll = Land + Water;\n\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(LandTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  gl_FragColor = BGAll;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}