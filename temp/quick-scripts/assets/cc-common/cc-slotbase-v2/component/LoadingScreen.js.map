{"version":3,"sources":["LoadingScreen.js"],"names":["require","registerLoadHowl","unregisterLoadHowl","cc","Class","extends","Component","properties","sceneName","sdSceneName","sceneNameIframe","sceneNameHistory","processBar","Node","loadingBG","barWidth","loadingGlow","homeBtn","percentLabel","Label","onLoad","customInitLang","loadConfigAsync","getConfig","LOGIN_IFRAME","handleFlowOutGame","handleCloseGameIframe","sys","isBrowser","queryString","window","location","search","urlParams","URLSearchParams","history","get","extName","director","getScene","name","split","extSceneName","length","redirectScene","sceneList","game","_sceneInfos","map","scene","url","i","indexOf","Howl","switchHowlLoader","isMobile","active","node","runAction","sequence","delayTime","callFunc","off","on","isBackToLobby","eventHandler","getComponent","getInstance","sendToUs","opacity","updatedScene","preloadGameScene","isLoadingCompleted","progressBarComp","ProgressBar","progress","string","preloadScene","completedCount","totalCount","totalPercent","error","update","percent","x","Math","max","ceil","isSlowLoading","loadScene","setSlowLoading","val","onDisable","stopAllActions","onDestroy"],"mappings":";;;;;;eAE+CA,QAAQ,OAAR;IAAxCC,4BAAAA;IAAkBC,8BAAAA;;AACzBC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;AAELC,gBAAY;AACRC,mBAAW,EADH;AAERC,qBAAa,EAFL;AAGRC,yBAAiB,EAHT;AAIRC,0BAAkB,EAJV;AAKRC,oBAAYT,GAAGU,IALP;AAMRC,mBAAWX,GAAGU,IANN;AAORE,kBAAU,CAPF;AAQRC,qBAAab,GAAGU,IARR;AASRI,iBAASd,GAAGU,IATJ;AAURK,sBAAcf,GAAGgB;AAVT,KAFP;AAcLC,UAdK,oBAcI;AAAA;;AACL,aAAKC,cAAL;AACA,YAAI,KAAKb,SAAL,KAAmB,EAAvB,EAA2B;AAC3B,YAAMc,kBAAkBtB,QAAQ,iBAAR,CAAxB;;AAHK,oCAIkBsB,gBAAgBC,SAAhB,EAJlB;AAAA,YAIEC,YAJF,yBAIEA,YAJF;;AAAA,wBAK8CxB,QAAQ,iBAAR,CAL9C;AAAA,YAKEyB,iBALF,aAKEA,iBALF;AAAA,YAKqBC,qBALrB,aAKqBA,qBALrB;;AAML,YAAIlB,YAAY,KAAKA,SAArB;;AAEA,YAAIL,GAAGwB,GAAH,CAAOC,SAAX,EAAsB;AAClB,gBAAMC,cAAcC,OAAOC,QAAP,CAAgBC,MAApC;AACA,gBAAMC,YAAY,IAAIC,eAAJ,CAAoBL,WAApB,CAAlB;AACA,gBAAMM,UAAUF,UAAUG,GAAV,CAAc,SAAd,CAAhB;AACA;AACA;AACA;AACA;AACI;AACJ,gBAAMC,UAAUlC,GAAGmC,QAAH,CAAYC,QAAZ,GAAuBC,IAAvB,CAA4BC,KAA5B,CAAkC,GAAlC,CAAhB;AACA,gBAAIC,eAAe,IAAnB;AACA,gBAAIL,QAAQM,MAAR,IAAiB,CAArB,EAAwB;AACpBD,+BAAeL,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAlC;AACH;AACD,gBAAI,KAAK1B,gBAAL,IAAyBwB,OAA7B,EAAsC;AAClC3B,4BAAY,KAAKG,gBAAjB;AACH,aAFD,MAEO,IAAI,KAAKD,eAAT,EAA0B;AAC7BF,4BAAY,KAAKE,eAAjB;AACH;AACD,gBAAIgC,YAAJ,EAAkB;AACd,oBAAIE,gBAAmBpC,SAAnB,SAAgCkC,YAApC;AACA,oBAAIG,YAAY1C,GAAG2C,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB;AAAA,2BAASC,MAAMC,GAAf;AAAA,iBAAxB,CAAhB;AACA,qBAAK,IAAIC,IAAE,CAAX,EAAcA,IAAGN,UAAUF,MAA3B,EAAmCQ,GAAnC,EAAwC;AACpC,wBAAIN,UAAUM,CAAV,EAAaC,OAAb,CAAqBR,aAArB,IAAsC,CAAC,CAA3C,EAA8C;AAC1CpC,oCAAeA,SAAf,SAA4BkC,YAA5B;AACA;AACH;AACJ;AACJ;AACJ;;AAED,YAAIlB,gBAAgBM,OAAOuB,IAA3B,EAAiC;AAC7B,iBAAKC,gBAAL,GAAwB,IAAxB;AACArD;AACH;;AAED,YAAIE,GAAGwB,GAAH,CAAO4B,QAAP,IAAmB,KAAK9C,WAA5B,EAAyC;AACrCD,wBAAY,KAAKC,WAAjB;AACH;;AAED,YAAI,KAAKQ,OAAT,EAAkB;AACd,iBAAKA,OAAL,CAAauC,MAAb,GAAsB,KAAtB;;AAEA,gBAAI,CAAChC,YAAL,EAAmB;AACf,qBAAKiC,IAAL,CAAUC,SAAV,CAAoBvD,GAAGwD,QAAH,CAChBxD,GAAGyD,SAAH,CAAa,EAAb,CADgB,EAEhBzD,GAAG0D,QAAH,CAAY,YAAM;AACd,0BAAK5C,OAAL,CAAauC,MAAb,GAAsB,IAAtB;AACA,0BAAKvC,OAAL,CAAa6C,GAAb,CAAiB,OAAjB;AACA,0BAAK7C,OAAL,CAAa8C,EAAb,CAAgB,OAAhB,EAAyB,YAAM;AAC3B,4BAAI,MAAKC,aAAT,EAAwB;AACxB,4BAAIC,eAAe,MAAKR,IAAL,CAAUS,YAAV,CAAuB,kBAAvB,CAAnB;AACA,4BAAID,YAAJ,EAAkB;AACdA,yCAAaE,WAAb,GAA2BC,QAA3B,CAAoC,aAApC,EAAmD;AAC/CnB,uCAAOzC;AADwC,6BAAnD;AAGH;AACDkB;AACA,8BAAKsC,aAAL,GAAqB,IAArB;AACH,qBAVD;AAWH,iBAdD,CAFgB,CAApB;AAkBH;AACJ;AACD,aAAKP,IAAL,CAAUD,MAAV,GAAmB,IAAnB;AACA,aAAKC,IAAL,CAAUY,OAAV,GAAoB,GAApB;;AAEA,aAAKC,YAAL,GAAoB9D,SAApB;AACA,aAAK+D,gBAAL,GAAwB,IAAxB;AACA,aAAKC,kBAAL,GAA0B,KAA1B;AACA,aAAKC,eAAL,GAAuB,KAAK7D,UAAL,CAAgBsD,YAAhB,CAA6B/D,GAAGuE,WAAhC,CAAvB;AACA,aAAKD,eAAL,CAAqBE,QAArB,GAAgC,CAAhC;AACA,YAAI,KAAKzD,YAAT,EAAuB;AACnB,iBAAKA,YAAL,CAAkB0D,MAAlB,GAA2B,IAA3B;AACH;;AAEDzE,WAAGmC,QAAH,CAAYuC,YAAZ,CAAyBrE,SAAzB,EAAoC,UAACsE,cAAD,EAAiBC,UAAjB,EAAgC;AAChE,gBAAIA,aAAa,CAAjB,EAAoB;AAChB,sBAAKC,YAAL,GAAoBF,iBAAiBC,UAArC;AACH;AACJ,SAJD,EAIE,UAACE,KAAD,EAAW;AACT,gBAAIA,KAAJ,EAAW;AACPxD;AACH,aAFD,MAEO;AACH,sBAAK+C,kBAAL,GAA0B,IAA1B;AACH;AACJ,SAVD;AAWH,KA7GI;AA+GLU,UA/GK,oBA+GI;AAAA;;AACL,YAAI,KAAKX,gBAAL,IAAyB,KAAKE,eAA9B,IAAiD,KAAKO,YAAL,GAAoB,CAAzE,EAA4E;AACxE,gBAAIG,UAAU,CAAC,KAAKH,YAAL,GAAoB,KAAKP,eAAL,CAAqBE,QAA1C,IAAsD,EAApE;AACA,gBAAIQ,UAAU,CAAd,EAAiB;AACb,qBAAKV,eAAL,CAAqBE,QAArB,IAAiCQ,OAAjC;AACA,oBAAI,KAAKnE,WAAT,EAAsB;AAClB,yBAAKA,WAAL,CAAiBoE,CAAjB,GAAqBC,KAAKC,GAAL,CAAS,KAAKtE,WAAL,CAAiBoE,CAA1B,EAA6B,KAAKrE,QAAL,GAAgB,KAAK0D,eAAL,CAAqBE,QAAlE,CAArB;AACH;AACD,oBAAI,KAAKzD,YAAT,EAAuB;AACnB,yBAAKA,YAAL,CAAkB0D,MAAlB,GAA8BS,KAAKE,IAAL,CAAU,KAAKd,eAAL,CAAqBE,QAArB,GAAgC,GAA1C,CAA9B;AACH;AACJ;AACD,gBAAI,KAAKF,eAAL,CAAqBE,QAArB,GAAgC,IAAhC,IAAwC,KAAKH,kBAAjD,EAAqE;AACjE,qBAAKA,kBAAL,GAA0B,KAA1B;AACA,qBAAKD,gBAAL,GAAwB,KAAxB;AACA,oBAAIX,YAAY,KAAK4B,aAAL,GAAqB,EAArB,GAA0B,CAA1C;AACA,qBAAK/B,IAAL,CAAUC,SAAV,CAAoBvD,GAAGwD,QAAH,CAAYxD,GAAGyD,SAAH,CAAaA,SAAb,CAAZ,EAAqCzD,GAAG0D,QAAH,CAAY,YAAI;AACrE1D,uBAAGmC,QAAH,CAAYmD,SAAZ,CAAsB,OAAKnB,YAA3B;AACH,iBAFwD,CAArC,CAApB;AAGA,oBAAI,KAAKpD,YAAT,EAAuB;AACnB,yBAAKA,YAAL,CAAkB0D,MAAlB,GAA2B,MAA3B;AACH;AACJ;AACJ;AACJ,KAvII;AAyILvD,kBAzIK,4BAyIY;AACb;AACH,KA3II;AA6ILqE,kBA7IK,0BA6IUC,GA7IV,EA6Ie;AAChB,aAAKH,aAAL,GAAqBG,GAArB;AACH,KA/II;AAiJLC,aAjJK,uBAiJO;AACR,aAAKnC,IAAL,CAAUoC,cAAV;AACH,KAnJI;AAqJLC,aArJK,uBAqJO;AACR,YAAI,KAAKxC,gBAAT,EAA2B;AACvBpD;AACH;AACJ;AAzJI,CAAT","file":"LoadingScreen.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/component","sourcesContent":["\n\nconst {registerLoadHowl, unregisterLoadHowl} = require('utils');\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        sceneName: '',\n        sdSceneName: '',\n        sceneNameIframe: '',\n        sceneNameHistory: '',\n        processBar: cc.Node,\n        loadingBG: cc.Node,\n        barWidth: 0,\n        loadingGlow: cc.Node,\n        homeBtn: cc.Node,\n        percentLabel: cc.Label\n    },\n    onLoad() {\n        this.customInitLang();\n        if (this.sceneName === '') return;\n        const loadConfigAsync = require('loadConfigAsync');\n        const {LOGIN_IFRAME} = loadConfigAsync.getConfig();\n        const {handleFlowOutGame, handleCloseGameIframe} = require(\"gameCommonUtils\");\n        let sceneName = this.sceneName;\n         \n        if (cc.sys.isBrowser) {\n            const queryString = window.location.search;\n            const urlParams = new URLSearchParams(queryString);\n            const history = urlParams.get('history');\n            // var language = urlParams.get('l');\n            // var currency = urlParams.get('c');\n            // language = language ? language.toUpperCase() : null;\n            // currency = currency ? currency.toUpperCase() : null;\n                //`${language}-${currency}`;\n            const extName = cc.director.getScene().name.split('-');\n            let extSceneName = null;\n            if (extName.length>= 3) {\n                extSceneName = extName[1] + '-' + extName[2];\n            }\n            if (this.sceneNameHistory && history) {\n                sceneName = this.sceneNameHistory;\n            } else if (this.sceneNameIframe) {\n                sceneName = this.sceneNameIframe;\n            }\n            if (extSceneName) {\n                let redirectScene = `${sceneName}-${extSceneName}`;\n                let sceneList = cc.game._sceneInfos.map(scene => scene.url);\n                for (let i=0; i <sceneList.length; i++) {\n                    if (sceneList[i].indexOf(redirectScene) > -1) {\n                        sceneName = `${sceneName}-${extSceneName}`;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (LOGIN_IFRAME && window.Howl) {\n            this.switchHowlLoader = true;\n            registerLoadHowl();\n        }\n\n        if (cc.sys.isMobile && this.sdSceneName) {\n            sceneName = this.sdSceneName;\n        }\n\n        if (this.homeBtn) {\n            this.homeBtn.active = false;\n\n            if (!LOGIN_IFRAME) {\n                this.node.runAction(cc.sequence(\n                    cc.delayTime(10),\n                    cc.callFunc(() => {\n                        this.homeBtn.active = true;\n                        this.homeBtn.off('click');\n                        this.homeBtn.on('click', () => {\n                            if (this.isBackToLobby) return;\n                            let eventHandler = this.node.getComponent(\"KtekEventHandler\");\n                            if( eventHandler ){\n                                eventHandler.getInstance().sendToUs(\"clear_cache\", {\n                                    scene: sceneName\n                                });\n                            }\n                            handleCloseGameIframe();\n                            this.isBackToLobby = true;\n                        });\n                    })\n                ));\n            }\n        }\n        this.node.active = true;\n        this.node.opacity = 255;\n\n        this.updatedScene = sceneName;\n        this.preloadGameScene = true;\n        this.isLoadingCompleted = false;\n        this.progressBarComp = this.processBar.getComponent(cc.ProgressBar);\n        this.progressBarComp.progress = 0;\n        if (this.percentLabel) {\n            this.percentLabel.string = '0%';\n        }\n        \n        cc.director.preloadScene(sceneName, (completedCount, totalCount) => {\n            if (totalCount > 0) {\n                this.totalPercent = completedCount / totalCount;\n            }\n        },(error) => {\n            if (error) {\n                handleFlowOutGame();\n            } else {\n                this.isLoadingCompleted = true;\n            }\n        });\n    },\n\n    update() {\n        if (this.preloadGameScene && this.progressBarComp && this.totalPercent > 0) {\n            let percent = (this.totalPercent - this.progressBarComp.progress) / 20;\n            if (percent > 0) {\n                this.progressBarComp.progress += percent;\n                if (this.loadingGlow) {\n                    this.loadingGlow.x = Math.max(this.loadingGlow.x, this.barWidth * this.progressBarComp.progress);\n                }\n                if (this.percentLabel) {\n                    this.percentLabel.string = `${Math.ceil(this.progressBarComp.progress * 100)}%`;\n                }\n            }\n            if (this.progressBarComp.progress > 0.99 && this.isLoadingCompleted) {\n                this.isLoadingCompleted = false;\n                this.preloadGameScene = false;\n                let delayTime = this.isSlowLoading ? 15 : 0;\n                this.node.runAction(cc.sequence(cc.delayTime(delayTime), cc.callFunc(()=>{\n                    cc.director.loadScene(this.updatedScene);\n                })));\n                if (this.percentLabel) {\n                    this.percentLabel.string = '100%';\n                }\n            }\n        }\n    },\n\n    customInitLang() {\n        // init for fish language\n    },\n\n    setSlowLoading(val) {\n        this.isSlowLoading = val;\n    },\n\n    onDisable() {\n        this.node.stopAllActions();\n    },\n\n    onDestroy() {\n        if (this.switchHowlLoader) {\n            unregisterLoadHowl();\n        }\n    }\n});\n"]}