{"version":3,"sources":["CustomRichText.js"],"names":["RichTextChildImageName","CustomHTMLTextParser","require","cc","RichText","prototype","_addRichTextImageElement","richTextElement","spriteFrameName","style","src","spriteFrame","imageAtlas","getSpriteFrame","anchorY","spriteNode","PrivateNode","spriteComponent","addComponent","Sprite","setAnchorPoint","type","Type","SLICED","sizeMode","SizeMode","CUSTOM","node","addChild","_labelSegments","push","spriteRect","getRect","scaleFactor","spriteWidth","width","spriteHeight","height","expectWidth","imageWidth","expectHeight","imageHeight","scale","lineHeight","maxWidth","_lineOffsetX","_updateLineInfo","_labelWidth","setContentSize","_lineCount","event","click","_clickHandler","param","_clickParam","warnID","_updateRichText","enabled","_customHTMLTextParser","newTextArray","parse","string","_needsUpdateTextLayout","_textArray","_updateLabelSegmentTextAttributes","_resetState","lastEmptyLine","label","labelSize","i","length","text","newline","isImage","multilineTexts","split","j","labelString","_isLastComponentCR","labelWidth","_measureText","_updateRichTextWithMaxWidth","_addLabelSegment","getContentSize","_linesWidth","_labelHeight","_updateRichTextPosition","_layoutDirty"],"mappings":"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","file":"CustomRichText.js","sourceRoot":"../../../../../../assets/cc-common/cc-share-v1/CustomEngine","sourcesContent":["const RichTextChildImageName = \"RICHTEXT_Image_CHILD\";\nconst CustomHTMLTextParser = require('CustomHTMLTextParser');\n\ncc.RichText.prototype._addRichTextImageElement = function (richTextElement) {\n    let spriteFrameName = richTextElement.style.src;\n    let spriteFrame = this.imageAtlas.getSpriteFrame(spriteFrameName);\n    let anchorY = richTextElement.style.anchorY || 0;\n    if (spriteFrame) {\n        let spriteNode = new cc.PrivateNode(RichTextChildImageName);\n        let spriteComponent = spriteNode.addComponent(cc.Sprite);\n        spriteNode.setAnchorPoint(0, anchorY);\n        spriteComponent.type = cc.Sprite.Type.SLICED;\n        spriteComponent.sizeMode = cc.Sprite.SizeMode.CUSTOM;\n        this.node.addChild(spriteNode);\n        this._labelSegments.push(spriteNode);\n        let spriteRect = spriteFrame.getRect();\n        let scaleFactor = 1;\n        let spriteWidth = spriteRect.width;\n        let spriteHeight = spriteRect.height;\n        let expectWidth = richTextElement.style.imageWidth;\n        let expectHeight = richTextElement.style.imageHeight;\n\n        //follow the original rule, expectHeight must less then lineHeight\n        //AD use the scale property to adjust image scale\n        if (richTextElement.style.scale) {\n            scaleFactor = richTextElement.style.scale;\n            spriteWidth = spriteWidth * scaleFactor;\n            spriteHeight = spriteHeight * scaleFactor;\n        }\n        else if (expectHeight > 0 && expectHeight < this.lineHeight) {\n            scaleFactor = expectHeight / spriteHeight;\n            spriteWidth = spriteWidth * scaleFactor;\n            spriteHeight = spriteHeight * scaleFactor;\n        }\n        else {\n            scaleFactor = this.lineHeight / spriteHeight;\n            spriteWidth = spriteWidth * scaleFactor;\n            spriteHeight = spriteHeight * scaleFactor;\n        }\n\n        if (expectWidth > 0) spriteWidth = expectWidth;\n\n        if (this.maxWidth > 0) {\n            if (this._lineOffsetX + spriteWidth > this.maxWidth) {\n                this._updateLineInfo();\n            }\n            this._lineOffsetX += spriteWidth;\n\n        }\n        else {\n            this._lineOffsetX += spriteWidth;\n            if (this._lineOffsetX > this._labelWidth) {\n                this._labelWidth = this._lineOffsetX;\n            }\n        }\n        spriteComponent.spriteFrame = spriteFrame;\n        spriteNode.setContentSize(spriteWidth, spriteHeight);\n        spriteNode._lineCount = this._lineCount;\n\n        if (richTextElement.style.event) {\n            if (richTextElement.style.event.click) {\n                spriteNode._clickHandler = richTextElement.style.event.click;\n            }\n            if (richTextElement.style.event.param) {\n                spriteNode._clickParam = richTextElement.style.event.param;\n            }\n            else {\n                spriteNode._clickParam = '';\n            }\n        }\n        else {\n            spriteNode._clickHandler = null;\n        }\n    }\n    else {\n        cc.warnID(4400);\n    }\n}\n\ncc.RichText.prototype._updateRichText = function() {\n    if (!this.enabled) return;\n    const _customHTMLTextParser = new CustomHTMLTextParser();\n    let newTextArray = _customHTMLTextParser.parse(this.string);\n    if (!this._needsUpdateTextLayout(newTextArray)) {\n        this._textArray = newTextArray;\n        this._updateLabelSegmentTextAttributes();\n        return;\n    }\n\n    this._textArray = newTextArray;\n    this._resetState();\n\n    let lastEmptyLine = false;\n    let label;\n    let labelSize;\n\n    for (let i = 0; i < this._textArray.length; ++i) {\n        let richTextElement = this._textArray[i];\n        let text = richTextElement.text;\n        //handle <br/> <img /> tag\n        if (text === \"\") {\n            if (richTextElement.style && richTextElement.style.newline) {\n                this._updateLineInfo();\n                continue;\n            }\n            if (richTextElement.style && richTextElement.style.isImage && this.imageAtlas) {\n                this._addRichTextImageElement(richTextElement);\n                continue;\n            }\n        }\n        let multilineTexts = text.split(\"\\n\");\n\n        for (let j = 0; j < multilineTexts.length; ++j) {\n            let labelString = multilineTexts[j];\n            if (labelString === \"\") {\n                //for continues \\n\n                if (this._isLastComponentCR(text)\n                    && j === multilineTexts.length - 1) {\n                    continue;\n                }\n                this._updateLineInfo();\n                lastEmptyLine = true;\n                continue;\n            }\n            lastEmptyLine = false;\n\n            if (this.maxWidth > 0) {\n                let labelWidth = this._measureText(i, labelString);\n                this._updateRichTextWithMaxWidth(labelString, labelWidth, i);\n\n                if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {\n                    this._updateLineInfo();\n                }\n            }\n            else {\n                label = this._addLabelSegment(labelString, i);\n                labelSize = label.getContentSize();\n\n                this._lineOffsetX += labelSize.width;\n                if (this._lineOffsetX > this._labelWidth) {\n                    this._labelWidth = this._lineOffsetX;\n                }\n\n                if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {\n                    this._updateLineInfo();\n                }\n            }\n        }\n    }\n    if (!lastEmptyLine) {\n        this._linesWidth.push(this._lineOffsetX);\n    }\n\n    if (this.maxWidth > 0) {\n        this._labelWidth = this.maxWidth;\n    }\n    this._labelHeight = (this._lineCount + 0.26) * this.lineHeight;\n\n    // trigger \"size-changed\" event\n    this.node.setContentSize(this._labelWidth, this._labelHeight);\n\n    this._updateRichTextPosition();\n    this._layoutDirty = false;\n}"]}