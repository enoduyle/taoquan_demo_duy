{"version":3,"sources":["LoopRotation.js"],"names":["require","RotatingObject","cc","Class","extends","Component","properties","targetNodes","type","default","onLoad","start","update","dt","i","length","node","speed","minAngle","maxAngle","varSpeed","Math","random","speedVar","undefined","angle","clockwise"],"mappings":";;;;;;eAEwBA,QAAQ,YAAR;IAAlBC,0BAAAA;;AAENC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAa;AACTC,kBAAMP,cADG;AAETQ,qBAAS;AAFA;AADL,KAHP;;AAUL;;AAEAC,UAZK,oBAYK,CAAE,CAZP;AAcLC,SAdK,mBAcI,CAER,CAhBI;AAkBLC,UAlBK,kBAkBGC,EAlBH,EAkBO;AACR,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAG,KAAKP,WAAL,CAAiBQ,MAAnC,EAA2CD,GAA3C,EAA+C;AAC3C,gBAAIE,OAAO,KAAKT,WAAL,CAAiBO,CAAjB,EAAoBE,IAA/B;AACA,gBAAMC,QAAQ,KAAKV,WAAL,CAAiBO,CAAjB,EAAoBG,KAAlC;AACA,gBAAMC,WAAW,KAAKX,WAAL,CAAiBO,CAAjB,EAAoBI,QAArC;AACA,gBAAMC,WAAW,KAAKZ,WAAL,CAAiBO,CAAjB,EAAoBK,QAArC;AACA,gBAAMC,WAAW,CAACC,KAAKC,MAAL,KAAc,GAAf,IAAoB,CAApB,GAAsB,KAAKf,WAAL,CAAiBO,CAAjB,EAAoBS,QAA3D;AACA,gBAAGP,QAAM,IAAN,IAAYA,SAAOQ,SAAtB,EAAgC;AAC5BR,qBAAKS,KAAL,IAAc,KAAKlB,WAAL,CAAiBO,CAAjB,EAAoBY,SAApB,IAA+BT,QAAMG,QAArC,IAA+CP,EAA7D;AACA,oBAAGG,KAAKS,KAAL,IAAYP,QAAZ,IAAwB,KAAKX,WAAL,CAAiBO,CAAjB,EAAoBY,SAApB,GAA8B,CAAzD,EAA2D;AACvD,yBAAKnB,WAAL,CAAiBO,CAAjB,EAAoBY,SAApB,GAAgC,CAAC,KAAKnB,WAAL,CAAiBO,CAAjB,EAAoBY,SAArD;AACH;;AAED,oBAAGV,KAAKS,KAAL,IAAYN,QAAZ,IAAwB,KAAKZ,WAAL,CAAiBO,CAAjB,EAAoBY,SAApB,GAA8B,CAAzD,EAA2D;AACvD,yBAAKnB,WAAL,CAAiBO,CAAjB,EAAoBY,SAApB,GAAgC,CAAC,KAAKnB,WAAL,CAAiBO,CAAjB,EAAoBY,SAArD;AACH;AACJ;AACJ;AACJ;AApCI,CAAT","file":"LoopRotation.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/component","sourcesContent":["\n\nconst{RotatingObject} = require('CustomType');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        targetNodes: {\n            type: RotatingObject,\n            default: [],\n        },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {},\n\n    start () {\n\n    },\n\n    update (dt) {\n        for(let i = 0; i< this.targetNodes.length; i++){\n            let node = this.targetNodes[i].node;\n            const speed = this.targetNodes[i].speed;\n            const minAngle = this.targetNodes[i].minAngle;\n            const maxAngle = this.targetNodes[i].maxAngle;\n            const varSpeed = (Math.random()-0.5)*2*this.targetNodes[i].speedVar;\n            if(node!=null&&node!==undefined){\n                node.angle += this.targetNodes[i].clockwise*(speed+varSpeed)*dt;\n                if(node.angle<=minAngle && this.targetNodes[i].clockwise<0){\n                    this.targetNodes[i].clockwise = -this.targetNodes[i].clockwise;\n                }\n\n                if(node.angle>=maxAngle && this.targetNodes[i].clockwise>0){\n                    this.targetNodes[i].clockwise = -this.targetNodes[i].clockwise;\n                }\n            }\n        }\n    },\n});\n"]}