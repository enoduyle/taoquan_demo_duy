{"version":3,"sources":["Setting.js"],"names":["cc","Class","extends","Component","properties","BGMCheckBox","Node","SFXCheckBox","btnBetHistory","Button","onLoad","node","on","sfxToggle","bgmToggle","init","addToggleSwitchNetwork","initialized","getComponent","Toggle","isChecked","soundPlayer","isEnableBGM","check","playMainBGM","isEnableSFX","mainDirector","director","playingDemo","interactable","setEffectEnable","playSFXClick","setBgmEnable","gameStateManager","loadConfigAsync","require","getConfig","IS_PRODUCTION","CC_DEBUG","compName","extendCompName","serviceId","panelComponent","panel","toggleNode","addComponent","setContentSize","size","opacity","addChild","labelNode","Label","string","fontSize","toggleCom","position","v2","onForceGetLatestedState","onDestroy","off"],"mappings":"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","file":"Setting.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/gui","sourcesContent":["\n/* global CC_DEBUG */\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        BGMCheckBox: cc.Node,\n        SFXCheckBox: cc.Node,\n        btnBetHistory: cc.Button\n    },\n    onLoad() {\n        this.node.on(\"TOGGLE_SFX\", this.sfxToggle, this);\n        this.node.on(\"TOGGLE_BGM\", this.bgmToggle, this);\n        this.node.on(\"INIT\", this.init, this);\n        this.node.on(\"ADD_TOGGLE_SWITCH_NETWORK\", this.addToggleSwitchNetwork, this);\n        this.initialized = false;\n    },\n    init() {\n        //Its some weird sound with Toggle sound when init, so this.initialized is the work around\n        this.BGMCheckBox.getComponent(cc.Toggle).isChecked = false;\n        this.SFXCheckBox.getComponent(cc.Toggle).isChecked = false;\n\n        if (this.node.soundPlayer && this.node.soundPlayer.isEnableBGM) {\n            this.BGMCheckBox.getComponent(cc.Toggle).check();\n            this.node.soundPlayer.playMainBGM();\n        }\n        if (this.node.soundPlayer && this.node.soundPlayer.isEnableSFX) {\n            this.SFXCheckBox.getComponent(cc.Toggle).check();\n        }\n        this.initialized = true;\n        if (!this.node.mainDirector) return;\n        const director = this.node.mainDirector.director;\n        if (director && director.playingDemo) {\n            this.btnBetHistory && (this.btnBetHistory.interactable = false);\n        }\n    },\n\n    sfxToggle() {\n        if (this.node.soundPlayer && this.initialized) {\n            this.node.soundPlayer.setEffectEnable(this.SFXCheckBox.getComponent(cc.Toggle).isChecked);\n            this.node.soundPlayer.playSFXClick();\n        }\n    },\n\n    bgmToggle() {\n        if (this.node.soundPlayer && this.initialized) {\n            this.node.soundPlayer.playSFXClick();\n            this.node.soundPlayer.setBgmEnable(this.BGMCheckBox.getComponent(cc.Toggle).isChecked);\n        }\n    },\n\n    addToggleSwitchNetwork(gameStateManager) {\n        const loadConfigAsync = require('loadConfigAsync');\n        const { IS_PRODUCTION } = loadConfigAsync.getConfig();\n        if (!gameStateManager || IS_PRODUCTION || !CC_DEBUG) return;\n        \n        const compName = 'ClickAndShow';\n        const extendCompName = compName + gameStateManager.serviceId;\n        let panelComponent = this.node.getComponent('ClickAndShow');\n        if (!panelComponent && this.node.getComponent(extendCompName)) {\n            panelComponent = this.node.getComponent(extendCompName);\n        }\n        if (panelComponent && panelComponent.panel) {\n            this.toggleNode = new cc.Node;\n            this.toggleNode.addComponent(cc.Toggle);\n            this.toggleNode.setContentSize(cc.size(80, 80));\n            this.toggleNode.opacity = 0;\n\n            panelComponent.panel.addChild(this.toggleNode);\n            const labelNode = new cc.Node;\n            labelNode.addComponent(cc.Label);\n            labelNode.getComponent(cc.Label).string = 'SLOW NETWORK';\n            labelNode.getComponent(cc.Label).fontSize = 18;\n            this.toggleNode.addChild(labelNode);\n\n            const toggleCom = this.toggleNode.getComponent(cc.Toggle);\n            toggleCom.isChecked = false;\n            this.toggleNode.position = cc.v2(540, 0);\n            this.toggleNode.on('toggle', () => {\n                this.toggleNode.opacity = toggleCom.isChecked ? 255 : 0;\n                gameStateManager.onForceGetLatestedState(toggleCom.isChecked);\n            }, this);\n        }\n    },\n\n    onDestroy() {\n        if (this.toggleNode) {\n            this.toggleNode.off(\"toggle\");\n        }\n    }\n});"]}