{"version":3,"sources":["../../../../../../assets/cc-taoquan-9983/scripts/common/assets/cc-taoquan-9983/scripts/common/3DParticle9983.js"],"names":["require","getRandomInt","NodePool","configParticle9983","cc","Class","name","properties","start","end","extends","Component","particleNode","Node","particlePerSpawn","spawnInterval","speed","type","default","gravity","angle","size","radius","duration","onLoad","nodePool","init","node","exit","bind","setSpawnRate","setItemSpeed","setSpawnInterval","spawnTimer","timer","removeAllChildren","children","child","stopAnimation","clearPool","perSpawn","minSpeed","maxSpeed","interval","update","dt","i","getObj","parent","scale","Math","random","misc","degreesToRadians","position","v2","generatePoint","startAnimation","cos","sin","x","y"],"mappings":"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","file":"3DParticle9983.js","sourceRoot":"../../../../../../assets/cc-taoquan-9983/scripts/common","sourcesContent":["const {getRandomInt} = require('utils');\nconst NodePool = require('NodePool9983');\nvar configParticle9983  = cc.Class({\n    name: 'configParticle9983',\n    properties: {\n        start: 0,\n        end: 0\n    }\n});\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        particleNode: cc.Node,\n        particlePerSpawn: 0,\n        spawnInterval: 0.1,\n        speed: {\n            type: configParticle9983,\n            default:{}\n        },\n        gravity: 0,\n        angle: {\n            type: configParticle9983,\n            default:{}\n        },\n        size: {\n            type: configParticle9983,\n            default: {}\n        },\n        radius: 0,\n        duration: -1,\n    },\n    onLoad(){\n        this.nodePool = new NodePool('ParticleItem9983');\n        this.nodePool.init(this.particleNode);\n        this.node.exit = this.exit.bind(this);\n        this.node.setSpawnRate = this.setSpawnRate.bind(this);\n        this.node.setItemSpeed = this.setItemSpeed.bind(this);\n        this.node.setSpawnInterval = this.setSpawnInterval.bind(this);\n    },\n    start(){\n        this.spawnTimer = 0;\n        this.timer = 0;\n    },\n    exit(){\n        this.node.removeAllChildren(true);\n        this.timer = 0;\n        for(let child of  this.node.children){\n            child.stopAnimation();\n        }\n        this.nodePool.clearPool();\n    },\n    setSpawnRate(perSpawn){\n        this.particlePerSpawn = perSpawn;\n    },\n    setItemSpeed(minSpeed, maxSpeed) {\n        this.speed = {\n            start: minSpeed,\n            end: maxSpeed\n        };\n    },\n    setSpawnInterval(interval){\n        this.spawnInterval = interval;\n    },\n\n    update(dt) {\n        if(this.duration < 0 || this.timer <= this.duration) {\n            this.timer += dt;\n            this.spawnTimer += dt;\n            if (this.spawnTimer >= this.spawnInterval) {\n                this.spawnTimer -= this.spawnInterval;\n                for (let i = 0; i < this.particlePerSpawn; i++) {\n                    let node = this.nodePool.getObj();\n                    node.parent = this.node;\n                    // node.active = true;\n                    node.angle = getRandomInt(0,360);\n                    node.scale = this.size.start + Math.random() * (this.size.end - this.size.start) * 2;\n                    let angle = cc.misc.degreesToRadians(this.angle.start) + Math.random() * (cc.misc.degreesToRadians(this.angle.end) - cc.misc.degreesToRadians(this.angle.start));\n                    node.position = (this.radius === 0) ? cc.v2(0,0) : this.generatePoint(angle);\n                    let speed = this.speed.start + Math.random() * (this.speed.end - this.speed.start);\n                    node.startAnimation(Math.cos(angle) * speed, Math.sin(angle) * speed, 0, this.gravity);\n                }\n            }\n        }\n    },\n    generatePoint(angle){\n        // let angle = cc.misc.degreesToRadians(this.angle.start) + Math.random() * (cc.misc.degreesToRadians(this.angle.end) - cc.misc.degreesToRadians(this.angle.start));\n        let x = Math.cos(angle)*this.radius;\n        let y = Math.sin(angle)*this.radius;\n        return cc.v2(x,y);\n    }\n});"]}