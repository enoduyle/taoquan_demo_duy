{"version":3,"sources":["SlotTableTouchSymbol.js"],"names":["EventListenerManager","require","cc","Class","extends","Component","properties","spineAnimBorder","onLoad","init","node","on","allowTouchSymbol","bind","serviceId","config","GAME_ID","eventListenerManager","getInstance","registerEvent","onShowSymbolInfo","unRegisterAll","targetOff","start","GUI","mainDirector","director","gui","isAllow","isAllowTouchSymbol","emit","canvas","find","camera","getComponentInChildren","Camera","Node","EventType","TOUCH_END","onTouchEnd","event","isTutorialShowing","wlocation","Vec2","getScreenToWorldPoint","getLocation","allSymbols","getAllSymbol","index","length","symbol","curPoint","parent","convertToNodeSpaceAR","rect","getBoundingBox","contains","spineData","findSpineData","mainComponent","symbolName","spineBorder","animName","spineSkeletonDatabase","getSpineSkeletonData","arr","col","reel","reels","showSymbols","forEach","push","it","isLeftBorder","isRightBorder","isMiddle","onDestroy"],"mappings":"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","file":"SlotTableTouchSymbol.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/portrailGame/Tables","sourcesContent":["const EventListenerManager = require(\"EventListenerManager\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        spineAnimBorder : 'VFX_WinFrame'\n    },\n\n    onLoad() {\n        this.init();\n        this.node.on(\"ALLOW_TOUCH_SYMBOL\", this.allowTouchSymbol.bind(this));\n        let serviceId = this.node.config.GAME_ID || \"9966\";\n        this.eventListenerManager = EventListenerManager.getInstance(serviceId);\n        this.registerEvent();\n    },\n\n    registerEvent() {\n        if (this.eventListenerManager) {\n            this.eventListenerManager.on(\"ON_SHOW_SYMBOL_INFO\", this.onShowSymbolInfo, this);\n        }\n    },\n    unRegisterAll() {\n        if (this.eventListenerManager) {\n            this.eventListenerManager.targetOff(this);\n        }\n    },\n\n    start() {\n        this.GUI = this.node.mainDirector && this.node.mainDirector.director.gui;\n    },\n\n    allowTouchSymbol(isAllow = false){\n        this.isAllowTouchSymbol = isAllow;\n        this.GUI && this.GUI.emit('HIDE_INFO_SYMBOL');\n    },\n\n    init(){\n        this.canvas = cc.find('Canvas');\n        if(this.canvas){\n            this.camera = this.canvas.getComponentInChildren(cc.Camera);\n        }\n\n        if(this.camera){\n            this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        }\n    },\n\n    onTouchEnd(event){\n        if(this.node.mainDirector.director.isTutorialShowing())\n            return;\n        let wlocation = new cc.Vec2(0,0);\n        this.camera.getScreenToWorldPoint(event.getLocation(), wlocation);\n        if (this.isAllowTouchSymbol == false) return;\n\n        this.allSymbols = this.getAllSymbol();\n        for (let index = 0; index < this.allSymbols.length; ++index) {\n            let symbol = this.allSymbols[index];\n            this.curPoint = symbol.parent.convertToNodeSpaceAR(wlocation);\n            let rect = symbol.getBoundingBox();\n            if (rect.contains(this.curPoint)){\n                const spineData = this.findSpineData(symbol.mainComponent.symbolName);\n                const spineBorder = this.findSpineData(this.spineAnimBorder);\n                this.GUI && this.GUI.emit('SHOW_INFO_SYMBOL', wlocation, symbol , spineData, spineBorder);\n            }\n        }\n\n    },\n\n    findSpineData(animName) {\n        return this.node.mainDirector.director.spineSkeletonDatabase.getSpineSkeletonData(animName);\n    },\n\n    onShowSymbolInfo(){\n        //override here\n    },\n\n    getAllSymbol(){\n        const arr = [];\n        for (let col = 0; col < this.node.reels.length; ++col) {\n            const reel = this.node.reels[col];\n            reel.showSymbols.forEach(it=>{\n                arr.push(it);\n                it.isLeftBorder  = col === 0 || col == 1;\n                it.isRightBorder = col === (this.node.reels.length - 1) || col === (this.node.reels.length - 2);\n                it.isMiddle      = it.isLeftBorder === false && it.isLeftBorder === false;\n            });\n        }\n        return arr;\n    },\n\n    onDestroy(){\n        this.unRegisterAll();\n    }\n});\n"]}