{"version":3,"sources":["../../../../../../assets/cc-common/cc-slotbase-v2/portrailGame/assets/cc-common/cc-slotbase-v2/portrailGame/BetSelectionPanelController.js"],"names":["require","formatMoney","findKeyByValue","convertObjectToArrayKey","cc","Class","extends","Component","properties","gameId","btnConfirm","Node","btnClose","btnMaxBet","betOption","lblWinAmount","lblWallet","lblCurrentBet","lblMax","colorSelectedConfirm","Color","colorSelectedMaxBet","colorUnSelected","selectedValue","onLoad","node","on","updateValue","clearAllBets","start","gSlotDataStore","slotBetDataStore","data","currentBetData","steps","stepIndex","betValues","Object","values","sort","a","b","emit","isMaxBet","getComponent","Button","interactable","unSetSelectColorButtons","updateBottomLabelValue","wallet","winAmountPS","playSession","Label","string","isTrialMode","mainDirector","director","trialWalletAmount","controller","lastValue","setSelectedBet","value","selectedBet","setSelectColorButtons","target","color","clickBtnConfirm","selectBetEvent","Event","EventCustom","setUserData","betValue","dispatchEvent","onClickSelectBet","evt","id","arrayBetIndex","length","onClickMaxBet","soundPlayer","playSFXClick","clickBtnClose","parent"],"mappings":"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","file":"BetSelectionPanelController.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/portrailGame","sourcesContent":["const { formatMoney, findKeyByValue, convertObjectToArrayKey } = require('utils');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        gameId: 9948,\n        btnConfirm: cc.Node,\n        btnClose: cc.Node,\n        btnMaxBet: cc.Node,\n        betOption: cc.Node,\n        lblWinAmount: cc.Node,\n        lblWallet: cc.Node,\n        lblCurrentBet: cc.Node,\n        lblMax: cc.Node,\n        colorSelectedConfirm: cc.Color,\n        colorSelectedMaxBet: cc.Color,\n        colorUnSelected: cc.Color,\n        selectedValue: -1,\n    },\n\n    onLoad() {\n        this.node.on('UPDATE_VALUE', this.updateValue, this);\n        this.node.on('CLEAR_ALL_BET', this.clearAllBets, this);\n    },\n\n    start() {\n        // const list = [1000, 5000, 10000, 20000, 50000, 100000, 200000];\n        // list.sort((a, b) => { return b - a; });\n        // this.betOption.emit('UPDATE_DATA', list, 5000, this);\n    },\n\n    updateValue() {\n        const { currentBetData, steps } = this.node.gSlotDataStore.slotBetDataStore.data;\n        let stepIndex = findKeyByValue(steps, currentBetData);\n        if (!stepIndex) {\n            return;\n        }\n        const betValues = Object.values(steps);\n        betValues.sort((a, b) => { return b - a; });\n        this.betOption.emit('UPDATE_DATA', betValues, currentBetData, this);\n        const isMaxBet = betValues[0] == currentBetData;\n        this.btnMaxBet.getComponent(cc.Button).interactable = !isMaxBet;\n        this.unSetSelectColorButtons(isMaxBet);\n        this.updateBottomLabelValue();\n    },\n\n    updateBottomLabelValue() {\n        const { currentBetData, wallet } = this.node.gSlotDataStore.slotBetDataStore.data;\n        const {winAmountPS } = this.node.gSlotDataStore.playSession;\n        \n        this.lblWinAmount && (this.lblWinAmount.getComponent(cc.Label).string = formatMoney(winAmountPS));\n\n        this.lblCurrentBet && (this.lblCurrentBet.getComponent(cc.Label).string = formatMoney(currentBetData));\n\n        if (!this.node.gSlotDataStore.isTrialMode) {\n            this.lblWallet && (this.lblWallet.getComponent(cc.Label).string = formatMoney(wallet));\n        } else {\n            this.lblWallet && (this.lblWallet.getComponent(cc.Label).string = formatMoney(this.node.mainDirector.director.trialWalletAmount.controller.lastValue));\n        }\n    },\n\n\n    setSelectedBet(value, isMaxBet = false) {\n        // console.warn('hhh setSelectedBet ' + value + ' isMaxBet ' + isMaxBet);\n        this.selectedBet = value;\n        this.btnMaxBet.getComponent(cc.Button).interactable = !isMaxBet;\n    },\n\n    setSelectColorButtons() {\n        this.btnMaxBet.getComponent(cc.Button).target.color = this.colorSelectedMaxBet;\n        this.btnConfirm.getComponent(cc.Button).target.color = this.colorSelectedConfirm;\n        this.btnClose.getComponent(cc.Button).target.color = this.colorSelectedConfirm;\n        this.lblMax.color = this.colorSelectedMaxBet;\n    },\n\n    unSetSelectColorButtons(isMaxBet = false) {\n        if (!isMaxBet) {\n            this.btnMaxBet.getComponent(cc.Button).target.color = this.colorUnSelected;\n            this.lblMax.color = this.colorUnSelected;\n        }\n        else {\n            this.btnMaxBet.getComponent(cc.Button).target.color = this.colorSelectedMaxBet;\n            this.lblMax.color = this.colorSelectedMaxBet;\n        }\n\n        this.btnConfirm.getComponent(cc.Button).target.color = this.colorUnSelected;\n        this.btnClose.getComponent(cc.Button).target.color = this.colorUnSelected;\n    },\n\n    clickBtnConfirm() {\n        // this.node.emit('HIDE');\n        this.selectBetEvent = new cc.Event.EventCustom('SELECT_BET_EVENT', true);\n        this.selectBetEvent.setUserData({\n            betValue: this.selectedBet,\n        });\n        this.node.dispatchEvent(this.selectBetEvent);\n    },\n\n    onClickSelectBet(evt, id) {\n        const { currentBetData, steps } = this.node.gSlotDataStore.slotBetDataStore.data;\n        let stepIndex = findKeyByValue(steps, currentBetData);\n        if (!stepIndex) return;\n\n        id--;\n        const arrayBetIndex = convertObjectToArrayKey(steps);\n        this.selectedBet = steps[arrayBetIndex[id]];\n        if (this.selectedBet === steps[arrayBetIndex[arrayBetIndex.length - 1]]) {\n            this.btnMaxBet.getComponent(cc.Button).interactable = false;\n        } else this.btnMaxBet.getComponent(cc.Button).interactable = true;\n    },\n\n    onClickMaxBet() {\n        this.node.soundPlayer && this.node.soundPlayer.playSFXClick();\n        this.betOption.emit('SELECT_MAX_BET');\n    },\n\n    clickBtnClose(){\n        this.node.soundPlayer && this.node.soundPlayer.playSFXClick();\n        this.node.parent.emit(\"HIDE\");\n    },\n\n    clearAllBets() {\n        this.betOption.emit('CLEAR_ALL_BET');\n    }\n});\n"]}