{"version":3,"sources":["../../../../../../assets/cc-common/cc-slotbase-v2/game-state/assets/cc-common/cc-slotbase-v2/game-state/gameStateSlot.js"],"names":["gameNetwork","window","GameNetwork","require","CommandManager","EventManager","messageManager","MessageManager","getInstance","lodash","playInfo","PlayerInfoStateManager","lib","logger","uuid","mapObjectKey","keyMapConfig","SLOT_STRATEGY","resendCount","shouldWaitForACK","canBeDuplicated","timeWaitForEvent","recoverEvent","NEW_EVENT","GameStateManager","gameData","gameId","gameTrialData","tutorialData","useShortParam","serverVersion","_playerInfoStateManager","_state","STATE_NORMAL","serviceId","token","getToken","_commandManager","_eventManager","lastSuccessCommandId","gameCommandId","waitForEventData","_lastCommandIds","gltCounting","registerGame","onAck","bind","onCannotSendMessage","onCannotConnect","_gotoDieMode","CAN_NOT_CONNECT","onCannotAuthen","_cleanUp","cc","log","authFailed","onNetworkWarning","onShowPopupDisconnected","onConnected","onNetworkConnected","onEvent","_trialMode","_spinTrialDataIndex","_spinTrialData","_spinTutorialData","_setUpEventListener","_handleNetworkStatusEvent","getWalletBalance","length","warn","_spinTutorialIndex","_clientSendRequest","event","betId","betLines","sendData","l","languageCode","_getNewTrialPS","_returnTrialPS","data","requestingNewPS","currentBetValue","totalBet","trialPS","cloneDeep","Math","floor","random","lastTrialPS","shift","response","cId","commandId","clearTimeout","spinTimer","setTimeout","_fireEventStateUpdated","option","openCell","metaData","stateType","objectId","cleanUp","removeEvent","_fireEventUserLogOutFunc","timeoutLastedState","clearRemainingCommand","removeWaitingQueue","_outGame","cleanUpForGame","unSubscribe","groupChannelName","unregisterGame","callbackJP","registerEvent","debug","subscribe","eventData","result","convertEvent","index","indexOf","latestExecuteCommandResult","isForceGetLatestedState","STATE_PANIC","lastEvent","onNetworkResume","isMismatch","currentPSData","id","version","MISMATCH_DATA_VERSION","playerUserId","getUserId","_triggerGetLatestStatePrivate","reason","sendGameMessage","onNetworkFailed","eventRecover","_gotoPanicMode","STATE_DIE","EXPECTED_EVENT_TIMEOUT","strategy","pick","Object","assign","executeCommand","COMMAND_FAILED_CONC_OVER_LIMIT","error","COMMAND_FAILED_DUPLICATE","_waitForNetwork","waitForEventId","waitForEvent","_verifyExpectedEvent","_timeoutExpectedEventHandler","hasJoinGameAck","onNetworkDisconnect","code","loadConfigAsync","getConfig","LOGIN_IFRAME","URL_CODE","env","getUrlParam","_bindingEvents","self","isLogOut","userLogout","_fireEventJoinGameResult","_fireEventJoinGameDenied","_fireEventStatePushed","_fireEventErrorPushed","_fireEventRequestDenied","_fireEventNoticeJackpotWin","_fireEventJackpotWin","_fireEventNoticeUserWinJackpot","COMMAND_SEND_SUCCESSFULLY","_handleCommandSendSuccessfully","commandPayload","_saveNewCommandId","_waitForEvent","push","CONNECTED","isArray","errorCode","onNetworkError","_gotoNormalMode","joinGameSuccess","extendData","_subscribeJPChannel","dataJoinGame","isFinished","dataResume","isEmpty","metaDataUser","currentWalletAmount","getCurrentWallet","metaDataPromotion","status","outGame","onJoinGameDenied","onRequestDenied","stateUpdate","dataRes","_checkMismatchData","onNoticeJackpotWin","jpInfo","cmdId","isMe","includes","onJackpotWin","onNoticeUserWinJackpot","MISMATCH_COMMAND_ID","isOn","module","exports"],"mappings":"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","file":"gameStateSlot.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/game-state","sourcesContent":["const gameNetwork = window.GameNetwork || require('game-network');\nconst CommandManager = gameNetwork.CommandManager;\nconst EventManager = gameNetwork.EventManager;\nconst messageManager = gameNetwork.MessageManager.getInstance();\nconst lodash = require('lodash');\nconst playInfo = gameNetwork.PlayerInfoStateManager.getInstance();\nconst {logger, uuid} = gameNetwork.lib;\nconst {mapObjectKey} = require('utils');\nconst keyMapConfig = require('MsgKeyMapping');\n\nconst SLOT_STRATEGY = {\n    'client-join-game-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'jg': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n\n    'client-normal-spin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'ng': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-free-spin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'fg': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'ngt': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"PANIC\",\n    },\n    'fgt': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"PANIC\",\n    },\n    'mgt': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-lightning-spin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-powerup-spin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n\n    'client-mini-game-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'mg': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-free-spin-option-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'fo': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-gamble-spin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-respin-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent: 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'rg': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent: 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'glt': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-join-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-normal-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-free-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-bonus-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-free-game-option-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'fot': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-respin-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent: 5000,\n        recoverEvent: \"DIE\",\n    },\n    'rgt': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent: 5000,\n        recoverEvent: \"DIE\",\n    },\n    'client-gamble-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-lightning-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-powerup-game-trial-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 10000,\n        recoverEvent: \"DIE\",\n    },\n    'client-free-spin-option-event-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n    'client-free-spin-event-request': {\n        resendCount: 100, shouldWaitForACK: true, canBeDuplicated: false,\n        timeWaitForEvent : 5000,\n        recoverEvent: \"PANIC\",\n    },\n};\n\nconst NEW_EVENT = {\n    'client-normal-spin-request' : 'ng',\n    'client-free-spin-request' : 'fg',\n    'client-mini-game-request' : 'mg',\n    'client-free-spin-option-request' : 'fo',\n    'client-respin-request': 'rg',\n    'client-join-game-request' : 'jg',\n    'client-normal-game-trial-request' : 'ngt',\n    'client-free-game-trial-request' : 'fgt',\n    'client-bonus-game-trial-request' : 'mgt',\n    'client-free-game-option-trial-request' : 'fot',\n    'client-respin-trial-request': 'rgt'\n};\nclass GameStateManager {\n   \n    constructor ({gameData}) {\n        const {\n            gameId, gameTrialData, tutorialData, useShortParam, serverVersion,\n        } = gameData;\n        this._playerInfoStateManager = playInfo;\n        this._state = GameStateManager.STATE_NORMAL;\n        this.gameData = gameData;\n        this.serviceId = gameId;\n        this.token = this._playerInfoStateManager.getToken();\n        this._commandManager = new CommandManager(gameId, 1, useShortParam ? 'cId' : 'commandId');\n        this._eventManager = new EventManager();\n        this.lastSuccessCommandId = '';\n        this.gameCommandId = '';\n        this.waitForEventData = {};\n        this._lastCommandIds = [];\n        this.gltCounting = 0;\n        this.useShortParam = useShortParam;\n        this.serverVersion = serverVersion;\n\n        messageManager.registerGame(gameId, {\n            onAck : this._commandManager.onAck.bind(this._commandManager),\n            onCannotSendMessage : this._commandManager.onCannotSendMessage.bind(this._commandManager)\n        }, {\n            onCannotConnect : () => {\n                this._gotoDieMode(EventManager.CAN_NOT_CONNECT);\n            },\n            onCannotAuthen : () => {\n                this._cleanUp();\n                cc.log('AUTHEN FAILED');\n                if (typeof this.gameData.authFailed === 'function') {\n                    this.gameData.authFailed();\n                }\n            },\n            onNetworkWarning : ()=>{\n                if (typeof this.gameData.onNetworkWarning === 'function') {\n                    this.gameData.onNetworkWarning();\n                }\n            },\n            onShowPopupDisconnected: () => {\n                if (typeof this.gameData.onShowPopupDisconnected === 'function') {\n                    this.gameData.onShowPopupDisconnected();\n                }\n            },\n            onConnected : ()=>{\n                if (typeof this.gameData.onNetworkConnected === 'function') {\n                    this.gameData.onNetworkConnected();\n                }\n            },\n            onEvent : this._eventManager.onEvent.bind(this._eventManager)\n        });\n        this._trialMode = false;\n        this._spinTrialDataIndex = 0;\n        this._spinTrialData = gameTrialData;\n        this._spinTutorialData = tutorialData;\n        this._setUpEventListener();\n        this._handleNetworkStatusEvent();\n    }\n\n    getCurrentWallet() {\n        return this._playerInfoStateManager.getWalletBalance();\n    }\n\n    switchToTrial() {\n        if (this._spinTrialData && this._spinTrialData.length > 0) {\n            cc.warn(\"TrialData is not set\");\n        }\n        this._trialMode = true;\n        this._spinTutorialIndex = 0;\n\n        return this._trialMode;\n    }\n\n    skipTutorial(){\n        this._spinTutorialIndex = 999;\n    }\n\n    switchToReal() {\n        this._trialMode = false;\n    }\n\n    triggerJoinTrial()\n    {\n        this._clientSendRequest({\n            event: 'client-join-game-trial-request',\n        });\n    }\n\n    triggerSpinRequest(betId, betLines) {\n        const sendData = {\n            betId,\n            l: (window.languageCode || 'VI'),\n        };\n        if (betLines) {\n            sendData.betLines = betLines;\n        }\n        if (this._trialMode)\n        {\n            if (this._getNewTrialPS())\n            {\n                this._returnTrialPS();\n            }\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-normal-game-trial-request',\n                    data: sendData\n                });\n            }\n        }\n        else {\n            this.requestingNewPS = true;\n            this._clientSendRequest({\n                event: 'client-normal-spin-request',\n                data: sendData\n            });\n        }\n    }\n\n    triggerSpinRequestBatch1(currentBetValue) {\n        if (this._trialMode)\n        {\n            if (this._getNewTrialPS())\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-normal-game-trial-request',\n                    data: {totalBet: currentBetValue, betId: ''}\n                });\n            }\n        }\n        else\n        {\n            this.requestingNewPS = true;\n            this._clientSendRequest({\n                event: 'client-normal-spin-request',\n                data: {totalBet: currentBetValue, betId: ''}\n            });\n        }\n    }\n\n    _getNewTrialPS() {\n        if (this._spinTutorialData && this._spinTutorialIndex < this._spinTutorialData.length)\n        {\n            this.trialPS = lodash.cloneDeep(this._spinTutorialData[this._spinTutorialIndex]);\n            this._spinTutorialIndex++;\n        }\n        else if (this._spinTrialData)\n        {\n            this.trialPS = lodash.cloneDeep(this._spinTrialData[Math.floor(Math.random()*this._spinTrialData.length)]);\n        }\n        else\n        {\n            this.trialPS = null;\n        }\n        this._spinTrialDataIndex = 0;\n\n        return (this.trialPS != null);\n    }\n\n    _returnTrialPS() {\n\n        this.lastTrialPS = this.trialPS.shift();\n        if (!this.lastTrialPS) return;\n        const response = {};\n        response.data = this.lastTrialPS;\n\n        cc.log(\"___TRIAL: response\",response);\n        this.gameCommandId = uuid();\n        if (this.useShortParam)\n            response.data[this.serviceId].data.cId = this.gameCommandId;\n        else\n            response.data[this.serviceId].data.commandId = this.gameCommandId;\n        clearTimeout(this.spinTimer);\n        this.spinTimer = setTimeout(() => {\n            if (this.useShortParam) {\n                this._fireEventStateUpdated(response.data[this.serviceId]);\n            }\n            else {\n                this._fireEventStateUpdated(response);\n            }\n            this._spinTrialDataIndex++;\n        },300);\n    }\n\n    triggerFreeSpinRequest() {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-free-game-trial-request',\n                    data: {}\n                });\n            }\n        }\n        else\n        {\n            this._clientSendRequest({\n                event: 'client-free-spin-request',\n                data: {}\n            });\n        }\n    }\n    \n    triggerFreeSpinEventRequest() {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-free-game-trial-request',\n                    data: {}\n                });\n            }\n        }\n        else\n        {\n            this._clientSendRequest({\n                event: 'client-free-spin-event-request',\n                data: {}\n            });\n        }\n    }\n\n    triggerFreeSpinOption(option) {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-free-game-option-trial-request',\n                    data: {option}\n                });\n            }\n        }  else {\n            this._clientSendRequest({\n                event: 'client-free-spin-option-request',\n                data: {option}\n            });\n        }\n    }\n\n    triggerFreeSpinEventOption(option) {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-free-game-option-trial-request',\n                    data: {option}\n                });\n            }\n        }  else {\n            this._clientSendRequest({\n                event: 'client-free-spin-option-event-request',\n                data: {option}\n            });\n        }\n    }\n\n    triggerMiniGame(openCell) {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-bonus-game-trial-request',\n                    data: {openCell}\n                });\n            }\n        }\n        else\n        {\n            this._clientSendRequest({\n                event: 'client-mini-game-request',\n                data: {openCell}\n            });\n        }\n    }\n\n    triggerLightningSpinRequest() {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-lightning-game-trial-request',\n                    data: {}\n                });\n            }\n        }\n        else {\n            this._clientSendRequest({\n                event: 'client-lightning-spin-request',\n                data: {}\n            });\n        }\n    }\n\n    triggerPowerUpSpinRequest(openCell) {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-powerup-game-trial-request',\n                    data: {openCell}\n                });\n            }\n        }\n        else {\n            this._clientSendRequest({\n                event: 'client-powerup-spin-request',\n                data: {openCell}\n            });\n        }\n    }\n\n    triggerGambleSpinRequest(openCell, totalBet) {\n        if (this._trialMode)\n        {\n            if (this.trialPS)\n            {\n                if (totalBet > 0) this.trialPS.shift();\n                this._returnTrialPS();\n            }\n            else\n            {\n                this._clientSendRequest({\n                    event: 'client-gamble-game-trial-request',\n                    data: {openCell, totalBet}\n                });\n            }\n        } else {\n            this._clientSendRequest({\n                event: 'client-gamble-spin-request',\n                data: {openCell, totalBet}\n            });\n        }\n    }\n\n    triggerRespinRequest() {\n        if (this._trialMode) {\n            if (this.trialPS)\n                this._returnTrialPS();\n            else {\n                this._clientSendRequest({\n                    event: 'client-respin-trial-request',\n                    data: {}\n                });\n            }\n        }\n        else {\n            this._clientSendRequest({\n                event: 'client-respin-request',\n                data: {}\n            });\n        }\n    }\n\n    _triggerGetLatestStatePrivate(metaData) {\n        const {stateType, serviceId, objectId} = metaData;\n        //Ensure do not repeat call latest state the same type\n        const data = {\n            serviceId,\n            objectId,\n            stateType\n        };\n\n        this._clientSendRequest({\n            event: 'glt',\n            data\n        });\n    }\n\n    cleanUpForGame() {\n        this._commandManager.cleanUp();\n        this._eventManager.cleanUp();\n        this._playerInfoStateManager.removeEvent('user-logged-out', this._fireEventUserLogOutFunc);\n        if (this.timeoutLastedState)\n        {\n            clearTimeout(this.timeoutLastedState);\n        }\n    }\n\n    cleanUpNetWork() {\n        this._commandManager.clearRemainingCommand();\n        this._eventManager.removeWaitingQueue();\n        if (this.timeoutLastedState) {\n            clearTimeout(this.timeoutLastedState);\n        }\n    }\n\n    outGame() {\n        if (this._outGame) return;\n        this.cleanUpForGame();\n        this._commandManager.unSubscribe(this.groupChannelName);\n        messageManager.unregisterGame(this.serviceId);\n        this._outGame = true;\n    }\n\n    networkCallbackJP(callbackJP) {\n        if (this.useShortParam) {\n            this._eventManager.registerEvent('jud', ({data}) => {\n                callbackJP(data);\n            });\n        }\n        else {\n            this._eventManager.registerEvent('jackpot-updated', ({data}) => {\n                callbackJP(data);\n            });\n        }\n    }\n\n    gameOnPause() {\n        logger.debug('gameOnPause');\n    }\n\n    gameOnResume() {\n        logger.debug('gameOnResume');\n        if (this.gameCommandId) {\n            logger.debug('_resumeApp has this.gameCommandId: %s', this.gameCommandId);\n        }\n    }\n\n    _subscribeJPChannel(groupChannelName) {\n        if (groupChannelName) {\n            this.groupChannelName = groupChannelName;\n            this._commandManager.subscribe(this.groupChannelName);\n        }\n    }\n\n    _verifyExpectedEvent(eventData) {\n        let result = false;\n        const convertEvent = ['f', 'n', 'nor', 'fre', 'frO', 'bon', 'b', 'gam', 'lig', 'pow', 'adv', 'o', 'r'];\n        const index = convertEvent.indexOf(eventData.event);\n        if (this.useShortParam) {\n            if (index >= 0)\n                eventData.event = 'state-updated';\n            eventData = mapObjectKey(eventData, keyMapConfig);\n        }\n        if (eventData.event === 'client-join-game-result') {\n            let data = eventData.data;\n            result = data.commandId === this.latestExecuteCommandResult && this.gameCommandId === data.commandId;\n        }\n        else if (eventData.event === 'client-join-trial-game-result') {\n            let data = eventData.data;\n            result = data.commandId === this.latestExecuteCommandResult && this.gameCommandId === data.commandId;\n        }\n        else if (eventData.event === 'state-updated' && this._state === GameStateManager.STATE_NORMAL) {\n            let data = null;\n            if (this.useShortParam) {\n                data = eventData.data;\n            } else {\n                data = eventData.data[this.serviceId].data;\n            }\n            // force get latested state\n            if (this.isForceGetLatestedState) {\n                return false;\n            }\n            result = data.commandId === this.latestExecuteCommandResult && this.gameCommandId === data.commandId;\n        }\n        else if (eventData.event === 'state-pushed' && this._state === GameStateManager.STATE_PANIC) {\n            let data = eventData.data;\n            // check last event map with this.gameCommandId\n            if (this.useShortParam) {\n                result = (data.gameCommandId === this.gameCommandId);\n            }\n            else {\n                if (data && data.lastEvent) {\n                    result = data.commandId === this.latestExecuteCommandResult && data.lastEvent.commandId === this.gameCommandId;\n                }\n                else {\n                    result = false;\n                }\n            }\n        } else if  (eventData.event === 'error-pushed' && this._state === GameStateManager.STATE_NORMAL && eventData.data && eventData.data[0]) {\n            let data = eventData.data;\n            result = data[0].commandId === this.latestExecuteCommandResult;\n            if (this.isForceGetLatestedState) {\n                return false;\n            }\n        }\n\n        if (result == true && typeof this.gameData.onNetworkResume === 'function') {\n            this.gameData.onNetworkResume();\n        }\n\n        return result;\n    }\n\n    _checkMismatchData(eventData)\n    {\n        let isMismatch = false;\n        //if (eventData.event === 'state-updated')\n        {\n            if (!this.currentPSData) //resume case\n            {\n                this.currentPSData = {};\n                this.currentPSData.id = eventData.id;\n                this.currentPSData.version = eventData.version;\n                this.requestingNewPS = false;\n                return;\n            }\n\n            if (this.requestingNewPS)\n            {\n                if (eventData.version > 1) {\n                    cc.log(\"Mismatch data new PS, event version is \" + eventData.version);\n                    isMismatch = true;\n                }\n                else\n                {\n                    this.currentPSData = {id: eventData.id, version: eventData.version};\n                    cc.log('Pass new PS request');\n                    this.requestingNewPS = false;\n                }\n            }\n            else\n            {\n                if (eventData.id == this.currentPSData.id)\n                {\n                    if (eventData.version == (this.currentPSData.version + 1))\n                        this.currentPSData.version = eventData.version;\n                    else {\n                        cc.log(\"Mismatch data, event version is \" + eventData.version);\n                        isMismatch = true;\n                    }\n                }\n            }\n        }\n        if (isMismatch)\n        {\n            cc.log('Mismatch');\n            this._gotoDieMode(EventManager.MISMATCH_DATA_VERSION);\n        }\n    }\n\n    _gotoNormalMode() {\n        if (this._outGame) return;\n        cc.log('NORMAL MODE');\n        this._eventManager.removeWaitingQueue();\n        this._commandManager.clearRemainingCommand();\n        if (typeof this.gameData.onNetworkResume === 'function')\n            this.gameData.onNetworkResume();\n    }\n\n    _gotoPanicMode() {\n        if (this._outGame) return;\n        cc.log('PANIC MODE');\n        this._eventManager.removeWaitingQueue();\n        this._commandManager.clearRemainingCommand();\n        const playerUserId = this._playerInfoStateManager.getUserId();\n        this._triggerGetLatestStatePrivate({stateType: this.serviceId, serviceId: this.serviceId, objectId: playerUserId});\n    }\n\n    _gotoDieMode(reason, sendGameMessage = true) {\n        if (this._outGame) return;\n        cc.log('DIE MODE');\n        if (sendGameMessage && typeof this.gameData.onNetworkFailed === 'function') {\n            this.gameData.onNetworkFailed(reason);\n        }\n        this._cleanUp();\n    }\n\n    _cleanUp() {\n        if (this._outGame) return;\n        this._outGame = true;\n        this.cleanUpForGame();\n        messageManager.unregisterGame(this.serviceId);\n    }\n\n    _timeoutExpectedEventHandler(event) {\n        const eventRecover = SLOT_STRATEGY[event].recoverEvent;\n        this._state = eventRecover;\n        if (eventRecover === GameStateManager.STATE_PANIC) {\n            this._gotoPanicMode();\n        } else if (eventRecover === GameStateManager.STATE_DIE) {\n            this._gotoDieMode(EventManager.EXPECTED_EVENT_TIMEOUT, (event === 'client-join-game-request' || event === 'jg'));\n        }\n    }\n\n    _clientSendRequest({event, data = {}}) {\n\n        const version = this.serverVersion;\n        let strategy = lodash.pick(SLOT_STRATEGY[event], ['resendCount', 'shouldWaitForACK', 'canBeDuplicated']);\n        data = Object.assign(data, {token: this.token, serviceId: this.serviceId});\n        if (this.useShortParam) {\n            data = mapObjectKey(data, keyMapConfig);\n            event = NEW_EVENT && NEW_EVENT[event] ? NEW_EVENT[event] : event;\n        }\n\n        const commandId = this._commandManager.executeCommand({event, data, version}, strategy, this.useShortParam, !this.useShortParam);\n\n        if (commandId === CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT) {\n            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT');\n        } else if (commandId === CommandManager.COMMAND_FAILED_DUPLICATE) {\n            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_DUPLICATE');\n        } else {\n            this.latestExecuteCommandResult = commandId;\n\n            this._waitForNetwork(event);\n\n        }\n    }\n\n    _waitForEvent(event) {\n        let waitForEventId = this._eventManager.waitForEvent(\n            SLOT_STRATEGY[event].timeWaitForEvent,\n            this._verifyExpectedEvent.bind(this),\n            this._timeoutExpectedEventHandler.bind(this, event)\n        );\n\n        if (this.gameCommandId) {\n            this.waitForEventData = {\n                waitForEventId,\n                event\n            };\n        }\n    }\n\n    _waitForNetwork(event) {\n        this._eventManager.waitForEvent(\n            SLOT_STRATEGY[event].timeWaitForEvent,\n            this._verifyExpectedEvent.bind(this),\n            () => {\n                if ((event === 'jg' || event === 'client-join-game-request') && this.hasJoinGameAck) {\n                    return;\n                }\n                if (typeof this.gameData.onNetworkDisconnect === 'function')\n                    this.gameData.onNetworkDisconnect();\n            }\n        );\n    }\n\n    _setUpEventListener() {\n        let code = '';\n        const loadConfigAsync = require('loadConfigAsync');\n        const {LOGIN_IFRAME, URL_CODE} = loadConfigAsync.getConfig();\n        let env = 1;\n        if (LOGIN_IFRAME) {\n            const {getUrlParam} = require('gameCommonUtils');\n            code = getUrlParam(URL_CODE);\n            env = 2;\n        }\n        this.hasJoinGameAck = false;\n        this._clientSendRequest({\n            event: 'client-join-game-request',\n            data: {code, env}\n        });\n        this._bindingEvents();\n    }\n\n    _bindingEvents() {\n        let self = this;\n        this._fireEventUserLogOutFunc = () => {\n            self.isLogOut = true;\n            if (typeof self.gameData.userLogout === 'function') {\n                self.gameData.userLogout();\n            }\n            self._cleanUp();\n        };\n        this._playerInfoStateManager.registerEvent('user-logged-out', this._fireEventUserLogOutFunc);\n        this._eventManager.registerEvent('client-join-game-result', this._fireEventJoinGameResult.bind(this));\n        this._eventManager.registerEvent('join-game-denied', this._fireEventJoinGameDenied.bind(this));\n        this._eventManager.registerEvent('state-updated', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('nor', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('fre', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('n', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('f', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('r', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('o', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('frO', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('bon', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('b', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('gam', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('lig', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('pow', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('adv', this._fireEventStateUpdated.bind(this));\n        this._eventManager.registerEvent('state-pushed', this._fireEventStatePushed.bind(this));\n        this._eventManager.registerEvent('error-pushed', this._fireEventErrorPushed.bind(this));\n        this._eventManager.registerEvent('request-denied', this._fireEventRequestDenied.bind(this));\n        if (this.useShortParam) {\n            this._eventManager.registerEvent('jackpot-win', this._fireEventNoticeJackpotWin.bind(this));\n            this._eventManager.registerEvent('JPA', this._fireEventJackpotWin.bind(this));\n        } else {\n            this._eventManager.registerEvent('jackpot-win', this._fireEventJackpotWin.bind(this));\n            this._eventManager.registerEvent('JPA', this._fireEventNoticeUserWinJackpot.bind(this));\n        }\n        this._commandManager.registerEvent(CommandManager.COMMAND_SEND_SUCCESSFULLY, this._handleCommandSendSuccessfully.bind(this));\n    }\n\n    _handleCommandSendSuccessfully( commandPayload ) {\n        let commandId = commandPayload.data.commandId || commandPayload.data.cId;\n        let event = commandPayload.event;\n        if (event !== 'glt') {\n            this.gameCommandId = commandId;\n        }\n        if (event === 'jg' || event === 'client-join-game-request') {\n            this.hasJoinGameAck = true;\n        }\n        if (commandId === this.latestExecuteCommandResult) {\n            this._saveNewCommandId(commandId);\n            this._waitForEvent(event);\n        }\n    }\n\n    _saveNewCommandId(commandId){\n        if(this._lastCommandIds.length >= 10){\n            this._lastCommandIds.shift();\n        }\n        this._lastCommandIds.push(commandId);\n    }\n\n    _handleNetworkStatusEvent() {\n        this._eventManager.registerEvent(EventManager.CAN_NOT_CONNECT, () =>{\n            this._state = GameStateManager.STATE_DIE;\n            this._gotoDieMode(EventManager.CAN_NOT_CONNECT);\n        });\n        this._eventManager.registerEvent(EventManager.CONNECTED, () =>{\n\n        });\n    }\n\n    _fireEventErrorPushed({data}) {\n        if (this.isForceGetLatestedState) return;\n        if (this.useShortParam) {\n            data = mapObjectKey(data, keyMapConfig);\n        }\n        if (lodash.isArray(data) && data[0]) {\n            const errorCode = data[0].code;\n            const metaData = data[0].metaData;\n            //wallet error\n            if (errorCode[0] == 'W' || errorCode == '0000' || errorCode == '0001') {\n                this.gameData.onNetworkError(errorCode, metaData);\n                this._state = GameStateManager.STATE_NORMAL;\n                if (this.timeoutLastedState)\n                {\n                    clearTimeout(this.timeoutLastedState);\n                }\n                this._gotoNormalMode();\n            }\n            else if (errorCode == '0030' && this._state == GameStateManager.STATE_PANIC) { //server is inprogress\n                this.gltCounting = 0;\n            }\n            else {\n                this._state = GameStateManager.STATE_NORMAL;\n                this.gameCommandId = ''; this.waitForEventData = {};\n\n                if (typeof this.gameData.onNetworkError === 'function') {\n                    this.gameData.onNetworkError(errorCode, metaData);\n                    if (this.timeoutLastedState)\n                    {\n                        clearTimeout(this.timeoutLastedState);\n                    }\n                }\n            }\n        }\n    }\n\n    _fireEventJoinGameResult({data}) {\n        if (this.useShortParam) {\n            data = mapObjectKey(data, keyMapConfig);\n        }\n        this._state = GameStateManager.STATE_NORMAL;\n        if (typeof this.gameData.joinGameSuccess === 'function' && data.commandId === this.gameCommandId) {\n            const playerUserId = this._playerInfoStateManager.getUserId();\n            const {extendData} = data;\n\n            this._subscribeJPChannel(data.groupChannelName);\n            let dataJoinGame = lodash.cloneDeep(data);\n            if (dataJoinGame[playerUserId] && dataJoinGame[playerUserId].isFinished === false) {\n                dataJoinGame.dataResume = dataJoinGame[playerUserId];\n                this.currentPSData = {};\n                this.currentPSData.id = dataJoinGame.dataResume.id;\n                this.currentPSData.version = dataJoinGame.dataResume.version;\n                this.requestingNewPS = false;\n            }\n\n\n\n            if (this.useShortParam) {\n                if (lodash.isEmpty(extendData.metaDataUser) || !extendData.metaDataUser) {\n                    dataJoinGame.extendData.metaDataUser = {};\n                    dataJoinGame.extendData.metaDataUser.currentWalletAmount = this.getCurrentWallet() || 0;\n                }\n                if (!lodash.isEmpty(extendData.metaDataPromotion) && !extendData.metaDataPromotion.status) {\n                    dataJoinGame.metaDataPromotion = extendData.metaDataPromotion;\n                }\n            } else {\n                if (!lodash.isEmpty(extendData.metaDataPromotion) && extendData.metaDataPromotion.status === 0) {\n                    dataJoinGame.metaDataPromotion = extendData.metaDataPromotion;\n                }\n            }\n\n            // if (CC_DEV) {\n            //     dataJoinGame.metaDataPromotion = {\n            //         betId: '43',\n            //         serviceId: '9990',\n            //         promotionRemain: 3,\n            //         promotionTotal: 3,\n            //         promotionCode: '1234'\n            //     };\n            // };\n\n            delete dataJoinGame[playerUserId];\n            this.gameCommandId = ''; this.waitForEventData = {};\n            this.gameData.joinGameSuccess(dataJoinGame);\n        }\n    }\n\n    _fireEventJoinGameDenied() {\n        this.outGame();\n        this.gameData.onJoinGameDenied();\n    }\n\n    _fireEventRequestDenied() {\n        this.outGame();\n        this.gameData.onRequestDenied();\n    }\n\n    _fireEventStateUpdated({data}) {\n        if (this.useShortParam) {\n            data = mapObjectKey(data, keyMapConfig);\n        }\n        if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.stateUpdate === 'function') {\n            let commandId = '';\n            if (this.useShortParam) {\n                commandId = data.commandId;\n            }\n            else {\n                commandId = data[this.serviceId].data.commandId;\n            }\n            // force get latest state\n            if (this.isForceGetLatestedState) return;\n            if (this.gameCommandId === commandId) {\n                this.lastSuccessCommandId = this.gameCommandId;\n                this.gameCommandId = ''; this.waitForEventData = {};\n                this.latestExecuteCommandResult = '';\n                let dataRes = null;\n                if (this.useShortParam) {\n                    dataRes = data;\n                } else {\n                    dataRes = data[this.serviceId].data;\n                }\n                this.gameData.stateUpdate(dataRes);\n                if (!this._trialMode) this._checkMismatchData(dataRes);\n            }\n        }\n    }\n\n    _fireEventNoticeJackpotWin({ data }) {\n        if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onNoticeJackpotWin === 'function') {\n            const commandId = data.jpInfo[0].cmdId || data.jpInfo[0].cId;\n            const isMe = this._lastCommandIds.includes(commandId);\n            this.gameData.onNoticeJackpotWin(data, isMe);\n        }\n    }\n\n    _fireEventJackpotWin({data}){\n        if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWin === 'function' ){\n            const commandId = data.jpInfo[0].cmdId || data.jpInfo[0].cId;\n            const isMe = this._lastCommandIds.includes(commandId);\n            this.gameData.onJackpotWin(data, isMe);\n        }\n    }\n\n    _fireEventNoticeUserWinJackpot({data}){\n        if (this._state === GameStateManager.STATE_NORMAL && typeof this.gameData.onJackpotWin === 'function' ){\n            const commandId = data.jpInfo[0].cmdId || data.jpInfo[0].cId;\n            const isMe = this._lastCommandIds.includes(commandId);\n            this.gameData.onNoticeUserWinJackpot(data, isMe);\n        }\n    }\n\n    _fireEventStatePushed({data}) {\n        let gameCommandId = null;\n        if (this.useShortParam) {\n            data = mapObjectKey(data, keyMapConfig);\n            gameCommandId = data.gameCommandId;\n        }\n        else {\n            if (data && data.lastEvent) {\n                gameCommandId = data.lastEvent.commandId;\n            } else if (data && data.error && data.error[0]) {\n                gameCommandId = data.error[0].commandId;\n            }\n        }\n        if (this._state === GameStateManager.STATE_PANIC && typeof this.gameData.stateUpdate === 'function' && gameCommandId) {\n\n            if (gameCommandId === this.gameCommandId)\n            {\n                this.gltCounting = 0;\n                this.lastSuccessCommandId = this.gameCommandId;\n                this._state = GameStateManager.STATE_NORMAL;\n                this.gameCommandId = ''; this.waitForEventData = {};\n                this._gotoNormalMode();\n                const { error } = data;\n                if (lodash.isArray(error) && error[0] && typeof this.gameData.onNetworkError === 'function') {\n                    const errorCode = error[0].code;\n                    const metaData = error[0].metaData;\n                    this.gameData.onNetworkError(errorCode, metaData);\n                } else {\n                    this.gameData.stateUpdate(data);\n                    this.currentPSData = {};\n                    this.currentPSData.id = data.id;\n                    this.currentPSData.version = data.version;\n                }\n                this.requestingNewPS = false;\n                if (this.timeoutLastedState) {\n                    clearTimeout(this.timeoutLastedState);\n                }\n            }\n            else if (this.gltCounting < 10)\n            {\n                this.gltCounting += 1;\n                this.timeoutLastedState = setTimeout( () => {\n                    this._gotoPanicMode();\n                }, 2000);\n            }\n            else {\n                let commandId = (this.useShortParam) ? data.commandId : data.lastEvent.commandId;\n                cc.log(\"Mismatch command \" + \" lasted \" + this.lastSuccessCommandId + \" current \" + commandId);\n                this._gotoDieMode(EventManager.MISMATCH_COMMAND_ID);\n            }\n        }\n    }\n\n    onForceGetLatestedState(isOn = false) {\n        this.isForceGetLatestedState = isOn;\n        cc.log('To click force get latested state: ', isOn);\n    }\n}\n\nGameStateManager.STATE_NORMAL = 'NORMAL';\nGameStateManager.STATE_PANIC = 'PANIC';\nGameStateManager.STATE_DIE = 'DIE';\n\n\nmodule.exports = GameStateManager;\n"]}