{"version":3,"sources":["../../../../../../assets/cc-common/cc-slot-base-test/ExtendScripts/assets/cc-common/cc-slot-base-test/ExtendScripts/ExtendSlotTable.js"],"names":["cc","Class","extends","require","showAnimIntro","isShowAnimIntro","matrix","getBeautyMatrixRandom","col","tableFormat","length","reel","node","reels","row","symbol","showSymbols","symbolName","changeToSymbol","emit","hideAnimIntro","checkStopSpinningCallback","callback","setUpPaylineAtReel","_super","playSession","gSlotDataStore","payLines","stopSpinningCallbackCount"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASC,QAAQ,aAAR,CADJ;;AAGLC,iBAHK,2BAGW;AACZ,aAAKC,eAAL,GAAuB,IAAvB;AACA,YAAIC,SAAS,KAAKC,qBAAL,EAAb;AACA,aAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAM,KAAKC,WAAL,CAAiBC,MAAzC,EAAiD,EAAEF,GAAnD,EAAwD;AACpD,gBAAMG,OAAO,KAAKC,IAAL,CAAUC,KAAV,CAAgBL,GAAhB,CAAb;AACA,iBAAK,IAAIM,MAAM,CAAf,EAAkBA,MAAM,KAAKL,WAAL,CAAiBD,GAAjB,CAAxB,EAA+C,EAAEM,GAAjD,EAAsD;AAClD,oBAAIH,IAAJ,EAAU;AACN,wBAAMI,SAASJ,KAAKK,WAAL,CAAiBF,GAAjB,CAAf;AACA,wBAAIC,MAAJ,EAAY;AACR,4BAAIE,aAAaX,OAAOE,GAAP,EAAYM,GAAZ,CAAjB;AACAC,+BAAOG,cAAP,CAAsBD,UAAtB;AACH;AACJ;AACJ;AACJ;AACD,aAAKL,IAAL,CAAUO,IAAV,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC;AACA,aAAKP,IAAL,CAAUO,IAAV,CAAe,oBAAf,EAAqCb,MAArC;AACH,KApBI;AAsBLc,iBAtBK,2BAsBW;AACZ,YAAI,CAAC,KAAKf,eAAV,EAA2B;AAC3B,aAAKA,eAAL,GAAuB,KAAvB;AACA,aAAKO,IAAL,CAAUO,IAAV,CAAe,gBAAf;AACH,KA1BI;AA4BLE,6BA5BK,qCA4BqBf,MA5BrB,EA4B6BgB,QA5B7B,EA4BuC;AACxC,aAAKC,kBAAL;AACA,aAAKC,MAAL,CAAYlB,MAAZ,EAAoBgB,QAApB;AACH,KA/BI;AAiCLC,sBAjCK,gCAiCgB;AAAA,YACTE,WADS,GACO,KAAKb,IAAL,CAAUc,cADjB,CACTD,WADS;;AAEjB,YAAIA,WAAJ,EAAiB;AAAA,gBACLE,QADK,GACQF,WADR,CACLE,QADK;;AAEb,iBAAKf,IAAL,CAAUO,IAAV,CAAe,wBAAf,EAAyC,KAAKS,yBAA9C,EAAyED,QAAzE;AACH;AACJ;AAvCI,CAAT","file":"ExtendSlotTable.js","sourceRoot":"../../../../../../assets/cc-common/cc-slot-base-test/ExtendScripts","sourcesContent":["cc.Class({\n    extends: require('SlotTablev2'),\n\n    showAnimIntro() {\n        this.isShowAnimIntro = true;\n        let matrix = this.getBeautyMatrixRandom();\n        for (let col = 0; col < this.tableFormat.length; ++col) {\n            const reel = this.node.reels[col];\n            for (let row = 0; row < this.tableFormat[col]; ++row) {\n                if (reel) {\n                    const symbol = reel.showSymbols[row];\n                    if (symbol) {\n                        let symbolName = matrix[col][row];\n                        symbol.changeToSymbol(symbolName);\n                    }\n                }\n            }\n        }\n        this.node.emit(\"SETUP_PAYLINES\", null, null);\n        this.node.emit(\"SHOW_INTRO_SYMBOLS\", matrix);\n    },\n\n    hideAnimIntro() {\n        if (!this.isShowAnimIntro) return;\n        this.isShowAnimIntro = false;\n        this.node.emit('CLEAR_PAYLINES');\n    },\n\n    checkStopSpinningCallback(matrix, callback) {\n        this.setUpPaylineAtReel();\n        this._super(matrix, callback);\n    },\n\n    setUpPaylineAtReel() {\n        const { playSession } = this.node.gSlotDataStore;\n        if (playSession) {\n            const { payLines } = playSession;\n            this.node.emit('SET_UP_PAYLINE_AT_REEL', this.stopSpinningCallbackCount, payLines);\n        }\n    },\n});"]}