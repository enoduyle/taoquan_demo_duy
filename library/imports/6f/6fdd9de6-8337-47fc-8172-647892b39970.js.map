{"version":3,"sources":["../../../../../../assets/cc-common/cc-slotbase-v2/gui/assets/cc-common/cc-slotbase-v2/gui/Jackpot.js"],"names":["require","convertObjectToArrayKey","findKeyByValue","formatMoney","cc","Class","extends","Component","properties","mini","Node","minor","major","grand","jackpotIconAnims","default","type","sp","Skeleton","override","jackpotIcons","jackpotParticles","Animation","jackpotMultiply","maxMultiply","onLoad","node","on","renderJackpotBet","callbackJackpotUpdate","register","pauseRenderJP","resumeRenderJP","updateValueJP","playJackpotExplosion","stopJackpotExplosion","noticeJackpotWin","indexJp","start","initData","inited","isPausedJP","initJackpotData","currentJackpotData","jackpotData","currentJackpotLevel","newJackpotLevel","JP_Prefix","config","JP_PREFIX_EVENT","JP_Steps","STEPS","JP_Names","JP_NAMES","gameId","data","gameStateManager","networkCallbackJP","jackpotUpdate","bind","jackpot","Object","keys","map","jpName","name","replace","levelData","toString","split","length","Number","renderJackpot","time","gSlotDataStore","slotBetDataStore","currentBetData","steps","stepIndex","playAnimMultiply","renderJP","value","transformJPName","jpLevel","isDiffJPMultiply","isDiffJPValue","onUpdateValue","assign","emit","stopAnimMultiply","allowRunDown","jackpotID","currencyPrefix","_getCurrencyPrefix","includes","currencyCode","defaultCurrency","DEFAULT_CURRENCY","_getIndexJpByType","jpType","_getLabelByType","toLowerCase","isValidJackpotData","jpId","serverCurrency","c","prefixLength","jpIndex","charAt","betIndex","TIME_SHOW_JACKPOT_EXPLOSION","_callbackPauseJackpotWin","scheduleOnce","callback","amt","dn","lv","slice","jpAmount","_callbackNotiJp","showAnimNoticeWinJP","showAnimWinJp","unschedule","_callbackHideJpWin","_playAnimWinJp","spine","labelNode","icon","particle","_index","warn","active","_animationQueue","setAnimation","addAnimation","initScale","scaleX","getComponent","Label","string","dur","repeatTime","Math","floor","actionZoom","stopAction","repeat","sequence","scaleTo","runAction","play"],"mappings":"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","file":"Jackpot.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/gui","sourcesContent":["\n\nconst { convertObjectToArrayKey, findKeyByValue, formatMoney } = require('utils');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        mini: cc.Node,\n        minor: cc.Node,\n        major: cc.Node,\n        grand: cc.Node,\n        jackpotIconAnims: {\n            default: [],\n            type: sp.Skeleton,\n            override: true\n        },\n        jackpotIcons: {\n            default: [],\n            type: cc.Node,\n            override: true\n        },\n        jackpotParticles: {\n            default: [],\n            type: cc.Animation,\n            override: true\n        },\n        jackpotMultiply: cc.Node,\n        maxMultiply: 6,\n    },\n    onLoad() {\n        this.node.on(\"CHANGE_JACKPOT\", this.renderJackpotBet, this);\n        this.node.on(\"UPDATE_JACKPOT\", this.callbackJackpotUpdate, this);\n        this.node.on(\"REGISTER_JACKPOT\", this.register, this);\n        this.node.on(\"PAUSE_JACKPOT\", this.pauseRenderJP, this);\n        this.node.on(\"RESUME_JACKPOT\", this.resumeRenderJP, this);\n        this.node.on(\"UPDATE_VALUE_JACKPOT\", this.updateValueJP, this);\n        this.node.on(\"PLAY_JACKPOT_EXPLOSION\", this.playJackpotExplosion, this);\n        this.node.on(\"STOP_JACKPOT_EXPLOSION\", this.stopJackpotExplosion, this);\n        this.node.on(\"NOTICE_JACKPOT_WIN\", this.noticeJackpotWin, this);\n        this.indexJp = {\n            \"GRAND\": 0,\n            \"MAJOR\": 1,\n            \"MINOR\": 2,\n            \"MINI\": 3,\n        };\n    },\n    start() {\n        this.initData();\n    },\n\n    initData() {\n        if (!this.inited) {\n            this.isPausedJP = false;\n            this.initJackpotData = {};\n            this.currentJackpotData = {};\n            this.jackpotData = {};\n            this.currentJackpotLevel = {};\n            this.newJackpotLevel = {};\n            this.JP_Prefix = this.node.config.JP_PREFIX_EVENT;\n            this.JP_Steps = convertObjectToArrayKey(this.node.config.STEPS);\n            this.JP_Names = this.node.config.JP_NAMES;\n            this.inited = true;\n        }\n    },\n\n    register(gameId, data, gameStateManager) {\n        this.gameId = gameId;\n        this.data = data;\n        this.initData();\n        gameStateManager.networkCallbackJP(\n            this.jackpotUpdate.bind(this),\n        );\n        if (data.jackpot) {\n            Object.keys(data.jackpot).map((jpName) => {\n                let name = jpName.replace(this.JP_Prefix, '');\n                this.callbackJackpotUpdate(name, data.jackpot[jpName]);\n                if (data.jackpot[jpName]) {\n                    const levelData = data.jackpot[jpName].toString().split('_');\n                    this.currentJackpotLevel[name] = levelData.length > 1 ? Number(levelData[1]) : 1;\n                    this.currentJackpotData[name] = Number(data.jackpot[jpName]);\n                    this.initJackpotData[jpName] = Number(data.jackpot[jpName]);\n                }\n            });\n        }\n    },\n\n    jackpotUpdate(data) {\n        if (data) {\n            Object.keys(data).map((jpName) => {\n                let name = jpName.replace(this.JP_Prefix, '');\n                this.callbackJackpotUpdate(name, data[jpName]);\n            });\n        }\n    },\n\n    renderJackpotBet() {\n        this.renderJackpot(300);\n    },\n\n    renderJackpot(time = 3000) {\n        if (this.isPausedJP)\n            return;\n        const { currentBetData, steps } = this.node.gSlotDataStore.slotBetDataStore.data;\n        const stepIndex = findKeyByValue(steps, currentBetData).toString();\n\n        // Check & Play anim jackpot multiply\n        this.playAnimMultiply(stepIndex, time);\n\n        this.renderJP({\n            node: this.grand,\n            value: this.jackpotData[stepIndex + this.transformJPName(this.JP_Names[0])],\n            time,\n            stepIndex\n        });\n\n        if (this.JP_Names.length > 1) {\n            this.renderJP({\n                node: this.mini,\n                value: this.jackpotData[stepIndex + this.transformJPName(this.JP_Names[1])],\n                time,\n                stepIndex\n            });\n            this.renderJP({\n                node: this.minor,\n                value: this.jackpotData[stepIndex + this.transformJPName(this.JP_Names[2])],\n                time,\n                stepIndex\n            });\n            this.renderJP({\n                node: this.major,\n                value: this.jackpotData[stepIndex + this.transformJPName(this.JP_Names[3])],\n                time,\n                stepIndex\n            });\n        }\n    },\n\n    playAnimMultiply(stepIndex, time) {\n        if (this.jackpotMultiply) {\n            const jpLevel = stepIndex + this.transformJPName(this.JP_Names[0]);\n            if (jpLevel && this.newJackpotLevel[jpLevel] && this.newJackpotLevel[jpLevel] > 1 && this.newJackpotLevel[jpLevel] <= this.maxMultiply) {\n                const isDiffJPMultiply = this.currentJackpotLevel[jpLevel] && this.newJackpotLevel[jpLevel]\n                    && this.currentJackpotLevel[jpLevel] !== this.newJackpotLevel[jpLevel]\n                    && this.newJackpotLevel[jpLevel] > 1;\n\n                const isDiffJPValue = this.currentJackpotLevel[jpLevel] && this.newJackpotLevel[jpLevel]\n                    && this.currentJackpotLevel[jpLevel] == this.newJackpotLevel[jpLevel]\n                    && this.newJackpotLevel[jpLevel] > 1\n                    && this.currentJackpotData[jpLevel] && this.jackpotData[jpLevel]\n                    && this.currentJackpotData[jpLevel] > this.jackpotData[jpLevel];\n\n                if (isDiffJPMultiply || isDiffJPValue) {\n                    this.grand.onUpdateValue(this.jackpotData[jpLevel] / this.newJackpotLevel[jpLevel], time, false);\n                    this.currentJackpotLevel = Object.assign({}, this.newJackpotLevel);\n                    this.currentJackpotData = Object.assign({}, this.jackpotData);\n                }\n                this.jackpotMultiply.emit('PLAY_ANIM_MULTIPLY', this.newJackpotLevel[jpLevel], time);\n            } else {\n                this.stopAnimMultiply();\n            }\n        }\n    },\n\n    stopAnimMultiply() {\n        if (this.jackpotMultiply) this.jackpotMultiply.emit('STOP_ANIM_MULTIPLY');\n    },\n\n    transformJPName(name) {\n        if (name && name.length > 0) {\n            return \"_\" + name;\n        }\n        return \"\";\n    },\n    \n    renderJP({ node, value, time = 3000, stepIndex }) {\n        if (node) {\n            let allowRunDown = (stepIndex != node.stepIndex);\n            node.onUpdateValue(value, time, allowRunDown);\n            node.stepIndex = stepIndex;\n        }\n    },\n    pauseRenderJP() {\n        this.isPausedJP = true;\n    },\n    resumeRenderJP() {\n        this.isPausedJP = false;\n        this.renderJackpot();\n    },\n    callbackJackpotUpdate(jackpotID, data) {\n        if (jackpotID) {\n            const currencyPrefix = this._getCurrencyPrefix();\n            if (currencyPrefix && !jackpotID.includes(currencyPrefix)) return;\n            jackpotID = jackpotID.toString().replace(currencyPrefix, '');\n            this.jackpotData[jackpotID] = Number(data);\n            const levelData = data.toString().split('_');\n            this.newJackpotLevel[jackpotID] = levelData.length > 1 ? Number(levelData[1]) : 1;\n        }\n        this.renderJackpot();\n    },\n\n    _getCurrencyPrefix() {\n        if (!this.node.gSlotDataStore || !this.node.gSlotDataStore.currencyCode) return '';\n        const currencyCode = this.node.gSlotDataStore.currencyCode;\n        let defaultCurrency = this.node.config.DEFAULT_CURRENCY || 'VND';\n        const currencyPrefix = (!currencyCode || defaultCurrency === currencyCode) ? '' : `${currencyCode}_`;\n        return currencyPrefix;\n    },\n\n    updateValueJP(value, type = 0) {\n        const { steps, currentBetData } = this.node.gSlotDataStore.slotBetDataStore.data;\n        const stepIndex = findKeyByValue(steps, currentBetData).toString();\n        let node;\n        switch (type) {\n            case 0:\n                node = this.grand;\n                break;\n            case 1:\n                node = this.major;\n                break;\n            case 3:\n                node = this.minor;\n                break;\n            case 4:\n                node = this.mini;\n                break;\n            default:\n                node = this.grand;\n                break;\n        }\n        this.renderJP({\n            node,\n            value: value,\n            time: 300,\n            stepIndex\n        });\n    },\n    _getIndexJpByType(jpType) {\n        return this.indexJp[jpType];\n    },\n    _getLabelByType(jpType) {\n        let jpName = jpType.toLowerCase();\n        if (this[jpName]) {\n            return this[jpName];\n        }\n        return this.grand;\n    },\n\n    isValidJackpotData(data) {\n        let { jpId, c: serverCurrency } = data[0];\n        if ((serverCurrency && serverCurrency != this.node.gSlotDataStore.currencyCode) || !this.initJackpotData[jpId]) return false;\n        return true;\n    },\n\n    noticeJackpotWin(data) {\n        if (!this.isValidJackpotData(data)) return;\n        let { jpId } = data[0];\n        let prefixLength = this.node.config.JP_PREFIX_EVENT.length;\n        let jpIndex = jpId.charAt(prefixLength);\n        // let jpType = jpId.slice(prefixLength + 2);\n        const { steps, currentBetData } = this.node.gSlotDataStore.slotBetDataStore.data;\n        const betIndex = findKeyByValue(steps, currentBetData).toString();\n\n        if (jpIndex === betIndex) {\n            this.pauseRenderJP();\n            let time = this.node.config.TIME_SHOW_JACKPOT_EXPLOSION || 3;\n            this._callbackPauseJackpotWin = () => {\n                this._callbackPauseJackpotWin = null;\n                this.resumeRenderJP();\n            };\n            this.scheduleOnce(this._callbackPauseJackpotWin, time);\n        }\n    },\n    playJackpotExplosion(data, callback) {\n        if (!this.isValidJackpotData(data)) return;\n        let { jpId, amt, dn, lv} = data[0];\n        let prefixLength = this.node.config.JP_PREFIX_EVENT.length;\n        let jpIndex = jpId.charAt(prefixLength);\n        let jpType = jpId.slice(prefixLength + 2);\n        let jpAmount = 1 * amt;\n        const { steps, currentBetData } = this.node.gSlotDataStore.slotBetDataStore.data;\n        const betIndex = findKeyByValue(steps, currentBetData).toString();\n\n        if (jpIndex === betIndex) {\n            this._callbackNotiJp = callback;\n            this.updateValueJP(jpAmount, 0);\n            this.pauseRenderJP();\n            if (lv && lv >= 1) {\n                const jpLevel = jpIndex + this.transformJPName(jpType);\n                this.newJackpotLevel[jpLevel] = 1;\n                this.currentJackpotData[jpLevel] = Number(jpAmount);\n                this.showAnimNoticeWinJP(jpAmount, dn, lv, jpType);\n            } else {\n                this.showAnimWinJp(jpType, jpAmount);\n            }\n            if (this._callbackPauseJackpotWin) {\n                this._callbackPauseJackpotWin();\n                this.unschedule(this._callbackPauseJackpotWin);\n            }\n        }\n    },\n    showAnimNoticeWinJP(jpAmount, dn = '', lv = 1, jpType = '') {\n        if (this.jackpotMultiply) this.jackpotMultiply.emit('SHOW_ANIM_NOTICE_WIN_JP', jpAmount, dn, lv, jpType);\n        let time = this.node.config.TIME_SHOW_JACKPOT_EXPLOSION || 3;\n        this._callbackHideJpWin = () => {\n            this._callbackHideJpWin = null;\n            this._callbackNotiJp && this._callbackNotiJp();\n            this._callbackNotiJp = null;\n\n            if (this.jackpotMultiply) this.jackpotMultiply.emit('RESET_ANIM_NOTICE');\n            this.resumeRenderJP();\n        };\n        this.scheduleOnce(this._callbackHideJpWin, time);\n    },\n    showAnimWinJp(jpType, jpAmount) {\n        this._playAnimWinJp(jpType, jpAmount);\n    },\n    _playAnimWinJp(jpType, jpAmount) {\n        let spine, labelNode, icon, particle;\n        let time = this.node.config.TIME_SHOW_JACKPOT_EXPLOSION || 3;\n\n        let _index = this._getIndexJpByType(jpType);\n        spine = this.jackpotIconAnims[_index];\n        icon = this.jackpotIcons[_index];\n        particle = this.jackpotParticles[_index];\n        labelNode = this._getLabelByType(jpType);\n\n        if (!spine || !icon || !particle) {\n            cc.warn(\"Have to implement enought anim for JP explosion\", { spine, icon, particle });\n            return;\n        }\n\n        if (spine && icon) {\n            icon.active = false;\n            spine.node.active = true;\n            spine._animationQueue = [];\n            spine.setAnimation(0, \"animation\", false);\n            spine.addAnimation(0, \"animation\", false);\n        }\n\n        if (labelNode && labelNode.active === true) {\n            labelNode.initScale = labelNode.initScale ? labelNode.initScale : labelNode.scaleX;\n            labelNode.getComponent(cc.Label).string = formatMoney(jpAmount);\n            let dur = 0.75, repeatTime = Math.floor(time/(2 * dur));\n            labelNode.actionZoom && labelNode.stopAction(labelNode.actionZoom);\n            labelNode.actionZoom = cc.repeat(cc.sequence(\n                cc.scaleTo(dur, labelNode.initScale + 0.2),\n                cc.scaleTo(dur, labelNode.initScale)\n            ), repeatTime);\n            labelNode.runAction(labelNode.actionZoom);\n        }\n\n        if (particle) {\n            particle.node.active = true;\n            particle.play();\n        }\n\n        this._callbackHideJpWin = () => {\n            spine.node.active = false;\n            icon.active = true;\n            particle.node.active = false;\n            this._callbackHideJpWin = null;\n            this._callbackNotiJp && this._callbackNotiJp();\n            this._callbackNotiJp = null;\n            this.resumeRenderJP();\n        };\n        this.scheduleOnce(this._callbackHideJpWin, time);\n    },\n    stopJackpotExplosion() {\n        if (this._callbackHideJpWin) {\n            this.unschedule(this._callbackHideJpWin);\n            this._callbackHideJpWin();\n        }\n    },\n});\n"]}