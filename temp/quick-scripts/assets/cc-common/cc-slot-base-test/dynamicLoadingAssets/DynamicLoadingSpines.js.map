{"version":3,"sources":["DynamicLoadingSpines.js"],"names":["cc","Class","extends","Component","properties","symbolIds","defaultUrl","prefix","onLoad","node","controller","types","spineSymbolUrls","spineObject","split","forEach","url","id","type","push","updatedSpines","thiz","loader","load","errors","result","i","length","log","getError","spine","atlasText","skeletonJson","texture","content","getContent","skeletonData","sp","SkeletonData","textures","textureNames","name","symbolPayline","getComponent","spineList"],"mappings":";;;;;;;;AAAA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,mBAAW,0CADH;AAERC,oBAAY,yCAFJ;AAGRC,gBAAQ;AAHA,KAHP;;AASLC,UATK,oBASI;AAAA;;AACL,aAAKC,IAAL,CAAUC,UAAV,GAAuB,IAAvB;AACA,YAAMC,QAAQ,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAd;AACA,aAAKC,eAAL,GAAuB,EAAvB;AACA,aAAKC,WAAL,GAAmB,EAAnB;;AAEA,aAAKR,SAAL,CAAeS,KAAf,CAAqB,GAArB,EAA0BC,OAA1B,CAAkC,cAAM;AACpCJ,kBAAMI,OAAN,CAAc,gBAAQ;AAClB,oBAAMC,WAAS,MAAKV,UAAd,GAA2B,MAAKC,MAAhC,GAAyCU,EAAzC,SAA+CC,IAArD;AACA,sBAAKN,eAAL,CAAqBO,IAArB,CAA0BH,GAA1B;AACA,oBAAI,MAAKH,WAAL,CAAiBI,EAAjB,CAAJ,EAA0B;AACtB,0BAAKJ,WAAL,CAAiBI,EAAjB,EAAqBC,IAArB,IAA6BF,GAA7B;AACH,iBAFD,MAEO;AACH,0BAAKH,WAAL,CAAiBI,EAAjB,wBACKC,IADL,EACYF,GADZ;AAGH;AACJ,aAVD;AAWH,SAZD;;AAcA,aAAKI,aAAL,GAAqB,EAArB;AACA,YAAIC,OAAO,IAAX;AACArB,WAAGsB,MAAH,CAAUC,IAAV,CAAe,KAAKX,eAApB,EAAqC,UAACY,MAAD,EAASC,MAAT,EAAoB;AACrD,gBAAID,MAAJ,EAAY;AACR,qBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACpC1B,uBAAG4B,GAAH,CAAO,gBAAgBJ,OAAOE,CAAP,CAAhB,GAA4B,KAA5B,GAAoCD,OAAOI,QAAP,CAAgBL,OAAOE,CAAP,CAAhB,CAA3C;AACH;AACJ;;AAED,iBAAK,IAAMT,EAAX,IAAiB,MAAKJ,WAAtB,EAAmC;AAC/B,oBAAMiB,QAAQ,MAAKjB,WAAL,CAAiBI,EAAjB,CAAd;AACA,oBAAIc,kBAAJ;AAAA,oBAAeC,qBAAf;AAAA,oBAA6BC,gBAA7B;AACA,qBAAK,IAAMf,IAAX,IAAmBY,KAAnB,EAA0B;AACtB,wBAAII,UAAUT,OAAOU,UAAP,CAAkBL,MAAMZ,IAAN,CAAlB,CAAd;AACA,wBAAIgB,OAAJ,EAAa;AACT,4BAAIhB,SAAS,KAAb,EAAoBe,UAAUC,OAAV,CAApB,KACK,IAAIhB,SAAS,MAAb,EAAqBc,eAAeE,OAAf,CAArB,KACAH,YAAYG,OAAZ;AACR;AACD,wBAAID,WAAWD,YAAX,IAA2BD,SAA/B,EAA0C;AACtC,4BAAMK,eAAe,IAAIC,GAAGC,YAAP,EAArB;AACAF,qCAAaL,SAAb,GAAyBA,SAAzB;AACAK,qCAAaJ,YAAb,GAA4BA,YAA5B;AACAI,qCAAaG,QAAb,CAAsBpB,IAAtB,CAA2Bc,OAA3B;AACAG,qCAAaI,YAAb,CAA0BrB,IAA1B,MAAkC,MAAKZ,MAAvC,GAAgDU,EAAhD;AACA,8BAAKG,aAAL,CAAmBD,IAAnB,CAAwB,EAACsB,MAAMxB,EAAP,EAAWa,OAAOM,YAAlB,EAAxB;AACH;AACJ;AACJ;AACDf,iBAAKZ,IAAL,CAAUiC,aAAV,CAAwBC,YAAxB,CAAqC,mBAArC,EAA0DC,SAA1D,GAAsE,MAAKxB,aAA3E;AACH,SA5BD;AA6BH;AA5DI,CAAT","file":"DynamicLoadingSpines.js","sourceRoot":"../../../../../../assets/cc-common/cc-slot-base-test/dynamicLoadingAssets","sourcesContent":["/* global cc,sp */\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        symbolIds: '2,3,4,5,6,7,8,9,10,K,K1,K2,K3,J,Q,JP,A,R',\n        defaultUrl: 'https://static.ktek.io/animTool/spines/',\n        prefix: 'Symbol_',\n    },\n\n    onLoad() {\n        this.node.controller = this;\n        const types = ['png', 'atlas', 'json'];\n        this.spineSymbolUrls = [];\n        this.spineObject = {};\n        \n        this.symbolIds.split(',').forEach(id => {\n            types.forEach(type => {\n                const url = `${this.defaultUrl}${this.prefix}${id}.${type}`;\n                this.spineSymbolUrls.push(url);\n                if (this.spineObject[id]) {\n                    this.spineObject[id][type] = url;\n                } else {\n                    this.spineObject[id] = {\n                        [type]: url\n                    };\n                }\n            });\n        });\n        \n        this.updatedSpines = [];\n        let thiz = this;\n        cc.loader.load(this.spineSymbolUrls, (errors, result) => {\n            if (errors) {\n                for (let i = 0; i < errors.length; i++) {\n                    cc.log('Error url [' + errors[i] + ']: ' + result.getError(errors[i]));\n                }\n            }\n            \n            for (const id in this.spineObject) {\n                const spine = this.spineObject[id];\n                let atlasText, skeletonJson, texture;\n                for (const type in spine) {\n                    let content = result.getContent(spine[type]);\n                    if (content) {\n                        if (type === 'png') texture = content;\n                        else if (type === 'json') skeletonJson = content;\n                        else atlasText = content;\n                    }\n                    if (texture && skeletonJson && atlasText) {\n                        const skeletonData = new sp.SkeletonData();\n                        skeletonData.atlasText = atlasText;\n                        skeletonData.skeletonJson = skeletonJson;\n                        skeletonData.textures.push(texture);\n                        skeletonData.textureNames.push(`${this.prefix}${id}.png`);\n                        this.updatedSpines.push({name: id, spine: skeletonData});\n                    }\n                }\n            }\n            thiz.node.symbolPayline.getComponent(\"SlotSymbolPayline\").spineList = this.updatedSpines;\n        });\n    },\n});\n"]}