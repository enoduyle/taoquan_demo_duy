{"version":3,"sources":["MiniGameDirector.js"],"names":["turnBaseFSM","require","getRandomInt","baseDirector","cc","Class","extends","onExtendedLoad","node","on","stateUpdate","stateResume","enter","init","setWinAmount","controls","table","getChildByName","tableComponent","mainComponent","winRate","getComponent","Label","fsm","timerCount","miniGameResultReceive","data","countMiniGame","currentWinRate","count","gameStart","listClickedMiniGame","setTriggerMiniGame","timer","runAnimationEnter","string","createMiniGame","miniGameClick","bind","i","length","row","j","miniGameOpenWhenResume","exit","removeAllNode","clearTimeout","timeoutTriggerMiniGame","winAmount","updateValue","value","time","openBoxItemMiniGame","dataForMiniGame","rewriteSprite","updateWinRate","bonus","col","includes","setTimeout","can","bonusPlayRemain","gSlotDataStore","playSession","miniResult","lastEvent","resultReceive","miniGamePost","clickedMiniGame","getCurrentNode","stopAllActions","gameRestart","director","getScheduler","schedule","dataUpdate","isAutoTrigger","openCell","actionTrigger","runAnimation","push","mainDirector","gameStateManager","triggerMiniGame","repeater","repeatForever","sequence","moveTo","v2","x","y","runAction","Number","forceStopSpinning","stopAutoSpinClick"],"mappings":"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","file":"MiniGameDirector.js","sourceRoot":"../../../../../../../../assets/cc-common/cc-slotbase-v2/g9000/miniGame/pickABox","sourcesContent":["\n\nconst turnBaseFSM = require('turnBaseFSM');\nconst {getRandomInt} = require('utils');\nconst baseDirector = require('BaseDirectorV2');\n\n\ncc.Class({\n    extends: baseDirector,\n    onExtendedLoad() {\n        this.node.on(\"GAME_UPDATE\",this.stateUpdate,this);\n        this.node.on(\"GAME_RESUME\",this.stateResume,this);\n        this.node.on(\"GAME_ENTER\",this.enter,this);\n        this.node.on(\"GAME_INIT\",this.init,this);\n        this.node.on(\"UPDATE_WINAMOUNT\", this.setWinAmount, this);\n    },\n    init() {\n        this.controls = {\n            table: this.node.getChildByName('TableMiniGame'),\n            tableComponent: this.node.getChildByName('TableMiniGame').mainComponent,\n            winRate: this.node.getChildByName('MoneyFrame').getChildByName('Rate').getComponent(cc.Label),\n        };\n        \n        this.fsm = new turnBaseFSM();\n        this.timerCount = 15*1000;\n    },\n    stateUpdate() {\n        this.miniGameResultReceive();\n    },\n    stateResume() {\n        this.miniGameResultReceive();\n    },\n\n    enter(data) {\n        if (!data) {\n            data = [\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n            ];\n        }\n\n        this.data = data;\n        this.countMiniGame = 0;\n        this.currentWinRate = 0;\n        this.count = 0;\n        this.fsm.gameStart();\n        this.listClickedMiniGame = [];\n        this.setTriggerMiniGame({timer: this.timerCount});\n        // this.soundManager.stopBGAudio();\n        // //waiting for 2s before play a sound bg for mini game.\n        // setTimeout(() => {\n        //     this.soundManager.playBGMiniGame();\n        // }, 2000);\n        \n        this.runAnimationEnter();\n    },\n\n    runAnimationEnter() {\n        const {tableComponent, winRate,} = this.controls;\n\n        winRate.string = '0';\n        tableComponent.createMiniGame(this.data, this.miniGameClick.bind(this));\n\n        //Resume\n        for (let i = 0; i < this.data.length; i++) {\n            const row = this.data[i];\n            for (let j = 0; j < row.length; j++) {\n                if (row[j] > 0) this.miniGameOpenWhenResume(i+1, j+1, row[j]);\n            }\n        }\n    },\n\n    exit() {\n        const {tableComponent, winRate,} = this.controls;\n        this.currentWinRate = 0;\n       \n        winRate.string = '0';\n        tableComponent.removeAllNode();\n        this.listClickedMiniGame = [];\n        clearTimeout(this.timeoutTriggerMiniGame);\n\n        // this.soundManager.playBGAudio();\n\n        this.node.exit();\n    },\n    setWinAmount({winAmount})\n    {\n        if (this.winAmount)\n            this.winAmount.getComponent('TextControl').updateValue({value: winAmount, time: 0});\n    },\n    openBoxItemMiniGame(dataForMiniGame){\n        this.count++;\n        dataForMiniGame['count'] = this.count;\n        const {tableComponent} = this.controls;\n        tableComponent.rewriteSprite(dataForMiniGame, () => {\n            this.updateWinRate(dataForMiniGame.bonus);\n        });\n    },\n\n    setTriggerMiniGame({timer}) {\n        const row = getRandomInt(1, 3);\n        const col = getRandomInt(1, 5);\n        if (this.listClickedMiniGame.includes(row + '' + col)) {\n            this.setTriggerMiniGame({timer});\n        } else {\n            this.timeoutTriggerMiniGame = setTimeout(() => {\n                this.miniGameClick({row, col}, true);\n            }, timer);\n        }\n    },\n    \n    miniGameResultReceive() {\n        if (!this.fsm.can('resultReceive')) return;\n        \n        const {bonusPlayRemain} = this.node.gSlotDataStore.playSession;\n        const {miniResult} = this.node.gSlotDataStore.lastEvent;\n        let bonus = 100;\n        if (miniResult == \"B\") {\n            bonus = 200;\n        } else if (miniResult == \"C\") {\n            bonus = 400;\n        }\n\n        this.fsm.resultReceive();\n        /// show animation open treasure\n        this.count++;\n        const dataForMiniGame = {\n            node: this.miniGamePost,\n            bonus: bonus,\n            count: this.count\n        };\n        const {tableComponent} = this.controls;\n\n        const {node: {row, col}} = dataForMiniGame;\n        const clickedMiniGame = tableComponent.getCurrentNode({node: {row, col}});\n        clickedMiniGame.stopAllActions();\n        tableComponent.rewriteSprite(dataForMiniGame);\n        this.data[row - 1][col -1] = dataForMiniGame.bonus;\n        this.fsm.gameRestart();\n        this.setTriggerMiniGame({ timer: this.timerCount - 5000 });\n        \n        this.updateWinRate(dataForMiniGame.bonus || 0);\n        //play sound when open cell.\n        //param = bonus\n        // this.soundManager.playMiniGameOpenCell(dataForMiniGame.bonus);\n\n        if (!bonusPlayRemain || bonusPlayRemain <= 0) {\n            cc.director.getScheduler().schedule(function(){\n                this.exit();\n            }, this, 0, 0, 2, false);\n        }\n    },\n    miniGameClick(dataUpdate, isAutoTrigger = false) {\n        const {\n            row, col\n        } = dataUpdate;\n        const openCell = (row - 1) * 5 + col - 1;\n\n        if (this.fsm.can('actionTrigger') && this.countMiniGame < 3 && this.data[row - 1][col -1] == '0') {\n            this.countMiniGame++;\n            this.fsm.actionTrigger();\n            this.miniGamePost = dataUpdate;\n            // store command id to data store\n            const {tableComponent} = this.controls;\n            \n            //sharing cell\n            const clickedMiniGame = tableComponent.getCurrentNode({ node: { row, col } });\n            this.runAnimation(clickedMiniGame);\n            \n            this.listClickedMiniGame.push(row + '' + col);\n            this.node.mainDirector.gameStateManager.triggerMiniGame(openCell);\n            if (!isAutoTrigger) {\n                clearTimeout(this.timeoutTriggerMiniGame);\n            }\n        }\n    },\n    miniGameOpenWhenResume(row, col, bonus) {\n        this.countMiniGame++;\n        const dataForMiniGame = {\n            node: {row: row, col: col},\n            bonus: bonus,\n        };\n        this.openBoxItemMiniGame(dataForMiniGame);\n        this.listClickedMiniGame.push(row + '' + col);\n    },\n\n    runAnimation(clickedMiniGame) {\n        const repeater = cc.repeatForever(cc.sequence(\n            cc.moveTo(0.02, cc.v2(clickedMiniGame.x - 10, clickedMiniGame.y)),\n            cc.moveTo(0.02, cc.v2(clickedMiniGame.x, clickedMiniGame.y)),\n            cc.moveTo(0.02, cc.v2(clickedMiniGame.x + 10, clickedMiniGame.y)),\n            cc.moveTo(0.02, cc.v2(clickedMiniGame.x, clickedMiniGame.y)),\n        ));\n        clickedMiniGame.runAction(repeater);\n    },\n    updateWinRate(value) {\n        const {winRate} = this.controls;\n        if (value) {\n            this.currentWinRate += Number(value);\n            winRate.string = `X${this.currentWinRate}`;\n        }\n    },\n\n    forceStopSpinning() {\n        \n    },\n\n    stopAutoSpinClick() {\n        \n    }\n\n    // update (dt) {},\n});\n"]}