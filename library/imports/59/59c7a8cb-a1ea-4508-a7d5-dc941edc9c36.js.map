{"version":3,"sources":["../../../../../../../../assets/cc-common/cc-slotbase-v2/g9000/template-minigame/mini-table/assets/cc-common/cc-slotbase-v2/g9000/template-minigame/mini-table/MiniBaseTable.js"],"names":["cc","Class","extends","Component","properties","colNumber","rowNumber","WIDTH_STEP","HEIGHT_STEP","itemPrefab","Node","onLoad","node","on","initItems","openPickedItem","openAllItems","resumeTable","resetTable","autoClick","randRange","min","max","Math","floor","random","start","startX","startY","MAX_BOXES","listItem","i","item","instantiate","addChild","active","itemId","push","setPosition","getPosByIndex","setPositionItems","data","defaultValue","length","itemController","playAnimOpen","resetItem","index","isOpen","onClickItem","callback","value","result","updateCurrentMatrix","randValue","getRandomValue","tween","to","opacity","delay","call","TREASURE_VALUE","config","listScore","map","count","currentCount","find","log","x","y","v2"],"mappings":"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","file":"MiniBaseTable.js","sourceRoot":"../../../../../../../../assets/cc-common/cc-slotbase-v2/g9000/template-minigame/mini-table","sourcesContent":["\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        colNumber: 5,\n        rowNumber: 3,\n        WIDTH_STEP: 250,\n        HEIGHT_STEP: 250,\n        itemPrefab: cc.Node\n    },\n\n    onLoad() {\n        this.node.on(\"INIT_TABLE\", this.initItems, this);\n        this.node.on(\"OPEN_PICKED_ITEM\", this.openPickedItem, this);\n        this.node.on(\"OPEN_ALL_ITEMS\", this.openAllItems, this);\n        this.node.on(\"RESUME_MINI_GAME\", this.resumeTable, this);\n        this.node.on(\"RESET_MINI_TABLE\", this.resetTable, this);\n        this.node.on(\"AUTO_OPEN_BOX\", this.autoClick, this);\n    },\n\n    randRange(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n    },\n\n    start() {\n        this.startX = -this.colNumber / 2 * this.WIDTH_STEP + this.WIDTH_STEP / 2;\n        this.startY = this.rowNumber / 2 * this.HEIGHT_STEP - this.HEIGHT_STEP / 2;\n    },\n\n    initItems() {\n        this.MAX_BOXES = this.colNumber * this.rowNumber;\n        this.listItem = [];\n        for (let i = 0; i < this.MAX_BOXES; i++) {\n            let item = cc.instantiate(this.itemPrefab);\n            this.node.addChild(item);\n            item.active = true;\n            item.itemId = i;\n            this.listItem.push(item);\n            item.setPosition(this.getPosByIndex(i));\n            // DebugItemId:{\n            //     let textNode = new cc.Node();\n            //     item.addChild(textNode)\n            //     textNode.addComponent(cc.Label).string = item.itemId;\n            // }\n        }\n        this.setPositionItems();\n    },\n    setPositionItems()\n    {\n        //customize items positions\n    },\n    resumeTable(data, defaultValue) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i] !== defaultValue) {\n                this.listItem[i].itemController.playAnimOpen(data[i]);\n            }\n        }\n    },\n    resetTable() {\n        for (let i = 0; i < this.listItem.length; i++) {\n            this.listItem[i].itemController.resetItem();\n        }\n    },\n\n    autoClick() {\n        const index = this.randRange(0, this.listItem.length);\n        this.listItem[index].isOpen ? this.autoClick() : this.listItem[index].itemController.onClickItem(null, true);\n    },\n\n    openPickedItem(data, callback) {\n        const {index, value} = data;\n        this.listItem[index].itemController.playAnimOpen(value, callback);\n    },\n\n    openAllItems(result, callback) {\n        this.result = result;\n        this.updateCurrentMatrix();\n        for (let i = 0; i < this.listItem.length; i++) {\n            if (this.listItem[i].isOpen === false) {\n                let randValue = this.getRandomValue();\n                this.listItem[i].itemController.playAnimOpen(randValue);\n                cc.tween(this.listItem[i])\n                    .to(0.5, {opacity: 100})\n                    .start();\n            }\n        }\n        if (callback && typeof callback === 'function') {\n            cc.tween(this.node)\n                .delay(1)\n                .call(() => {\n                    callback();\n                })\n                .start();\n        }\n    },\n\n    updateCurrentMatrix() {\n        const {TREASURE_VALUE} = this.node.config;\n        this.listScore = TREASURE_VALUE.map(item => {\n            return {value: item.value, count: item.count, currentCount: 0};\n        });\n        for (let index = 0; index < this.listItem.length; index++) {\n            if (this.listItem[index].isOpen) {\n                let item = this.listScore.find(item => item.value === this.result[index]);\n                if (item) {\n                    item.currentCount++;\n                } else {\n                    cc.log(`Cant find item with result value ${this.result[index]}`);\n                }\n            }\n        }\n    },\n\n    getRandomValue() {\n        const index = this.randRange(0, this.listScore.length);\n        const {currentCount , count} = this.listScore[index];\n        if (currentCount < count) {\n            this.listScore[index].currentCount++;\n            return this.listScore[index].value;\n        } else {\n            return this.getRandomValue();\n        }\n    },\n\n    getPosByIndex(index) {\n        let x = this.startX + this.WIDTH_STEP * Math.floor(index / this.rowNumber);\n        let y = this.startY - this.HEIGHT_STEP * (index % this.rowNumber);\n        return cc.v2(x, y);\n    },\n\n});\n"]}