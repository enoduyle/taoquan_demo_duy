{"version":3,"sources":["jsb_runtime_md5.js"],"names":["module","exports","data","fflog","msg","console","log","e","to_zerofilled_hex","n","t1","toString","t2","substr","length","int64_to_bytes","num","retval","i","push","rol","places","fF","b","c","d","fG","fH","fI","bytes_to_int32","arr","off","int128le_to_hex","ra","t","ta","arguments","Uint8Array","databytes","byteLength","org_len","tail","j","concat","h0","h1","h2","h3","a","_add","n1","n2","updateRun","nf","sin32","dw32","b32","temp","ptr","toLowerCase"],"mappings":"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","file":"jsb_runtime_md5.js","sourceRoot":"../../../../../../assets/cc-common/cc-share-v1/Flutter","sourcesContent":["/**\n * from jsb_runtime_md5.js\n * @param {} data\n */\nmodule.exports = function(data){\n    // for test/debug\n    function fflog(msg) {\n        try {\n            console.log(msg);\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    // convert number to (unsigned) 32 bit hex, zero filled string\n    function to_zerofilled_hex(n) {\n        var t1 = (n >>> 24).toString(16);\n        var t2 = (n & 0x00FFFFFF).toString(16);\n        return \"00\".substr(0, 2 - t1.length) + t1 +\n            \"000000\".substr(0, 6 - t2.length) + t2;\n    }\n\n    // convert a 64 bit unsigned number to array of bytes. Little endian\n    function int64_to_bytes(num) {\n        var retval = [];\n        for (var i = 0; i < 8; i++) {\n            retval.push(num & 0xFF);\n            num = num >>> 8;\n        }\n        return retval;\n    }\n\n    //  32 bit left-rotation\n    function rol(num, places) {\n        return ((num << places) & 0xFFFFFFFF) | (num >>> (32 - places));\n    }\n\n    // The 4 MD5 functions\n    function fF(b, c, d) {\n        return (b & c) | (~b & d);\n    }\n\n    function fG(b, c, d) {\n        return (d & b) | (~d & c);\n    }\n\n    function fH(b, c, d) {\n        return b ^ c ^ d;\n    }\n\n    function fI(b, c, d) {\n        return c ^ (b | ~d);\n    }\n\n    // pick 4 bytes at specified offset. Little-endian is assumed\n    function bytes_to_int32(arr, off) {\n        return (arr[off + 3] << 24) | (arr[off + 2] << 16) | (arr[off + 1] << 8) | (arr[off]);\n    }\n    // convert the 4 32-bit buffers to a 128 bit hex string. (Little-endian is assumed)\n    function int128le_to_hex() {\n        var ra = \"\";\n        var t = 0;\n        var ta = 0;\n        for (var i = 3; i >= 0; i--) {\n            ta = arguments[i];\n            t = (ta & 0xFF);\n            ta = ta >>> 8;\n            t = t << 8;\n            t = t | (ta & 0xFF);\n            ta = ta >>> 8;\n            t = t << 8;\n            t = t | (ta & 0xFF);\n            ta = ta >>> 8;\n            t = t << 8;\n            t = t | ta;\n            ra = ra + to_zerofilled_hex(t);\n        }\n        return ra;\n    }\n\n    // check input data type and perform conversions if needed\n\n    if (!data instanceof Uint8Array){ // eslint-disable-line\n        fflog(\"input data type mismatch only support Uint8Array\");\n        return null;\n    }\n    var databytes = [];\n    for(var i = 0; i < data.byteLength;i++){\n        databytes.push(data[i]);\n    }\n\n    // save original length\n    var org_len = databytes.length;\n\n    // first append the \"1\" + 7x \"0\"\n    databytes.push(0x80);\n\n    // determine required amount of padding\n    var tail = databytes.length % 64;\n    // no room for msg length?\n    if (tail > 56) {\n        // pad to next 512 bit block\n        for (var j = 0; j < (64 - tail); j++) {\n            databytes.push(0x0);\n        }\n        tail = databytes.length % 64;\n    }\n    for (i = 0; i < (56 - tail); i++) {\n        databytes.push(0x0);\n    }\n    // message length in bits mod 512 should now be 448\n    // append 64 bit, little-endian original msg length (in *bits*!)\n    databytes = databytes.concat(int64_to_bytes(org_len * 8));\n\n    // initialize 4x32 bit state\n    var h0 = 0x67452301;\n    var h1 = 0xEFCDAB89;\n    var h2 = 0x98BADCFE;\n    var h3 = 0x10325476;\n\n    // temp buffers\n    var a = 0,\n        b = 0,\n        c = 0,\n        d = 0;\n\n\n    function _add(n1, n2) {\n        return 0x0FFFFFFFF & (n1 + n2);\n    }\n\n    // function update partial state for each run\n    var updateRun = function(nf, sin32, dw32, b32) {\n        var temp = d;\n        d = c;\n        c = b;\n        //b = b + rol(a + (nf + (sin32 + dw32)), b32);\n        b = _add(b,\n            rol(\n                _add(a,\n                    _add(nf, _add(sin32, dw32))\n                ), b32\n            )\n        );\n        a = temp;\n    };\n\n\n    // Digest message\n    for (i = 0; i < databytes.length / 64; i++) {\n        // initialize run\n        a = h0;\n        b = h1;\n        c = h2;\n        d = h3;\n\n        var ptr = i * 64;\n\n        // do 64 runs\n        updateRun(fF(b, c, d), 0xd76aa478, bytes_to_int32(databytes, ptr), 7);\n        updateRun(fF(b, c, d), 0xe8c7b756, bytes_to_int32(databytes, ptr + 4), 12);\n        updateRun(fF(b, c, d), 0x242070db, bytes_to_int32(databytes, ptr + 8), 17);\n        updateRun(fF(b, c, d), 0xc1bdceee, bytes_to_int32(databytes, ptr + 12), 22);\n        updateRun(fF(b, c, d), 0xf57c0faf, bytes_to_int32(databytes, ptr + 16), 7);\n        updateRun(fF(b, c, d), 0x4787c62a, bytes_to_int32(databytes, ptr + 20), 12);\n        updateRun(fF(b, c, d), 0xa8304613, bytes_to_int32(databytes, ptr + 24), 17);\n        updateRun(fF(b, c, d), 0xfd469501, bytes_to_int32(databytes, ptr + 28), 22);\n        updateRun(fF(b, c, d), 0x698098d8, bytes_to_int32(databytes, ptr + 32), 7);\n        updateRun(fF(b, c, d), 0x8b44f7af, bytes_to_int32(databytes, ptr + 36), 12);\n        updateRun(fF(b, c, d), 0xffff5bb1, bytes_to_int32(databytes, ptr + 40), 17);\n        updateRun(fF(b, c, d), 0x895cd7be, bytes_to_int32(databytes, ptr + 44), 22);\n        updateRun(fF(b, c, d), 0x6b901122, bytes_to_int32(databytes, ptr + 48), 7);\n        updateRun(fF(b, c, d), 0xfd987193, bytes_to_int32(databytes, ptr + 52), 12);\n        updateRun(fF(b, c, d), 0xa679438e, bytes_to_int32(databytes, ptr + 56), 17);\n        updateRun(fF(b, c, d), 0x49b40821, bytes_to_int32(databytes, ptr + 60), 22);\n        updateRun(fG(b, c, d), 0xf61e2562, bytes_to_int32(databytes, ptr + 4), 5);\n        updateRun(fG(b, c, d), 0xc040b340, bytes_to_int32(databytes, ptr + 24), 9);\n        updateRun(fG(b, c, d), 0x265e5a51, bytes_to_int32(databytes, ptr + 44), 14);\n        updateRun(fG(b, c, d), 0xe9b6c7aa, bytes_to_int32(databytes, ptr), 20);\n        updateRun(fG(b, c, d), 0xd62f105d, bytes_to_int32(databytes, ptr + 20), 5);\n        updateRun(fG(b, c, d), 0x2441453, bytes_to_int32(databytes, ptr + 40), 9);\n        updateRun(fG(b, c, d), 0xd8a1e681, bytes_to_int32(databytes, ptr + 60), 14);\n        updateRun(fG(b, c, d), 0xe7d3fbc8, bytes_to_int32(databytes, ptr + 16), 20);\n        updateRun(fG(b, c, d), 0x21e1cde6, bytes_to_int32(databytes, ptr + 36), 5);\n        updateRun(fG(b, c, d), 0xc33707d6, bytes_to_int32(databytes, ptr + 56), 9);\n        updateRun(fG(b, c, d), 0xf4d50d87, bytes_to_int32(databytes, ptr + 12), 14);\n        updateRun(fG(b, c, d), 0x455a14ed, bytes_to_int32(databytes, ptr + 32), 20);\n        updateRun(fG(b, c, d), 0xa9e3e905, bytes_to_int32(databytes, ptr + 52), 5);\n        updateRun(fG(b, c, d), 0xfcefa3f8, bytes_to_int32(databytes, ptr + 8), 9);\n        updateRun(fG(b, c, d), 0x676f02d9, bytes_to_int32(databytes, ptr + 28), 14);\n        updateRun(fG(b, c, d), 0x8d2a4c8a, bytes_to_int32(databytes, ptr + 48), 20);\n        updateRun(fH(b, c, d), 0xfffa3942, bytes_to_int32(databytes, ptr + 20), 4);\n        updateRun(fH(b, c, d), 0x8771f681, bytes_to_int32(databytes, ptr + 32), 11);\n        updateRun(fH(b, c, d), 0x6d9d6122, bytes_to_int32(databytes, ptr + 44), 16);\n        updateRun(fH(b, c, d), 0xfde5380c, bytes_to_int32(databytes, ptr + 56), 23);\n        updateRun(fH(b, c, d), 0xa4beea44, bytes_to_int32(databytes, ptr + 4), 4);\n        updateRun(fH(b, c, d), 0x4bdecfa9, bytes_to_int32(databytes, ptr + 16), 11);\n        updateRun(fH(b, c, d), 0xf6bb4b60, bytes_to_int32(databytes, ptr + 28), 16);\n        updateRun(fH(b, c, d), 0xbebfbc70, bytes_to_int32(databytes, ptr + 40), 23);\n        updateRun(fH(b, c, d), 0x289b7ec6, bytes_to_int32(databytes, ptr + 52), 4);\n        updateRun(fH(b, c, d), 0xeaa127fa, bytes_to_int32(databytes, ptr), 11);\n        updateRun(fH(b, c, d), 0xd4ef3085, bytes_to_int32(databytes, ptr + 12), 16);\n        updateRun(fH(b, c, d), 0x4881d05, bytes_to_int32(databytes, ptr + 24), 23);\n        updateRun(fH(b, c, d), 0xd9d4d039, bytes_to_int32(databytes, ptr + 36), 4);\n        updateRun(fH(b, c, d), 0xe6db99e5, bytes_to_int32(databytes, ptr + 48), 11);\n        updateRun(fH(b, c, d), 0x1fa27cf8, bytes_to_int32(databytes, ptr + 60), 16);\n        updateRun(fH(b, c, d), 0xc4ac5665, bytes_to_int32(databytes, ptr + 8), 23);\n        updateRun(fI(b, c, d), 0xf4292244, bytes_to_int32(databytes, ptr), 6);\n        updateRun(fI(b, c, d), 0x432aff97, bytes_to_int32(databytes, ptr + 28), 10);\n        updateRun(fI(b, c, d), 0xab9423a7, bytes_to_int32(databytes, ptr + 56), 15);\n        updateRun(fI(b, c, d), 0xfc93a039, bytes_to_int32(databytes, ptr + 20), 21);\n        updateRun(fI(b, c, d), 0x655b59c3, bytes_to_int32(databytes, ptr + 48), 6);\n        updateRun(fI(b, c, d), 0x8f0ccc92, bytes_to_int32(databytes, ptr + 12), 10);\n        updateRun(fI(b, c, d), 0xffeff47d, bytes_to_int32(databytes, ptr + 40), 15);\n        updateRun(fI(b, c, d), 0x85845dd1, bytes_to_int32(databytes, ptr + 4), 21);\n        updateRun(fI(b, c, d), 0x6fa87e4f, bytes_to_int32(databytes, ptr + 32), 6);\n        updateRun(fI(b, c, d), 0xfe2ce6e0, bytes_to_int32(databytes, ptr + 60), 10);\n        updateRun(fI(b, c, d), 0xa3014314, bytes_to_int32(databytes, ptr + 24), 15);\n        updateRun(fI(b, c, d), 0x4e0811a1, bytes_to_int32(databytes, ptr + 52), 21);\n        updateRun(fI(b, c, d), 0xf7537e82, bytes_to_int32(databytes, ptr + 16), 6);\n        updateRun(fI(b, c, d), 0xbd3af235, bytes_to_int32(databytes, ptr + 44), 10);\n        updateRun(fI(b, c, d), 0x2ad7d2bb, bytes_to_int32(databytes, ptr + 8), 15);\n        updateRun(fI(b, c, d), 0xeb86d391, bytes_to_int32(databytes, ptr + 36), 21);\n\n        // update buffers\n        h0 = _add(h0, a);\n        h1 = _add(h1, b);\n        h2 = _add(h2, c);\n        h3 = _add(h3, d);\n    }\n    // Done! Convert buffers to 128 bit (LE)\n    return int128le_to_hex(h3, h2, h1, h0).toLowerCase();\n};"]}