{"version":3,"sources":["crypto-core.js"],"names":["CryptoJS","Math","undefined","crypto","window","self","globalThis","msCrypto","global","require","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error","create","Object","F","obj","subtype","prototype","C","C_lib","lib","Base","extend","overrides","mixIn","hasOwnProperty","init","$super","apply","arguments","instance","properties","propertyName","toString","clone","WordArray","words","sigBytes","length","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","i","thatByte","j","ceil","call","slice","random","nBytes","push","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","processedWords","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","max","_minBufferSize","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Hasher","cfg","_doReset","update","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","C_algo","HMAC","algo","Cipher","Base64","EvpKDF","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","xformMode","_xformMode","_key","process","dataUpdate","finalProcessedData","keySize","ivSize","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","decrypt","ciphertext","StreamCipher","finalProcessedBlocks","C_mode","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","processBlock","xorBlock","encryptBlock","_prevBlock","thisBlock","decryptBlock","block","C_pad","pad","Pkcs7","nPaddingBytes","paddingWord","paddingWords","padding","unpad","BlockCipher","modeCreator","_mode","__creator","CipherParams","cipherParams","formatter","C_format","format","OpenSSLFormatter","OpenSSL","salt","openSSLStr","ciphertextWords","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","compute","derivedParams","module","exports"],"mappings":"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","file":"crypto-core.js","sourceRoot":"../../../../../../../assets/cc-common/cc-share-v1/common/crypto-js","sourcesContent":["/* eslint-disable no-prototype-builtins */\n/* globals , globalThis*/\n\n\n\n/**\n * CryptoJS core components.\n */\n// eslint-disable-next-line no-shadow-restricted-names\nconst CryptoJS = (function (Math, undefined) {\n\n    var crypto;\n\n    // Native crypto from window (Browser)\n    if (typeof window !== 'undefined' && window.crypto) {\n        crypto = window.crypto;\n    }\n\n    // Native crypto in web worker (Browser)\n    if (typeof self !== 'undefined' && self.crypto) {\n        crypto = self.crypto;\n    }\n\n    // Native crypto from worker\n    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n        crypto = globalThis.crypto;\n    }\n\n    // Native (experimental IE 11) crypto from window (Browser)\n    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n        crypto = window.msCrypto;\n    }\n\n    // Native crypto from global (NodeJS)\n    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n        crypto = global.crypto;\n    }\n\n    // Native crypto import via require (NodeJS)\n    if (!crypto && typeof require === 'function') {\n        try {\n            crypto = require('crypto');\n        } catch (err) {\n            //\n        }\n    }\n\n    /*\n     * Cryptographically secure pseudorandom number generator\n     *\n     * As Math.random() is cryptographically not safe to use\n     */\n    var cryptoSecureRandomInt = function () {\n        if (crypto) {\n            // Use getRandomValues method (Browser)\n            if (typeof crypto.getRandomValues === 'function') {\n                try {\n                    return crypto.getRandomValues(new Uint32Array(1))[0];\n                } catch (err) {\n                    //\n                }\n            }\n\n            // Use randomBytes method (NodeJS)\n            if (typeof crypto.randomBytes === 'function') {\n                try {\n                    return crypto.randomBytes(4).readInt32LE();\n                } catch (err) {\n                    //\n                }\n            }\n        }\n\n        throw new Error('Native crypto module could not be used to get secure random number.');\n    };\n\n    /*\n     * Local polyfill of Object.create\n\n     */\n    var create = Object.create || (function () {\n        function F() { }\n\n        return function (obj) {\n            var subtype;\n\n            F.prototype = obj;\n\n            subtype = new F();\n\n            F.prototype = null;\n\n            return subtype;\n        };\n    }());\n\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                var subtype = create(this);\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                // eslint-disable-next-line no-prototype-builtins\n                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else {\n                // Copy one word at a time\n                for (var j = 0; j < thatSigBytes; j += 4) {\n                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n                }\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push(cryptoSecureRandomInt());\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            var processedWords;\n\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    // eslint-disable-next-line no-unused-vars\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512 / 32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n\n/**\n * Cipher core components.\n */\n// eslint-disable-next-line no-shadow-restricted-names\nCryptoJS.lib.Cipher || (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    // eslint-disable-next-line no-unused-vars\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\n     * Abstract base cipher template.\n     *\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n     */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {WordArray} iv The IV to use for this operation.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Creates this cipher in encryption mode.\n         *\n         * @param {WordArray} key The key.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {Cipher} A cipher instance.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n         */\n        createEncryptor: function (key, cfg) {\n            return this.create(this._ENC_XFORM_MODE, key, cfg);\n        },\n\n        /**\n         * Creates this cipher in decryption mode.\n         *\n         * @param {WordArray} key The key.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {Cipher} A cipher instance.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n         */\n        createDecryptor: function (key, cfg) {\n            return this.create(this._DEC_XFORM_MODE, key, cfg);\n        },\n\n        /**\n         * Initializes a newly created cipher.\n         *\n         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n         * @param {WordArray} key The key.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @example\n         *\n         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n         */\n        init: function (xformMode, key, cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Store transform mode and key\n            this._xformMode = xformMode;\n            this._key = key;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this cipher to its initial state.\n         *\n         * @example\n         *\n         *     cipher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-cipher logic\n            this._doReset();\n        },\n\n        /**\n         * Adds data to be encrypted or decrypted.\n         *\n         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n         *\n         * @return {WordArray} The data after processing.\n         *\n         * @example\n         *\n         *     var encrypted = cipher.process('data');\n         *     var encrypted = cipher.process(wordArray);\n         */\n        process: function (dataUpdate) {\n            // Append\n            this._append(dataUpdate);\n\n            // Process available blocks\n            return this._process();\n        },\n\n        /**\n         * Finalizes the encryption or decryption process.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n         *\n         * @return {WordArray} The data after final processing.\n         *\n         * @example\n         *\n         *     var encrypted = cipher.finalize();\n         *     var encrypted = cipher.finalize('data');\n         *     var encrypted = cipher.finalize(wordArray);\n         */\n        finalize: function (dataUpdate) {\n            // Final data update\n            if (dataUpdate) {\n                this._append(dataUpdate);\n            }\n\n            // Perform concrete-cipher logic\n            var finalProcessedData = this._doFinalize();\n\n            return finalProcessedData;\n        },\n\n        keySize: 128/32,\n\n        ivSize: 128/32,\n\n        _ENC_XFORM_MODE: 1,\n\n        _DEC_XFORM_MODE: 2,\n\n        /**\n         * Creates shortcut functions to a cipher's object interface.\n         *\n         * @param {Cipher} cipher The cipher to create a helper for.\n         *\n         * @return {Object} An object with encrypt and decrypt shortcut functions.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n         */\n        _createHelper: (function () {\n            function selectCipherStrategy(key) {\n                if (typeof key == 'string') {\n                    return PasswordBasedCipher;\n                } else {\n                    return SerializableCipher;\n                }\n            }\n\n            return function (cipher) {\n                return {\n                    encrypt: function (message, key, cfg) {\n                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n                    },\n\n                    decrypt: function (ciphertext, key, cfg) {\n                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n                    }\n                };\n            };\n        }())\n    });\n\n    /**\n     * Abstract base stream cipher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n     */\n    // eslint-disable-next-line no-unused-vars\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n        _doFinalize: function () {\n            // Process partial blocks\n            var finalProcessedBlocks = this._process(!!'flush');\n\n            return finalProcessedBlocks;\n        },\n\n        blockSize: 1\n    });\n\n    /**\n     * Mode namespace.\n     */\n    var C_mode = C.mode = {};\n\n    /**\n     * Abstract base block cipher mode template.\n     */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n        /**\n         * Creates this mode for encryption.\n         *\n         * @param {Cipher} cipher A block cipher instance.\n         * @param {Array} iv The IV words.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n         */\n        createEncryptor: function (cipher, iv) {\n            return this.Encryptor.create(cipher, iv);\n        },\n\n        /**\n         * Creates this mode for decryption.\n         *\n         * @param {Cipher} cipher A block cipher instance.\n         * @param {Array} iv The IV words.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n         */\n        createDecryptor: function (cipher, iv) {\n            return this.Decryptor.create(cipher, iv);\n        },\n\n        /**\n         * Initializes a newly created mode.\n         *\n         * @param {Cipher} cipher A block cipher instance.\n         * @param {Array} iv The IV words.\n         *\n         * @example\n         *\n         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n         */\n        init: function (cipher, iv) {\n            this._cipher = cipher;\n            this._iv = iv;\n        }\n    });\n\n    /**\n     * Cipher Block Chaining mode.\n     */\n    var CBC = C_mode.CBC = (function () {\n        /**\n         * Abstract base CBC mode.\n         */\n        var CBC = BlockCipherMode.extend();\n\n        /**\n         * CBC encryptor.\n         */\n        CBC.Encryptor = CBC.extend({\n            /**\n             * Processes the data block at offset.\n             *\n             * @param {Array} words The data words to operate on.\n             * @param {number} offset The offset where the block starts.\n             *\n             * @example\n             *\n             *     mode.processBlock(data.words, offset);\n             */\n            processBlock: function (words, offset) {\n                // Shortcuts\n                var cipher = this._cipher;\n                var blockSize = cipher.blockSize;\n\n                // XOR and encrypt\n                xorBlock.call(this, words, offset, blockSize);\n                cipher.encryptBlock(words, offset);\n\n                // Remember this block to use with next block\n                this._prevBlock = words.slice(offset, offset + blockSize);\n            }\n        });\n\n        /**\n         * CBC decryptor.\n         */\n        CBC.Decryptor = CBC.extend({\n            /**\n             * Processes the data block at offset.\n             *\n             * @param {Array} words The data words to operate on.\n             * @param {number} offset The offset where the block starts.\n             *\n             * @example\n             *\n             *     mode.processBlock(data.words, offset);\n             */\n            processBlock: function (words, offset) {\n                // Shortcuts\n                var cipher = this._cipher;\n                var blockSize = cipher.blockSize;\n\n                // Remember this block to use with next block\n                var thisBlock = words.slice(offset, offset + blockSize);\n\n                // Decrypt and XOR\n                cipher.decryptBlock(words, offset);\n                xorBlock.call(this, words, offset, blockSize);\n\n                // This block becomes the previous block\n                this._prevBlock = thisBlock;\n            }\n        });\n\n        function xorBlock(words, offset, blockSize) {\n            var block;\n\n            // Shortcut\n            var iv = this._iv;\n\n            // Choose mixing block\n            if (iv) {\n                block = iv;\n\n                // Remove IV for subsequent blocks\n                this._iv = undefined;\n            } else {\n                block = this._prevBlock;\n            }\n\n            // XOR blocks\n            for (var i = 0; i < blockSize; i++) {\n                words[offset + i] ^= block[i];\n            }\n        }\n\n        return CBC;\n    }());\n\n    /**\n     * Padding namespace.\n     */\n    var C_pad = C.pad = {};\n\n    /**\n     * PKCS #5/7 padding strategy.\n     */\n    var Pkcs7 = C_pad.Pkcs7 = {\n        /**\n         * Pads data using the algorithm defined in PKCS #5/7.\n         *\n         * @param {WordArray} data The data to pad.\n         * @param {number} blockSize The multiple that the data should be padded to.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n         */\n        pad: function (data, blockSize) {\n            // Shortcut\n            var blockSizeBytes = blockSize * 4;\n\n            // Count padding bytes\n            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n            // Create padding word\n            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n            // Create padding\n            var paddingWords = [];\n            for (var i = 0; i < nPaddingBytes; i += 4) {\n                paddingWords.push(paddingWord);\n            }\n            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n            // Add padding\n            data.concat(padding);\n        },\n\n        /**\n         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n         *\n         * @param {WordArray} data The data to unpad.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n         */\n        unpad: function (data) {\n            // Get number of padding bytes from last byte\n            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n            // Remove padding\n            data.sigBytes -= nPaddingBytes;\n        }\n    };\n\n    /**\n     * Abstract base block cipher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n     */\n    // eslint-disable-next-line no-unused-vars\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {Mode} mode The block mode to use. Default: CBC\n         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n         */\n        cfg: Cipher.cfg.extend({\n            mode: CBC,\n            padding: Pkcs7\n        }),\n\n        reset: function () {\n            var modeCreator;\n\n            // Reset cipher\n            Cipher.reset.call(this);\n\n            // Shortcuts\n            var cfg = this.cfg;\n            var iv = cfg.iv;\n            var mode = cfg.mode;\n\n            // Reset block mode\n            if (this._xformMode == this._ENC_XFORM_MODE) {\n                modeCreator = mode.createEncryptor;\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n                modeCreator = mode.createDecryptor;\n                // Keep at least one block in the buffer for unpadding\n                this._minBufferSize = 1;\n            }\n\n            if (this._mode && this._mode.__creator == modeCreator) {\n                this._mode.init(this, iv && iv.words);\n            } else {\n                this._mode = modeCreator.call(mode, this, iv && iv.words);\n                this._mode.__creator = modeCreator;\n            }\n        },\n\n        _doProcessBlock: function (words, offset) {\n            this._mode.processBlock(words, offset);\n        },\n\n        _doFinalize: function () {\n            var finalProcessedBlocks;\n\n            // Shortcut\n            var padding = this.cfg.padding;\n\n            // Finalize\n            if (this._xformMode == this._ENC_XFORM_MODE) {\n                // Pad data\n                padding.pad(this._data, this.blockSize);\n\n                // Process final blocks\n                finalProcessedBlocks = this._process(!!'flush');\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n                // Process final blocks\n                finalProcessedBlocks = this._process(!!'flush');\n\n                // Unpad data\n                padding.unpad(finalProcessedBlocks);\n            }\n\n            return finalProcessedBlocks;\n        },\n\n        blockSize: 128/32\n    });\n\n    /**\n     * A collection of cipher parameters.\n     *\n     * @property {WordArray} ciphertext The raw ciphertext.\n     * @property {WordArray} key The key to this ciphertext.\n     * @property {WordArray} iv The IV used in the ciphering operation.\n     * @property {WordArray} salt The salt used with a key derivation function.\n     * @property {Cipher} algorithm The cipher algorithm.\n     * @property {Mode} mode The block mode used in the ciphering operation.\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\n     * @property {number} blockSize The block size of the cipher.\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n     */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n        /**\n         * Initializes a newly created cipher params object.\n         *\n         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n         *\n         * @example\n         *\n         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n         *         ciphertext: ciphertextWordArray,\n         *         key: keyWordArray,\n         *         iv: ivWordArray,\n         *         salt: saltWordArray,\n         *         algorithm: CryptoJS.algo.AES,\n         *         mode: CryptoJS.mode.CBC,\n         *         padding: CryptoJS.pad.PKCS7,\n         *         blockSize: 4,\n         *         formatter: CryptoJS.format.OpenSSL\n         *     });\n         */\n        init: function (cipherParams) {\n            this.mixIn(cipherParams);\n        },\n\n        /**\n         * Converts this cipher params object to a string.\n         *\n         * @param {Format} formatter (Optional) The formatting strategy to use.\n         *\n         * @return {string} The stringified cipher params.\n         *\n         * @throws Error If neither the formatter nor the default formatter is set.\n         *\n         * @example\n         *\n         *     var string = cipherParams + '';\n         *     var string = cipherParams.toString();\n         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n         */\n        toString: function (formatter) {\n            return (formatter || this.formatter).stringify(this);\n        }\n    });\n\n    /**\n     * Format namespace.\n     */\n    var C_format = C.format = {};\n\n    /**\n     * OpenSSL formatting strategy.\n     */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n        /**\n         * Converts a cipher params object to an OpenSSL-compatible string.\n         *\n         * @param {CipherParams} cipherParams The cipher params object.\n         *\n         * @return {string} The OpenSSL-compatible string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n         */\n        stringify: function (cipherParams) {\n            var wordArray;\n\n            // Shortcuts\n            var ciphertext = cipherParams.ciphertext;\n            var salt = cipherParams.salt;\n\n            // Format\n            if (salt) {\n                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n            } else {\n                wordArray = ciphertext;\n            }\n\n            return wordArray.toString(Base64);\n        },\n\n        /**\n         * Converts an OpenSSL-compatible string to a cipher params object.\n         *\n         * @param {string} openSSLStr The OpenSSL-compatible string.\n         *\n         * @return {CipherParams} The cipher params object.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n         */\n        parse: function (openSSLStr) {\n            var salt;\n\n            // Parse base64\n            var ciphertext = Base64.parse(openSSLStr);\n\n            // Shortcut\n            var ciphertextWords = ciphertext.words;\n\n            // Test for salt\n            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n                // Extract salt\n                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n                // Remove salt from ciphertext\n                ciphertextWords.splice(0, 4);\n                ciphertext.sigBytes -= 16;\n            }\n\n            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n        }\n    };\n\n    /**\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n     */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n         */\n        cfg: Base.extend({\n            format: OpenSSLFormatter\n        }),\n\n        /**\n         * Encrypts a message.\n         *\n         * @param {Cipher} cipher The cipher algorithm to use.\n         * @param {WordArray|string} message The message to encrypt.\n         * @param {WordArray} key The key.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {CipherParams} A cipher params object.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         */\n        encrypt: function (cipher, message, key, cfg) {\n            // Apply config defaults\n            cfg = this.cfg.extend(cfg);\n\n            // Encrypt\n            var encryptor = cipher.createEncryptor(key, cfg);\n            var ciphertext = encryptor.finalize(message);\n\n            // Shortcut\n            var cipherCfg = encryptor.cfg;\n\n            // Create and return serializable cipher params\n            return CipherParams.create({\n                ciphertext: ciphertext,\n                key: key,\n                iv: cipherCfg.iv,\n                algorithm: cipher,\n                mode: cipherCfg.mode,\n                padding: cipherCfg.padding,\n                blockSize: cipher.blockSize,\n                formatter: cfg.format\n            });\n        },\n\n        /**\n         * Decrypts serialized ciphertext.\n         *\n         * @param {Cipher} cipher The cipher algorithm to use.\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n         * @param {WordArray} key The key.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {WordArray} The plaintext.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n         */\n        decrypt: function (cipher, ciphertext, key, cfg) {\n            // Apply config defaults\n            cfg = this.cfg.extend(cfg);\n\n            // Convert string to CipherParams\n            ciphertext = this._parse(ciphertext, cfg.format);\n\n            // Decrypt\n            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n            return plaintext;\n        },\n\n        /**\n         * Converts serialized ciphertext to CipherParams,\n         * else assumed CipherParams already and returns ciphertext unchanged.\n         *\n         * @param {CipherParams|string} ciphertext The ciphertext.\n         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n         *\n         * @return {CipherParams} The unserialized ciphertext.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n         */\n        _parse: function (ciphertext, format) {\n            if (typeof ciphertext == 'string') {\n                return format.parse(ciphertext, this);\n            } else {\n                return ciphertext;\n            }\n        }\n    });\n\n    /**\n     * Key derivation function namespace.\n     */\n    var C_kdf = C.kdf = {};\n\n    /**\n     * OpenSSL key derivation function.\n     */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n        /**\n         * Derives a key and IV from a password.\n         *\n         * @param {string} password The password to derive from.\n         * @param {number} keySize The size in words of the key to generate.\n         * @param {number} ivSize The size in words of the IV to generate.\n         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n         *\n         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n         */\n        execute: function (password, keySize, ivSize, salt) {\n            // Generate random salt\n            if (!salt) {\n                salt = WordArray.random(64/8);\n            }\n\n            // Derive key and IV\n            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n            // Separate key and IV\n            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n            key.sigBytes = keySize * 4;\n\n            // Return params\n            return CipherParams.create({ key: key, iv: iv, salt: salt });\n        }\n    };\n\n    /**\n     * A serializable cipher wrapper that derives the key from a password,\n     * and returns ciphertext as a serializable cipher params object.\n     */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n         */\n        cfg: SerializableCipher.cfg.extend({\n            kdf: OpenSSLKdf\n        }),\n\n        /**\n         * Encrypts a message using a password.\n         *\n         * @param {Cipher} cipher The cipher algorithm to use.\n         * @param {WordArray|string} message The message to encrypt.\n         * @param {string} password The password.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {CipherParams} A cipher params object.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n         */\n        encrypt: function (cipher, message, password, cfg) {\n            // Apply config defaults\n            cfg = this.cfg.extend(cfg);\n\n            // Derive key and other params\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n            // Add IV to config\n            cfg.iv = derivedParams.iv;\n\n            // Encrypt\n            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n            // Mix in derived params\n            ciphertext.mixIn(derivedParams);\n\n            return ciphertext;\n        },\n\n        /**\n         * Decrypts serialized ciphertext using a password.\n         *\n         * @param {Cipher} cipher The cipher algorithm to use.\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n         * @param {string} password The password.\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n         *\n         * @return {WordArray} The plaintext.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n         */\n        decrypt: function (cipher, ciphertext, password, cfg) {\n            // Apply config defaults\n            cfg = this.cfg.extend(cfg);\n\n            // Convert string to CipherParams\n            ciphertext = this._parse(ciphertext, cfg.format);\n\n            // Derive key and other params\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n            // Add IV to config\n            cfg.iv = derivedParams.iv;\n\n            // Decrypt\n            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n            return plaintext;\n        }\n    });\n}());\n\nmodule.exports = CryptoJS;"]}