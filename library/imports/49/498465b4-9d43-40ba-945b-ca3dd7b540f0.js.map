{"version":3,"sources":["../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/table/assets/cc-common/cc-slotbase-v2/slotGame/table/SlotTableNearWinEffect.js"],"names":["cc","Class","extends","Component","properties","stopAtScatterNumber","stopAtBonusNumber","reelParticle","Node","reelParticle1","sfxNearWin","default","type","AudioClip","start","node","on","reelStopNearWin","reelReset","adjustReelDelay","particleList","push","playSoundNearWin","getFirstNearWin","activeParticleList","isActive","opacity","config","SKIP_NEAR_WIN_TURBO","gSlotDataStore","modeTurbo","skipNearWin","reels","data","countScatter","countBonus","nearWinList","col","length","isNearWinScatter","isNearWinBonus","isNearWin","row","symbolValue","extendTimeToStop","count","context","isFastToResult","i","adjustReelSpeed","curentConfig","TIME","hideParticleList","soundPlayer","nearWinSoundKey","playSound","x","getXPosition","TABLE_SHIFT_X","x1","setPosParticleList","SUPER_TURBO","director","getScheduler","schedule","runAnimationNearWin","clearBonusPaylines","stopSound","object","item","undefined","active","posArr"],"mappings":"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","file":"SlotTableNearWinEffect.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/table","sourcesContent":["\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        stopAtScatterNumber: 99,\n        stopAtBonusNumber: 3,\n        reelParticle: cc.Node,\n        reelParticle1: cc.Node,\n        sfxNearWin: {\n            default: null,\n            type: cc.AudioClip,\n        },\n    },\n\n    start () {\n        this.node.on(\"REEL_STOP_NEARWIN\",this.reelStopNearWin,this);\n        this.node.on(\"TABLE_START_NEARWIN\",this.reelReset,this);\n        this.node.on(\"REEL_ABOUT_TO_STOP_NEARWIN\",this.adjustReelDelay,this);\n        \n        this.particleList = [];\n        if (this.reelParticle) this.particleList.push(this.reelParticle);\n        if (this.reelParticle1) this.particleList.push(this.reelParticle1);\n\n        this.reelReset();\n    },\n    reelReset() {\n        this.playSoundNearWin = false;\n        this.getFirstNearWin = false;\n        this.activeParticleList({ isActive: false, opacity: 0 });\n        if (this.node.config.SKIP_NEAR_WIN_TURBO === true && this.node.gSlotDataStore.modeTurbo === true) {\n            this.skipNearWin = true;\n        }else{\n            this.skipNearWin = false;\n        }\n    },\n    adjustReelDelay({reels, data}) {\n        let countScatter = 0;\n        let countBonus = 0;\n        this.nearWinList = [];\n\n        for (let col = 0; col < data.length; ++col) {\n            const isNearWinScatter = countScatter >= 2;\n            const isNearWinBonus = countBonus >= 2;\n            const isNearWin = isNearWinScatter || isNearWinBonus;\n\n            for (let row = 0; row < data[col].length; ++row) {\n                const symbolValue = data[col][row];\n                if (symbolValue === 'R') {\n                    countBonus++;\n                } else if (symbolValue === 'A') {\n                    countScatter++;\n                }\n            }\n\n            if (isNearWin) {\n                this.nearWinList[col] = {isNearWinScatter, isNearWinBonus, isNearWin};\n                reels[col].extendTimeToStop();\n            }\n\n            this.getFirstNearWin = countBonus >= this.stopAtBonusNumber || countScatter >= this.stopAtScatterNumber;\n        }\n    },\n    reelStopNearWin({count, context}) {\n        //back to normal mode, normal speed....\n        //Where to calculate this???\n        if (this.getFirstNearWin && !context.isFastToResult) {\n            for (let i = count; i < this.node.reels.length; i++) {\n                this.node.reels[i].adjustReelSpeed(this.node.curentConfig.TIME);\n                if (this.nearWinList[i] && this.nearWinList[i].isNearWin) {\n                    this.nearWinList[i].isNearWin = false;\n                }\n            }\n            this.hideParticleList(0, .5);\n            context.isFastToResult = true;\n        }\n\n        if (this.nearWinList[count] && this.nearWinList[count].isNearWin && !context.isFastToResult) {\n\n            if (this.playSoundNearWin === false) {\n                this.playSoundNearWin = true;\n                if (this.node.soundPlayer) {\n                    this.nearWinSoundKey = this.node.soundPlayer.playSound(this.sfxNearWin);\n                }\n            }\n            const x = context.getXPosition(count) - this.node.config.TABLE_SHIFT_X - 15;\n            const x1 = context.getXPosition(count + 1) - this.node.config.TABLE_SHIFT_X - 15;\n\n            this.activeParticleList({ isActive: true, opacity: 255 });\n            this.setPosParticleList([x, x1]);\n\n            for (let i = count; i < this.node.reels.length; i++) {\n                this.node.reels[i].adjustReelSpeed(this.node.config.SUPER_TURBO);\n            }\n\n            if (count === (this.node.reels.length - 1)) {\n                cc.director.getScheduler().schedule(function(){\n                    this.node.reels[count].adjustReelSpeed(this.node.curentConfig.TIME);\n                }, this, 0, 0, 1, false);\n            }\n\n            //TODO: wonder do we need to\n            if (this.nearWinList[count].isNearWinScatter) {\n                this.runAnimationNearWin('A', count);\n            }\n\n            if (this.nearWinList[count].isNearWinBonus) {\n                this.runAnimationNearWin('R', count);\n            }\n        }\n        if (count >= this.node.reels.length) {\n            if (this.nearWinList[count - 1] && this.nearWinList[count - 1].isNearWinScatter < 3 && this.nearWinList[count - 1].isNearWinBonus < 3) {\n                this.clearBonusPaylines();\n            }\n            this.hideParticleList({ isActive: false });\n        }\n    },\n    hideParticleList() {\n        // will do making some animation on these particles late.\n        // currently will hidden right now.\n        this.activeParticleList({ isActive: false, opacity: 0 });\n        if (this.node.soundPlayer && this.nearWinSoundKey) {\n            this.node.soundPlayer.stopSound(this.nearWinSoundKey);\n            this.nearWinSoundKey = null;\n        }\n    },\n    activeParticleList(object) {\n        for (let i = 0; i < this.particleList.length; i++) {\n            const item = this.particleList[i];\n            if (object.isActive !== undefined) {\n                item.active = object.isActive;\n            }\n            if (object.opacity !== undefined) {\n                item.opacity = object.opacity;\n            }\n        }\n    },\n    setPosParticleList(posArr) {\n        for (let i = 0; i < this.particleList.length; i++) {\n            this.particleList[i].x = posArr[i];\n        }\n    },\n\n    clearBonusPaylines(){},\n    runAnimationNearWin(){},\n});\n"]}