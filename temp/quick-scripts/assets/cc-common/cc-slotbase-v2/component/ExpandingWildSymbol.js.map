{"version":3,"sources":["ExpandingWildSymbol.js"],"names":["cc","Class","extends","require","properties","spineExpand","Node","spineIdle","winEff","default","type","idleAnimation","expandAnimations","String","expandTopPosY","expandMidPosY","expandBotPosY","onLoad","_super","node","playSpineAnimation","bind","reset","_spineSkeletonExp","getComponent","sp","Skeleton","_spineSkeletonIdle","row","active","stopAllActions","opacity","y","animationName","length","setCompleteListener","runAction","sequence","delayTime","callFunc","setAnimation","forEach","item","playAnimation","animationControl","stopAnimation"],"mappings":"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","file":"ExpandingWildSymbol.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/component","sourcesContent":["\n\ncc.Class({\n    extends: require(\"SlotSymbolPayline\"),\n\n    properties: {\n        spineExpand: cc.Node,\n        spineIdle: cc.Node,\n        winEff: {\n            default: [],\n            type: cc.Node,\n        },\n        idleAnimation: \"\",\n        expandAnimations:{\n            type: cc.String,\n            default: [],\n        },\n\n        expandTopPosY: 160,\n        expandMidPosY: 0,\n        expandBotPosY: -160,\n    },\n\n    onLoad() {\n        this._super();\n        this.node.playSpineAnimation = this.playSpineAnimation.bind(this);\n        this.node.reset = this.reset.bind(this);\n        \n        if (this.spineExpand){\n            this._spineSkeletonExp = this.spineExpand.getComponent(sp.Skeleton);\n        }\n\n        if (this.spineIdle){\n            this._spineSkeletonIdle = this.spineIdle.getComponent(sp.Skeleton);\n        }\n    },\n    \n    playSpineAnimation(row) {\n        if (this._spineSkeletonExp) {\n            this.spineExpand.active = true;\n            this.spineExpand.stopAllActions();\n            this.spineExpand.opacity = 255;\n            if (row == 0) {\n                this.spineExpand.y = this.expandTopPosY;\n            } else if (row == 1) {\n                this.spineExpand.y = this.expandMidPosY;\n            } else if (row == 2) {\n                this.spineExpand.y = this.expandBotPosY;\n            }\n            let animationName = \"\";\n            if (row >= 0 && row < this.expandAnimations.length) {\n                animationName = this.expandAnimations[row];\n            }\n            this._spineSkeletonIdle && this._spineSkeletonIdle.setCompleteListener(()=>{});\n            this._spineSkeletonExp.setCompleteListener(() => {\n                this._spineSkeletonExp.setCompleteListener(()=>{});\n                if(this.spineIdle){\n                    this.spineExpand.runAction(cc.sequence(cc.delayTime(0.01), cc.callFunc(()=>{\n                        this.spineExpand.active = false;\n                    })));\n                    this.spineIdle.opacity = 255;\n                    this.spineIdle.active = true;\n                    this._spineSkeletonIdle.setAnimation(0, this.idleAnimation, true);\n                }\n            });\n            this._spineSkeletonExp.setAnimation(0, animationName, false);\n        }\n    },\n\n    reset() {\n        if (this.spineExpand) {\n            this.spineExpand.stopAllActions();\n            this.spineExpand.opacity = 0;\n            this.spineExpand.active = false;\n        }\n        if(this.spineIdle){\n            this.spineIdle.opacity = 0;\n            this.spineIdle.active = false;\n        }\n\n        this.winEff.forEach((item) => {\n            item.active = false;\n        });\n    },\n\n    playAnimation(row) {\n        this.winEff[row].active = true;\n        let animationControl = this.winEff[row].getComponent('AnimationControl');\n        if(animationControl){\n            animationControl.playAnimation('', 0.8, true, false);\n        }\n    },\n    stopAnimation(row) {\n        this.winEff[row].active = false;\n    },\n});\n"]}