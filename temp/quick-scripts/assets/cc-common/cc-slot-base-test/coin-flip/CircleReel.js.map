{"version":3,"sources":["CircleReel.js"],"names":["cc","Class","extends","Component","properties","rotateSpeed","radius","slotNum","reelSymbols","symbolPrefab","type","Prefab","default","cameraZ","onLoad","deltaAngle","reelAngleX","Math","floor","startAngleX","symbols","i","symbol","instantiate","setParent","node","push","scheduleOnce","isSpining","lastStep","start","maxSkew","x","updateSymbols","update","dt","step","abs","circularSymbols","topSlot","lastSymbol","pop","unshift","children","length","position3d","getPosition3D","scale","z","posX","posY","y","setPosition","zIndex","eulerAngles","Vec3","angle","anglePos","toFixed","skewX","opacity","radian","PI","cos","sin","position"],"mappings":"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","file":"CircleReel.js","sourceRoot":"../../../../../../assets/cc-common/cc-slot-base-test/coin-flip","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rotateSpeed: 100,\n        radius: 100,\n        slotNum: 10,\n        reelSymbols: 5,\n        symbolPrefab: {\n            type: cc.Prefab,\n            default: null\n        },\n        cameraZ: 300,\n    },\n\n    onLoad() {\n\n        this.deltaAngle = 360 / this.slotNum;\n        this.reelAngleX = Math.floor(this.reelSymbols / 2) * this.deltaAngle - 360;\n        this.startAngleX = this.reelAngleX;\n        this.symbols = [];\n\n        for (let i=0; i < this.reelSymbols; i++) {\n            const symbol = cc.instantiate(this.symbolPrefab);\n            symbol.setParent(this.node);\n            symbol.slotNum = i;\n            this.symbols.push(symbol);\n        }\n\n        this.scheduleOnce(()=>{\n            this.isSpining = true;\n        }, 3);\n        this.lastStep = 0;\n    },\n\n    start() {\n        this.maxSkew = -(this.node.x / 100);\n        this.updateSymbols();\n    },\n\n    update(dt) {\n        if (this.isSpining) {\n            this.reelAngleX -= this.rotateSpeed * dt;\n            this.updateSymbols();\n            this.step = Math.floor(Math.abs((this.reelAngleX - this.startAngleX) / this.deltaAngle));\n            if (this.step > this.lastStep) {\n                this.circularSymbols();\n                this.lastStep = this.step;\n            }\n        }\n    },\n\n    circularSymbols() {\n        const topSlot = (this.symbols[0].slotNum > 0) ? (this.symbols[0].slotNum - 1) : (this.slotNum - 1);\n        const lastSymbol = this.symbols.pop();\n        lastSymbol.slotNum = topSlot;\n        this.symbols.unshift(lastSymbol);\n    },\n\n    updateSymbols() {\n        for (let i=0; i < this.node.children.length; i++) {\n            const symbol = this.node.children[i];\n            const position3d = this.getPosition3D(symbol.slotNum);\n            const scale = this.cameraZ / (this.cameraZ - position3d.z);\n            const posX = position3d.x * scale;\n            const posY = position3d.y * scale;\n            symbol.scale = scale;\n            symbol.setPosition(posX, posY, 0);\n            symbol.zIndex = position3d.z;\n            symbol.eulerAngles = new cc.Vec3(-position3d.angle, 0, 0);\n\n            const anglePos = Math.abs((position3d.angle / 360).toFixed(2));\n\n            if (anglePos > 0 && anglePos < 0.25) {\n                symbol.skewX = - 10 * anglePos * this.maxSkew;\n                symbol.opacity = 255;\n            }\n            else if (anglePos >= 0.75 && anglePos < 1) {\n                symbol.skewX = 10 * (1 - anglePos) * this.maxSkew;\n                symbol.opacity = 255;\n            }\n            else if (anglePos > 0.25 && anglePos < 0.75) {\n                symbol.opacity = 0;\n            }\n            else {\n                symbol.skewX = 0;\n                symbol.opacity = 255;\n            }\n\n            //debug info\n            //symbol.getComponentInChildren(cc.Label).string = (position3d.angle / 360).toFixed(2);\n        }\n    },\n\n    getPosition3D(slotNum) {\n        const angle = (this.reelAngleX - slotNum * this.deltaAngle) % 360;\n        const radian = angle * Math.PI / 180;\n        const z = Math.cos(radian) * this.radius;\n        const y = Math.sin(radian) * this.radius;\n        return {x: this.node.position.x, y, z, angle};\n    }\n});"]}