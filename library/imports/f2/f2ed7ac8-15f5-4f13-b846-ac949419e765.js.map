{"version":3,"sources":["../../../../../../assets/cc-common/cc-slotbase-v2/component/assets/cc-common/cc-slotbase-v2/component/ParticleSpawnerControl.js"],"names":["PoolFactory","require","cc","Class","extends","Component","properties","poolFactory","type","default","spawnPositions","Node","maxParticleCount","minParticleCount","minMovingSpeed","maxMovingSpeed","movingDirection","Vec2","ONE","particlePrefabName","interval","duration","fromScale","fromScaleVar","toScale","toScaleVar","maxRotationYSpeed","minRotationYSpeed","maxRotationZSpeed","minRotationZSpeed","minInitAngle","maxInitAngle","_isPlaying","isPlaying","get","set","value","visible","spawnOnStart","isLoop","onLoad","_usingObjects","_timer","start","spawn","quantity","getRandomInt","i","particle","getObject","speed","getRandomFloat","rotationYSpeed","_fromScale","_toScale","scaleDelta","rotationZSpeed","initAngle","active","direction","scale","j","length","parentNode","x","Math","random","width","y","height","parent","node","angle","animationControl","getComponent","playAnimation","push","update","dt","reset","stopAnimation","removeObject","min","max","floor"],"mappings":"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","file":"ParticleSpawnerControl.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/component","sourcesContent":["\n\nconst PoolFactory = require('PoolFactory');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poolFactory: {\n            type: PoolFactory,\n            default: null,\n        },\n        spawnPositions: [cc.Node],\n        maxParticleCount: 20,\n        minParticleCount: 15,\n        minMovingSpeed: 10,\n        maxMovingSpeed: 20,\n        movingDirection: cc.Vec2.ONE,\n        particlePrefabName: '',\n        interval: 1,\n        duration: 2,\n        fromScale: 0.1,\n        fromScaleVar: 0.1,\n\n        toScale: 0.05,\n        toScaleVar: 0.05,\n\n        maxRotationYSpeed: 2,\n        minRotationYSpeed: 0.5,\n        maxRotationZSpeed: 2,\n        minRotationZSpeed:-2,\n        minInitAngle: -50,\n        maxInitAngle: 50,\n        _isPlaying: false,\n        isPlaying:{\n            get(){\n                return this._isPlaying;\n            },\n            set(value){\n                this._isPlaying = value;\n            },\n            visible: false,\n        },\n        spawnOnStart: false,\n        isLoop : false,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this._usingObjects = [];\n        this._timer = 0;\n        this.isPlaying = false;\n    },\n\n    start(){\n        if(this.spawnOnStart){\n            this.spawn();\n        }\n    },\n\n    spawn(){\n        const quantity = this.getRandomInt(this.minParticleCount, this.maxParticleCount);\n        for(let i = 0; i<quantity; i++){\n            if(this.poolFactory){\n                const particle = this.poolFactory.getObject(this.particlePrefabName);\n                const speed = this.getRandomFloat(this.minMovingSpeed, this.maxMovingSpeed);\n                const rotationYSpeed = this.getRandomFloat(this.minRotationYSpeed, this.maxRotationYSpeed);\n                const _fromScale = this.fromScale + this.getRandomFloat(-this.fromScaleVar, this.fromScaleVar);\n                const _toScale = this.toScale + this.getRandomFloat(-this.toScaleVar, this.toScaleVar);\n                const scaleDelta = _toScale - _fromScale;\n                const rotationZSpeed = this.getRandomFloat(this.minRotationZSpeed, this.maxRotationZSpeed);\n                const initAngle = this.getRandomFloat(this.minInitAngle, this.maxInitAngle);\n                if(particle){\n                    particle.active = true;\n                    particle.speed = speed;\n                    particle.direction = this.movingDirection;\n                    particle.scaleDelta = scaleDelta;\n                    particle.scale = _fromScale;\n                    particle.rotationZSpeed = rotationZSpeed;\n                    const j = i%this.spawnPositions.length;\n                    const parentNode = this.spawnPositions[j];\n                    if(parentNode){\n                        particle.x = Math.random()*parentNode.width - parentNode.width/2;\n                        particle.y = Math.random()*parentNode.height - parentNode.height/2;\n                        particle.parent = parentNode;\n                    }else{\n                        particle.x = Math.random()*this.node.width - this.node.width/2;\n                        particle.y = Math.random()*this.node.height - this.node.height/2;\n                        particle.parent = this.node;\n                    }\n                    particle.angle = initAngle;\n\n                    const animationControl = particle.getComponent('AnimationControl');\n                    if(animationControl){\n                        animationControl.playAnimation('', rotationYSpeed, true);\n                    }\n                    this._usingObjects.push(particle);\n                }\n            }\n        }\n        this.isPlaying = true;\n    },\n\n    update(dt){\n        if(this._isPlaying){\n            this._timer += dt;\n            if(this._timer>=this.interval){\n                for(let i = 0; i<this._usingObjects.length; i++){\n                    const particle = this._usingObjects[i];\n                    if(particle){\n                        const direction = particle.direction;\n                        const speed = particle.speed;\n                        const scaleDelta = particle.scaleDelta;\n                        const rotationZSpeed = particle.rotationZSpeed;\n                        particle.scale += dt * scaleDelta/this.duration;\n                        particle.x += direction.x * speed*dt;\n                        particle.y += direction.y * speed*dt;\n                        particle.angle += rotationZSpeed;\n                    }\n                }\n            }\n            if(this._timer>= this.duration + this.interval){\n                this.reset();\n                if(this.isLoop){\n                    this.spawn();\n                }\n            }\n        }\n    },\n\n    reset(){\n        for(let i = 0; i<this._usingObjects.length; i++){\n            const particle = this._usingObjects[i];\n            const animationControl = particle.getComponent('AnimationControl');\n            if(animationControl){\n                animationControl.stopAnimation();\n            }\n            if(particle && this.poolFactory){\n                this.poolFactory.removeObject(particle);\n            }\n        }\n        this._usingObjects = [];\n        this._timer = 0;\n        this._isPlaying = false;\n    },\n\n    getRandomFloat(min, max){\n        return Math.random()*(max-min) + min;\n    },\n\n    getRandomInt(min, max){\n        return Math.floor(this.getRandomFloat(min, max));\n    }\n});\n"]}