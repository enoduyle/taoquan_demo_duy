{"version":3,"sources":["DataStore9983.js"],"names":["BetDataStore","require","convertSlotMatrixTBLR","cc","Class","extends","properties","onLoad","node","gSlotDataStore","slotBetDataStore","playSession","lastEvent","modeTurbo","isAutoSpin","spinTimes","gameId","isEnableBGM","isEnableSFX","createDefaultBet","config","formatData","bind","convertSlotMatrix","convertPayLine","payLines","listNewPL","i","length","dataSplit","split","push","payLineSymbol","payLineWinAmount","paylineMaxColumn","payLineWinNumbers","parseInt","payableSymbol","wildMultiplier","TABLE_FORMAT","normalGameResult","freeGameResult","freeSpinOptionResult","tableFormat","type","freeGameTableFormat","normalGameTableFormat","matrix","matrixTransform0","matrixTransform1","matrixTransform2"],"mappings":"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","file":"DataStore9983.js","sourceRoot":"../../../../../../assets/cc-taoquan-9983/scripts/common","sourcesContent":["const BetDataStore = require('MoneyDataStore');\nconst { convertSlotMatrixTBLR } = require('utils');\n\ncc.Class({\n    extends: require('DataStore'),\n    properties: {\n\n    },\n\n    onLoad() {\n        this.node.gSlotDataStore = {\n            slotBetDataStore: new BetDataStore(),\n            playSession: {},\n            lastEvent: {},\n            modeTurbo: false,\n            isAutoSpin: false,\n            spinTimes: 0,\n            gameId: \"9000\",\n            isEnableBGM: false,\n            isEnableSFX: false,\n        };\n        this.node.gSlotDataStore.gameId = this.gameId;\n        this.node.gSlotDataStore.isEnableBGM = this.isEnableBGM;\n        this.node.gSlotDataStore.isEnableSFX = this.isEnableSFX;\n        this.node.gSlotDataStore.slotBetDataStore.createDefaultBet(this.node.config);\n\n        this.node.gSlotDataStore.formatData = this.formatData.bind(this);\n        this.node.gSlotDataStore.convertSlotMatrix = convertSlotMatrixTBLR.bind(this);\n        this.node.gSlotDataStore.convertPayLine = this.convertPayLine.bind(this);\n    },\n\n\n    convertPayLine (payLines = []){\n        const listNewPL = [];\n        for (let i = 0; i < payLines.length; i++) {\n            const dataSplit = payLines[i].split(';');\n            if (dataSplit.length >= 3) {\n                listNewPL.push({\n                    payLineSymbol: dataSplit[0],\n                    payLineWinAmount: dataSplit[1],\n                    paylineMaxColumn: dataSplit[2],\n                    payLineWinNumbers: parseInt(dataSplit[3]),\n                    payableSymbol: dataSplit[4],\n                    wildMultiplier: dataSplit[5]\n                });\n            }\n        }\n        return listNewPL;\n    },\n\n\n    formatData(playSession) {\n        const { TABLE_FORMAT } = this.node.config;\n        this.node.gSlotDataStore.playSession = playSession;\n        let lastEvent;\n\n        const { normalGameResult, freeGameResult, freeSpinOptionResult } = playSession.lastEvent;\n        let tableFormat = TABLE_FORMAT;\n        if (freeGameResult) {\n            lastEvent = freeGameResult;\n            lastEvent.type = \"freeGame\";\n\n            const { freeGameTableFormat } = this.node.gSlotDataStore.playSession;\n            if (freeGameTableFormat) tableFormat = freeGameTableFormat;\n        } else if (freeSpinOptionResult) {\n            lastEvent = freeSpinOptionResult;\n            lastEvent.type = \"freeSpinOptionResult\";\n        } else {\n            lastEvent = normalGameResult;\n            lastEvent.type = \"normalGame\";\n            const { normalGameTableFormat } = this.node.gSlotDataStore.playSession;\n            if (normalGameTableFormat) tableFormat = normalGameTableFormat;\n        }\n\n        if (lastEvent.matrix) {\n            lastEvent.matrix = this.node.gSlotDataStore.convertSlotMatrix(lastEvent.matrix, tableFormat);\n        }\n        if (lastEvent.matrixTransform0) {\n            lastEvent.matrixTransform0 = this.node.gSlotDataStore.convertSlotMatrix(lastEvent.matrixTransform0, tableFormat);\n        }\n        if (lastEvent.matrixTransform1) {\n            lastEvent.matrixTransform1 = this.node.gSlotDataStore.convertSlotMatrix(lastEvent.matrixTransform1, tableFormat);\n        }\n        if (lastEvent.matrixTransform2) {\n            lastEvent.matrixTransform2 = this.node.gSlotDataStore.convertSlotMatrix(lastEvent.matrixTransform2, tableFormat);\n        }\n        if (lastEvent.payLines) {\n            lastEvent.payLines = this.node.gSlotDataStore.convertPayLine(lastEvent.payLines);\n        }\n\n        this.node.gSlotDataStore.lastEvent = lastEvent;\n        return lastEvent;\n    },\n});"]}