{"version":3,"sources":["../../../../../../../assets/cc-common/cc-slot-base-test/Table3D/scripts/assets/cc-common/cc-slot-base-test/Table3D/scripts/SlotReel3D.js"],"names":["cc","Class","extends","Component","properties","reel","Node","onLoad","node","mainComponent","MAX_STEP","Number","MAX_SAFE_INTEGER","_symbols","init","showNumber","gameConfig","col","symbolPrefab","CIRCLE_ANGLE","SYMBOLS_PER_REEL","SYMBOL_HEIGHT","SYMBOL_NAME_LIST","config","symbolList","showSymbols","bufferSymbols","TABLE_SYMBOL_BUFFER","TOP","BOT","totalNumber","symbolStartY","TABLE_FORMAT","slotAngle","startAngle","symbolsPerReel","reelRadius","Math","round","tan","PI","index","symbol","instantiate","name","parent","setSymbolValue","changeToSymbol","getRandomSymbolName","unshift","mode","curentConfig","STATS","reset","angle","getAngle","y","getCircleY","z","getCircleZ","eulerAngles","v3","radius","radian","cos","sin","floor","random","length","stop","step","showResult","matrix","setMode","calculateAngle","pixel","startSpinningWithDelay","delay","isFastToResult","currentSpeed","TIME","tweenSpinning","tween","REEL_DELAY_START","by","call","runSpinning","start","runSpinningAnimation","delayIndex","isNearWin","runStopAnimation","REEL_EASING_DISTANCE","REEL_EASING_TIME","stopSpinningWithDelay","callback","callbackStopReel","reelDelayStop","REEL_DELAY_STOP","director","getScheduler","schedule","setStepToStop","getRandomSymbolNameWithException","push","STEP_STOP","fastStopSpinning","unschedule","indexNearWin","time","timer","onReelStop","circularSymbols","lastSymbol","changeToBlurSymbol","isRealSymbol","symbolValue","getShowSymbol","exceptionSymbol","getRandomSymbolNameWithExceptions","exceptionSymbols","remainSymbols","defaultSymbol","i","res","j","exception"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,cAAML,GAAGM;AADD,KAHP;;AAOLC,UAPK,oBAOI;AACL,aAAKC,IAAL,CAAUC,aAAV,GAA0B,IAA1B;AACA,aAAKC,QAAL,GAAgBC,OAAOC,gBAAvB;AACA,aAAKC,QAAL,GAAgB,EAAhB;AACH,KAXI;AAaLC,QAbK,gBAaAC,UAbA,EAaYC,UAbZ,EAawBC,GAbxB,EAa6BC,YAb7B,EAa2C;AAAA,YACpCC,YADoC,GACgCH,UADhC,CACpCG,YADoC;AAAA,YACtBC,gBADsB,GACgCJ,UADhC,CACtBI,gBADsB;AAAA,YACJC,aADI,GACgCL,UADhC,CACJK,aADI;AAAA,YACWC,gBADX,GACgCN,UADhC,CACWM,gBADX;;AAE5C,aAAKL,GAAL,GAAWA,GAAX;AACA,aAAKM,MAAL,GAAcP,UAAd;AACA,aAAKQ,UAAL,GAAkBF,iBAAiBL,GAAjB,CAAlB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKH,UAAL,GAAkBA,UAAlB;AACA,aAAKU,WAAL,GAAmB,EAAnB;AACA,YAAMC,gBAAgB,KAAKH,MAAL,CAAYI,mBAAZ,CAAgCC,GAAhC,GAAsC,KAAKL,MAAL,CAAYI,mBAAZ,CAAgCE,GAA5F;AACA,aAAKC,WAAL,GAAmB,KAAKf,UAAL,GAAkBW,aAArC;AACA,aAAKK,YAAL,GAAoB,EAAG,KAAKR,MAAL,CAAYS,YAAZ,CAAyBf,GAAzB,IAAgC,CAAhC,GAAoC,KAAKM,MAAL,CAAYI,mBAAZ,CAAgCE,GAApE,GAA0E,GAA7E,IAAoFR,aAAxG;AACA,aAAKY,SAAL,GAAiBd,eAAeC,gBAAhC;AACA,aAAKc,UAAL,GAAkB,CAAC,KAAKD,SAAN,GAAkBP,aAApC;AACA,aAAKS,cAAL,GAAsBf,gBAAtB;AACA;AACA,aAAKgB,UAAL,GAAkBC,KAAKC,KAAL,CAAYjB,gBAAgB,CAAjB,GAAsBgB,KAAKE,GAAL,CAASF,KAAKG,EAAL,GAAU,KAAKL,cAAxB,CAAjC,CAAlB;AACA,aAAK,IAAIM,QAAQ,CAAjB,EAAoBA,QAAQ,KAAKX,WAAjC,EAA8C,EAAEW,KAAhD,EAAuD;AACnD,gBAAMC,SAAS1C,GAAG2C,WAAH,CAAe,KAAKzB,YAApB,CAAf;AACAwB,mBAAOE,IAAP,GAAc,YAAYH,KAA1B;AACAC,mBAAOG,MAAP,GAAgB,KAAKxC,IAArB;;AAEA,iBAAKyC,cAAL,CAAoBJ,MAApB,EAA4BD,KAA5B;AACAC,mBAAOK,cAAP,CAAsB,KAAKC,mBAAL,EAAtB;AACA,iBAAKnC,QAAL,CAAcoC,OAAd,CAAsBP,MAAtB;AACH;;AAED,aAAKQ,IAAL,GAAY,MAAZ;AACA,aAAKC,YAAL,GAAoB,KAAK5B,MAAL,CAAY6B,KAAZ,CAAkB,KAAKF,IAAvB,CAApB;AACA,aAAKT,KAAL,GAAa,CAAb;AACA,aAAKY,KAAL;AACH,KA3CI;AA6CLP,kBA7CK,0BA6CUJ,MA7CV,EA6CkBD,KA7ClB,EA6CyB;AAC1B,YAAIa,QAAQ,KAAKC,QAAL,CAAcd,KAAd,CAAZ;AACAC,eAAOc,CAAP,GAAW,KAAKC,UAAL,CAAgB,CAACH,KAAjB,EAAwB,KAAKlB,UAA7B,CAAX;AACAM,eAAOgB,CAAP,GAAW,KAAKC,UAAL,CAAgB,CAACL,KAAjB,EAAwB,KAAKlB,UAA7B,CAAX;AACAM,eAAOkB,WAAP,GAAqB5D,GAAG6D,EAAH,CAAMP,KAAN,EAAa,CAAb,EAAgB,CAAhB,CAArB;AACAZ,eAAOkB,WAAP,GAAqB5D,GAAG6D,EAAH,CAAMP,KAAN,EAAa,CAAb,EAAgB,CAAhB,CAArB;AACH,KAnDI;AAqDLK,cArDK,sBAqDML,KArDN,EAqDaQ,MArDb,EAqDqB;AACtB,YAAMC,SAAUT,QAAQjB,KAAKG,EAAd,GAAoB,GAAnC;AACA,eAAOH,KAAK2B,GAAL,CAASD,MAAT,IAAmBD,MAA1B;AACH,KAxDI;AA0DLL,cA1DK,sBA0DMH,KA1DN,EA0DaQ,MA1Db,EA0DqB;AACtB,YAAMC,SAAUT,QAAQjB,KAAKG,EAAd,GAAoB,GAAnC;AACA,eAAOH,KAAK4B,GAAL,CAASF,MAAT,IAAmBD,MAA1B;AACH,KA7DI;AA+DLP,YA/DK,oBA+DId,KA/DJ,EA+DW;AACZ,YAAIa,QAAQ,KAAKpB,UAAL,GAAmB,KAAKD,SAAL,GAAiBQ,KAAhD;AACA,eAAOa,KAAP;AACH,KAlEI;AAoELN,uBApEK,iCAoEiB;AAClB,eAAO,KAAKxB,UAAL,CAAgBa,KAAK6B,KAAL,CAAW7B,KAAK8B,MAAL,KAAgB,KAAK3C,UAAL,CAAgB4C,MAA3C,CAAhB,CAAP;AACH,KAtEI;AAwELf,SAxEK,mBAwEG;AACJ,aAAKgB,IAAL,GAAY,CAAZ;AACA,aAAKC,IAAL,GAAY,KAAK5D,QAAjB;AACA,aAAK6D,UAAL,GAAkB,CAAlB;AACA,aAAKC,MAAL,GAAc,EAAd;AACH,KA7EI;AA+ELC,WA/EK,mBA+EGvB,IA/EH,EA+ES;AACV,aAAKA,IAAL,GAAYA,IAAZ;AACH,KAjFI;AAmFLwB,kBAnFK,0BAmFUC,KAnFV,EAmFiB;AAClB,eAAQA,QAAQ,KAAKpD,MAAL,CAAYF,aAArB,GAAsC,KAAKY,SAAlD;AACH,KArFI;AAuFL2C,0BAvFK,kCAuFkBC,KAvFlB,EAuFyB;AAAA;;AAC1B,aAAKP,IAAL,GAAY,KAAK5D,QAAL,GAAgB,CAA5B;AACA,aAAKoE,cAAL,GAAsB,KAAtB;AACA,aAAK3B,YAAL,GAAoB,KAAK5B,MAAL,CAAY6B,KAAZ,CAAkB,KAAKF,IAAvB,CAApB;AACA,aAAK6B,YAAL,GAAoB,KAAK5B,YAAL,CAAkB6B,IAAtC;;AAEA,YAAM1B,QAAQ,KAAKoB,cAAL,CAAoB,EAApB,CAAd;AACA,aAAKO,aAAL,GAAqBjF,GAAGkF,KAAH,CAAS,KAAK7E,IAAd,EAChBwE,KADgB,CACVA,QAAQ,KAAK1B,YAAL,CAAkBgC,gBADhB,EAEhBC,EAFgB,CAEb,KAAKL,YAFQ,EAEM,EAAEnB,aAAa5D,GAAG6D,EAAH,CAAM,CAACP,KAAP,EAAc,CAAd,EAAiB,CAAjB,CAAf,EAFN,EAGhB8B,EAHgB,CAGb,KAAKL,YAHQ,EAGM,EAAEnB,aAAa5D,GAAG6D,EAAH,CAAMP,KAAN,EAAa,CAAb,EAAgB,CAAhB,CAAf,EAHN,EAIhB+B,IAJgB,CAIX,YAAM;AACR,kBAAKC,WAAL;AACH,SANgB,EAOhBC,KAPgB,EAArB;AAQH,KAtGI;AAwGLD,eAxGK,yBAwGS;AAAA;;AACV,aAAKE,oBAAL,CAA0B,YAAM;AAC5B,gBAAI,OAAKlB,IAAL,GAAY,OAAKvD,UAArB,EAAiC;AAC7B,uBAAKuE,WAAL;AACA,uBAAKhB,IAAL;AACA,oBAAI,OAAKA,IAAL,GAAY,OAAKxC,WAArB,EAAkC;AAC9B,2BAAKyC,UAAL,GAAkB,CAAlB;AACH;AACJ,aAND,MAMO,IAAI,OAAKD,IAAL,IAAa,OAAKvD,UAAtB,EAAkC;AACrC;AACA,oBAAI,OAAK0E,UAAL,KAAqB,OAAKlE,MAAL,CAAYS,YAAZ,CAAyBoC,MAAzB,GAAkC,CAAvD,IAA6D,OAAKsB,SAAlE,IAA+E,CAAC,OAAKZ,cAAzF,EAAyG;AACrG,2BAAKa,gBAAL,CAAsB,EAAtB,EAA0B,GAA1B;AACH,iBAFD,MAEO;AACH,2BAAKA,gBAAL,CAAsB,OAAKxC,YAAL,CAAkByC,oBAAxC,EAA8D,OAAKzC,YAAL,CAAkB0C,gBAAhF;AACH;AACJ;AACJ,SAfD;AAgBH,KAzHI;AA2HLC,yBA3HK,iCA2HiBjB,KA3HjB,EA2H+C;AAAA,YAAvBL,MAAuB,uEAAd,EAAc;AAAA,YAAVuB,QAAU;;AAChD,aAAKN,UAAL,GAAkBZ,KAAlB;AACA,aAAKpD,WAAL,GAAmB,EAAnB;AACA,aAAK+C,MAAL,GAAcA,MAAd;AACA,aAAKwB,gBAAL,GAAwBD,WAAWA,QAAX,GAAsB,YAAM,CAAG,CAAvD;AACA,YAAIE,gBAAgBpB,QAAQ,KAAK1B,YAAL,CAAkB+C,eAA9C;AACA,aAAKR,SAAL,GAAiB,KAAjB;;AAEA,aAAKb,KAAL,GAAaA,KAAb;AACA7E,WAAGmG,QAAH,CAAYC,YAAZ,GAA2BC,QAA3B,CAAoC,KAAKC,aAAzC,EAAwD,IAAxD,EAA8D,CAA9D,EAAiE,CAAjE,EAAoEL,aAApE,EAAmF,KAAnF;;AAEA,aAAKzB,MAAL,CAAYvB,OAAZ,CAAoB,KAAKsD,gCAAL,CAAsC,GAAtC,CAApB;;AAEA,YAAI,KAAKhF,MAAL,CAAYI,mBAAZ,CAAgCE,GAAhC,GAAsC,CAA1C,EAA6C;AACzC,iBAAK2C,MAAL,CAAYgC,IAAZ,CAAiB,KAAKD,gCAAL,CAAsC,GAAtC,CAAjB;AACH;AACJ,KA3II;AA6ILD,iBA7IK,2BA6IW;AACZ,aAAKhC,IAAL,GAAY,KAAKnB,YAAL,CAAkBsD,SAAlB,GAA8B,CAA9B,GAAkC,KAAK3E,WAAnD;AACH,KA/II;AAiJL4E,oBAjJK,8BAiJc;AACf,YAAI,KAAKpC,IAAL,KAAc,KAAK5D,QAAvB,EAAiC;AACjC,aAAKoE,cAAL,GAAsB,IAAtB;AACA9E,WAAGmG,QAAH,CAAYC,YAAZ,GAA2BO,UAA3B,CAAsC,KAAKL,aAA3C,EAA0D,IAA1D;AACA,aAAK/B,UAAL,GAAkB,CAAlB;AACA,aAAKQ,YAAL,GAAoB,KAAKA,YAAL,GAAoB,CAAxC;AACH,KAvJI;AAyJLY,oBAzJK,4BAyJYiB,YAzJZ,EAyJ0BC,IAzJ1B,EAyJgC;AAAA;;AACjC,YAAMvD,QAAQ,KAAKoB,cAAL,CAAoBkC,YAApB,CAAd;AACA,YAAME,QAAQD,OAAOA,IAAP,GAAc,KAAK1D,YAAL,CAAkB6B,IAA9C;AACA,aAAK+B,UAAL;AACA,aAAK9B,aAAL,GAAqBjF,GAAGkF,KAAH,CAAS,KAAK7E,IAAd,EAChB+E,EADgB,CACb0B,KADa,EACN,EAAElD,aAAa5D,GAAG6D,EAAH,CAAMP,KAAN,EAAa,CAAb,EAAgB,CAAhB,CAAf,EADM,EAEhB8B,EAFgB,CAEb0B,KAFa,EAEN,EAAElD,aAAa5D,GAAG6D,EAAH,CAAM,CAACP,KAAP,EAAc,CAAd,EAAiB,CAAjB,CAAf,EAFM,EAGhB+B,IAHgB,CAGX,YAAM;AACR,mBAAKhC,KAAL;AACA,mBAAK2C,gBAAL;AACAhG,eAAGmG,QAAH,CAAYC,YAAZ,GAA2BO,UAA3B,CAAsC,OAAKL,aAA3C;AACA,mBAAKvB,YAAL,GAAoB,OAAK5B,YAAL,CAAkB6B,IAAtC;AACH,SARgB,EAShBO,KATgB,EAArB;AAUH,KAvKI;AAyKLwB,cAzKK,wBAyKQ,CAAG,CAzKX;AA2KLvB,wBA3KK,gCA2KgBO,QA3KhB,EA2K0B;AAAA;;AAC3B,YAAIc,OAAO,KAAK9B,YAAL,GAAoB,KAAKA,YAAL,GAAoB,KAAKV,IAAzB,GAAgC,CAA/D;AACA,aAAKY,aAAL,GAAqBjF,GAAGkF,KAAH,CAAS,KAAK7E,IAAd,EAChB+E,EADgB,CACbyB,IADa,EACP,EAAEjD,aAAa5D,GAAG6D,EAAH,CAAM,KAAK5B,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAf,EADO,EAEhBoD,IAFgB,CAEX,YAAM;AACR,mBAAK2B,eAAL;AACAjB,wBAAYA,UAAZ;AACH,SALgB,EAMhBR,KANgB,EAArB;AAOH,KApLI;AAsLLyB,mBAtLK,6BAsLa;AACd,YAAMC,aAAa,KAAKpG,QAAL,CAAc,KAAK4B,KAAL,GAAc,KAAKX,WAAjC,CAAnB;AACA,YAAI,CAAC,KAAKyC,UAAV,EAAsB;AAClB0C,uBAAWC,kBAAX,CAA8B,KAAKlE,mBAAL,EAA9B;AACH,SAFD,MAEO,IAAI,KAAKqB,IAAL,GAAY,KAAKvC,WAArB,EAAkC;AACrC,gBAAIqF,eAAe,KAAK9C,IAAL,IAAa,KAAK9C,MAAL,CAAYI,mBAAZ,CAAgCC,GAA7C,IAAoD,KAAKyC,IAAL,GAAY,KAAKtD,UAAL,GAAkB,KAAKQ,MAAL,CAAYI,mBAAZ,CAAgCC,GAArI;AACA,gBAAIwF,cAAc,KAAK5C,MAAL,CAAY,KAAKH,IAAjB,CAAlB;AACA,iBAAKC,IAAL,GAAY,KAAKxC,WAAL,GAAmB,KAAKf,UAAxB,IAAsC,KAAKsD,IAAL,GAAY,KAAK9C,MAAL,CAAYI,mBAAZ,CAAgCE,GAAlF,CAAZ;AACA,gBAAIsF,YAAJ,EAAkB;AACdF,2BAAWC,kBAAX,CAA8B,KAAKlE,mBAAL,EAA9B;AACAiE,2BAAWlE,cAAX,CAA0BqE,WAA1B;AACA,qBAAK3F,WAAL,CAAiBwB,OAAjB,CAAyBgE,UAAzB;AACH,aAJD,MAIO;AACHA,2BAAWC,kBAAX,CAA8BE,WAA9B;AACH;AACD,iBAAK/C,IAAL;AACH;AACD,aAAKvB,cAAL,CAAoBmE,UAApB,EAAgC,KAAK9E,cAAL,GAAsB,KAAKM,KAA3B,GAAmC,CAAnE;AACA,aAAKA,KAAL;AACH,KAzMI;AA2ML4E,iBA3MK,yBA2MS5E,KA3MT,EA2MgB;AACjB,eAAO,KAAKhB,WAAL,CAAiBgB,KAAjB,CAAP;AACH,KA7MI;AA+ML8D,oCA/MK,4CA+M4Be,eA/M5B,EA+M6C;AAC9C,YAAI5E,SAAS,KAAKlB,UAAL,CAAgBa,KAAK6B,KAAL,CAAW7B,KAAK8B,MAAL,KAAgB,KAAK3C,UAAL,CAAgB4C,MAA3C,CAAhB,CAAb;AACA,YAAI1B,UAAU4E,eAAd,EAA+B;AAC3B5E,qBAAS,KAAK6D,gCAAL,CAAsCe,eAAtC,CAAT;AACH;;AAED,eAAO5E,MAAP;AACH,KAtNI;AAwNL6E,qCAxNK,6CAwN6BC,gBAxN7B,EAwN+C;AAChD,YAAMC,gBAAgB,EAAtB;AACA,YAAMC,gBAAgB,GAAtB;AACA,YAAI,CAAC,KAAKlG,UAAV,EAAsB,OAAOkG,aAAP,CAH0B,CAGJ;AAC5C,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKnG,UAAL,CAAgB4C,MAApC,EAA4CuD,GAA5C,EAAiD;AAC7C,gBAAMjF,UAAS,KAAKlB,UAAL,CAAgBmG,CAAhB,CAAf;AACA,gBAAIC,MAAM,IAAV;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,iBAAiBpD,MAArC,EAA6CyD,GAA7C,EAAkD;AAC9C,oBAAMC,YAAYN,iBAAiBK,CAAjB,CAAlB;AACA,oBAAInF,WAAUoF,SAAd,EAAyB;AACrBF,0BAAM,KAAN;AACA;AACH;AACJ;AACD,gBAAIA,GAAJ,EAAS;AACLH,8BAAcjB,IAAd,CAAmB9D,OAAnB;AACH;AACJ;AACD,YAAIA,SAAS+E,cAAcpF,KAAK6B,KAAL,CAAW7B,KAAK8B,MAAL,KAAgBsD,cAAcrD,MAAzC,CAAd,CAAb;AACA,eAAO1B,MAAP;AACH;AA5OI,CAAT","file":"SlotReel3D.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slot-base-test/Table3D/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        reel: cc.Node,\n    },\n\n    onLoad() {\n        this.node.mainComponent = this;\n        this.MAX_STEP = Number.MAX_SAFE_INTEGER;\n        this._symbols = [];\n    },\n\n    init(showNumber, gameConfig, col, symbolPrefab) {\n        const { CIRCLE_ANGLE, SYMBOLS_PER_REEL, SYMBOL_HEIGHT, SYMBOL_NAME_LIST } = gameConfig;\n        this.col = col;\n        this.config = gameConfig;\n        this.symbolList = SYMBOL_NAME_LIST[col];\n        this.symbolPrefab = symbolPrefab;\n        this.showNumber = showNumber;\n        this.showSymbols = [];\n        const bufferSymbols = this.config.TABLE_SYMBOL_BUFFER.TOP + this.config.TABLE_SYMBOL_BUFFER.BOT;\n        this.totalNumber = this.showNumber + bufferSymbols;\n        this.symbolStartY = - (this.config.TABLE_FORMAT[col] / 2 + this.config.TABLE_SYMBOL_BUFFER.BOT - 0.5) * SYMBOL_HEIGHT;\n        this.slotAngle = CIRCLE_ANGLE / SYMBOLS_PER_REEL;\n        this.startAngle = -this.slotAngle * bufferSymbols;\n        this.symbolsPerReel = SYMBOLS_PER_REEL;\n        // calculate reel radius\n        this.reelRadius = Math.round((SYMBOL_HEIGHT / 2) / Math.tan(Math.PI / this.symbolsPerReel));\n        for (let index = 0; index < this.totalNumber; ++index) {\n            const symbol = cc.instantiate(this.symbolPrefab);\n            symbol.name = \"Symbol_\" + index;\n            symbol.parent = this.reel;\n\n            this.setSymbolValue(symbol, index);\n            symbol.changeToSymbol(this.getRandomSymbolName());\n            this._symbols.unshift(symbol);\n        }\n\n        this.mode = 'FAST';\n        this.curentConfig = this.config.STATS[this.mode];\n        this.index = 0;\n        this.reset();\n    },\n\n    setSymbolValue(symbol, index) {\n        let angle = this.getAngle(index);\n        symbol.y = this.getCircleY(-angle, this.reelRadius);\n        symbol.z = this.getCircleZ(-angle, this.reelRadius);\n        symbol.eulerAngles = cc.v3(angle, 0, 0);\n        symbol.eulerAngles = cc.v3(angle, 0, 0);\n    },\n\n    getCircleZ(angle, radius) {\n        const radian = (angle * Math.PI) / 180;\n        return Math.cos(radian) * radius;\n    },\n\n    getCircleY(angle, radius) {\n        const radian = (angle * Math.PI) / 180;\n        return Math.sin(radian) * radius;\n    },\n\n    getAngle(index) {\n        let angle = this.startAngle + (this.slotAngle * index);\n        return angle;\n    },\n\n    getRandomSymbolName() {\n        return this.symbolList[Math.floor(Math.random() * this.symbolList.length)];\n    },\n\n    reset() {\n        this.stop = 0;\n        this.step = this.MAX_STEP;\n        this.showResult = 0;\n        this.matrix = [];\n    },\n\n    setMode(mode) {\n        this.mode = mode;\n    },\n\n    calculateAngle(pixel) {\n        return (pixel / this.config.SYMBOL_HEIGHT) * this.slotAngle;\n    },\n\n    startSpinningWithDelay(delay) {\n        this.step = this.MAX_STEP - 1;\n        this.isFastToResult = false;\n        this.curentConfig = this.config.STATS[this.mode];\n        this.currentSpeed = this.curentConfig.TIME;\n\n        const angle = this.calculateAngle(25);\n        this.tweenSpinning = cc.tween(this.reel)\n            .delay(delay * this.curentConfig.REEL_DELAY_START)\n            .by(this.currentSpeed, { eulerAngles: cc.v3(-angle, 0, 0) })\n            .by(this.currentSpeed, { eulerAngles: cc.v3(angle, 0, 0) })\n            .call(() => {\n                this.runSpinning();\n            })\n            .start();\n    },\n\n    runSpinning() {\n        this.runSpinningAnimation(() => {\n            if (this.step > this.showNumber) {\n                this.runSpinning();\n                this.step--;\n                if (this.step < this.totalNumber) {\n                    this.showResult = 1;\n                }\n            } else if (this.step == this.showNumber) {\n                // check last reel, near win and not fast to result\n                if (this.delayIndex === (this.config.TABLE_FORMAT.length - 1) && this.isNearWin && !this.isFastToResult) {\n                    this.runStopAnimation(50, 0.2);\n                } else {\n                    this.runStopAnimation(this.curentConfig.REEL_EASING_DISTANCE, this.curentConfig.REEL_EASING_TIME);\n                }\n            }\n        });\n    },\n\n    stopSpinningWithDelay(delay, matrix = [], callback) {\n        this.delayIndex = delay;\n        this.showSymbols = [];\n        this.matrix = matrix;\n        this.callbackStopReel = callback ? callback : () => { };\n        let reelDelayStop = delay * this.curentConfig.REEL_DELAY_STOP;\n        this.isNearWin = false;\n\n        this.delay = delay;\n        cc.director.getScheduler().schedule(this.setStepToStop, this, 0, 0, reelDelayStop, false);\n\n        this.matrix.unshift(this.getRandomSymbolNameWithException('2'));\n\n        if (this.config.TABLE_SYMBOL_BUFFER.BOT > 0) {\n            this.matrix.push(this.getRandomSymbolNameWithException('3'));\n        }\n    },\n\n    setStepToStop() {\n        this.step = this.curentConfig.STEP_STOP * 2 - this.totalNumber;\n    },\n\n    fastStopSpinning() {\n        if (this.step === this.MAX_STEP) return;\n        this.isFastToResult = true;\n        cc.director.getScheduler().unschedule(this.setStepToStop, this);\n        this.showResult = 1;\n        this.currentSpeed = this.currentSpeed / 3;\n    },\n\n    runStopAnimation(indexNearWin, time) {\n        const angle = this.calculateAngle(indexNearWin);\n        const timer = time ? time : this.curentConfig.TIME;\n        this.onReelStop();\n        this.tweenSpinning = cc.tween(this.reel)\n            .by(timer, { eulerAngles: cc.v3(angle, 0, 0) })\n            .by(timer, { eulerAngles: cc.v3(-angle, 0, 0) })\n            .call(() => {\n                this.reset();\n                this.callbackStopReel();\n                cc.director.getScheduler().unschedule(this.setStepToStop, this);\n                this.currentSpeed = this.curentConfig.TIME;\n            })\n            .start();\n    },\n\n    onReelStop() { },\n\n    runSpinningAnimation(callback) {\n        let time = this.currentSpeed + this.currentSpeed * this.stop / 4;\n        this.tweenSpinning = cc.tween(this.reel)\n            .by(time, { eulerAngles: cc.v3(this.slotAngle, 0, 0) })\n            .call(() => {\n                this.circularSymbols();\n                callback && callback();\n            })\n            .start();\n    },\n\n    circularSymbols() {\n        const lastSymbol = this._symbols[this.index % (this.totalNumber)];\n        if (!this.showResult) {\n            lastSymbol.changeToBlurSymbol(this.getRandomSymbolName());\n        } else if (this.stop < this.totalNumber) {\n            let isRealSymbol = this.stop >= this.config.TABLE_SYMBOL_BUFFER.TOP && this.stop < this.showNumber + this.config.TABLE_SYMBOL_BUFFER.TOP;\n            let symbolValue = this.matrix[this.stop];\n            this.step = this.totalNumber + this.showNumber - (this.stop + this.config.TABLE_SYMBOL_BUFFER.BOT);\n            if (isRealSymbol) {\n                lastSymbol.changeToBlurSymbol(this.getRandomSymbolName());\n                lastSymbol.changeToSymbol(symbolValue);\n                this.showSymbols.unshift(lastSymbol);\n            } else {\n                lastSymbol.changeToBlurSymbol(symbolValue);\n            }\n            this.stop++;\n        }\n        this.setSymbolValue(lastSymbol, this.symbolsPerReel - this.index - 1);\n        this.index++;\n    },\n\n    getShowSymbol(index) {\n        return this.showSymbols[index];\n    },\n\n    getRandomSymbolNameWithException(exceptionSymbol) {\n        let symbol = this.symbolList[Math.floor(Math.random() * this.symbolList.length)];\n        if (symbol == exceptionSymbol) {\n            symbol = this.getRandomSymbolNameWithException(exceptionSymbol);\n        }\n\n        return symbol;\n    },\n\n    getRandomSymbolNameWithExceptions(exceptionSymbols) {\n        const remainSymbols = [];\n        const defaultSymbol = '3';\n        if (!this.symbolList) return defaultSymbol; //case haven't init;\n        for (let i = 0; i < this.symbolList.length; i++) {\n            const symbol = this.symbolList[i];\n            let res = true;\n            for (let j = 0; j < exceptionSymbols.length; j++) {\n                const exception = exceptionSymbols[j];\n                if (symbol == exception) {\n                    res = false;\n                    break;\n                }\n            }\n            if (res) {\n                remainSymbols.push(symbol);\n            }\n        }\n        let symbol = remainSymbols[Math.floor(Math.random() * remainSymbols.length)];\n        return symbol;\n    },\n});\n"]}