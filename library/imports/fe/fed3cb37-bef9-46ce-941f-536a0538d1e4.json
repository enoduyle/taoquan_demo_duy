{
  "__type__": "cc.EffectAsset",
  "_name": "lightsweep",
  "_objFlags": 0,
  "_native": "",
  "properties": {
    "texture": {
      "type": 13,
      "value": null
    },
    "alphaThreshold": {
      "value": 0.5
    }
  },
  "techniques": [
    {
      "passes": [
        {
          "cullMode": 0,
          "blend": true,
          "program": "eb2ec84c91e7bbd4b91399b7d89cff7b0b0c4aaf02799b9acf8e05f9"
        }
      ],
      "layer": 0,
      "stages": [
        "opaque"
      ],
      "queue": 0,
      "priority": 0
    }
  ],
  "shaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\nuniform float iTime;\n\nvoid main () {\n  vec4 color = v_color;\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  float col = sin(v_uv0.y + v_uv0.x * 5. -iTime * 9.) * 0.9;\n  col *= col * col * 0.6;\n  col = clamp(col, 0., 1.);\n  gl_FragColor = color + vec4(col);\n  gl_FragColor.a  = color.a;\n}\n\n\n",
      "defines": [
        {
          "name": "_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_ETC1_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "uniforms": [
        {
          "name": "texture",
          "type": 13,
          "defines": [
            "USE_TEXTURE"
          ]
        },
        {
          "name": "alphaThreshold",
          "type": 4,
          "property": true,
          "defines": [
            "USE_ALPHA_TEST"
          ]
        },
        {
          "name": "iTime",
          "type": 4,
          "defines": []
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_color",
          "type": 7,
          "defines": []
        },
        {
          "name": "a_uv0",
          "type": 5,
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "extensions": [],
      "name": "eb2ec84c91e7bbd4b91399b7d89cff7b0b0c4aaf02799b9acf8e05f9"
    }
  ]
}