{"version":3,"sources":["../../../../../../assets/cc-common/cc-network/v3/assets/cc-common/cc-network/v3/globalNetworkV3.js"],"names":["gameNetwork","window","GameNetwork","require","MessageManager","messageManager","getInstance","ServiceRest","serviceRest","logger","lib","globalNetworkV3","gamesData","token","init","envId","gameIdSocket","cc","log","loadConfigAsync","getConfig","SOCKET_URL","API_URL","deviceInfo","os","sys","osVersion","platform","browser","browserType","browserVersion","language","updateLogger","warn","initSocket","socketUrl","apiUrl","urlVerifyToken","games","env","device","setUpSentry","getToken","registerGame","gameData","gameId","isSlotGame","gameState","Sentry","configureScope","scope","setExtra","triggerUserLogout","closeAndCleanUp","outGame","module","exports"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,cAAcC,OAAOC,WAAP,IAAsBC,QAAQ,cAAR,CAA1C;AACA,IAAMC,iBAAiBJ,YAAYI,cAAnC;AACA,IAAMC,iBAAiBD,eAAeE,WAAf,EAAvB;AACA,IAAMC,cAAcP,YAAYO,WAAhC;AACA,IAAMC,cAAcD,YAAYD,WAAZ,CAAwB,IAAxB,CAApB;AACA,IAAMG,SAAST,YAAYU,GAAZ,CAAgBD,MAA/B;;AAEA,SAASE,eAAT,GAA2B;AAAA;;AACvB,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,IAAL,GAAY,UAACD,KAAD,EAAmD;AAAA,YAA3CE,KAA2C,uEAAnC,QAAmC;AAAA,YAAzBC,YAAyB,uEAAV,KAAU;;AAC3DC,WAAGC,GAAH,CAAO,kBAAP;AACA,cAAKL,KAAL,GAAaA,KAAb;AACA,YAAMM,kBAAkBhB,QAAQ,iBAAR,CAAxB;;AAH2D,oCAI7BgB,gBAAgBC,SAAhB,EAJ6B;AAAA,YAIpDC,UAJoD,yBAIpDA,UAJoD;AAAA,YAIxCC,OAJwC,yBAIxCA,OAJwC;;AAK3D,YAAMC,aAAa;AACfC,gBAAIP,GAAGQ,GAAH,CAAOD,EADI;AAEfE,uBAAWT,GAAGQ,GAAH,CAAOC,SAFH;AAGfC,sBAAUV,GAAGQ,GAAH,CAAOE,QAHF;AAIfC,qBAASX,GAAGQ,GAAH,CAAOI,WAJD;AAKfC,4BAAgBb,GAAGQ,GAAH,CAAOK,cALR;AAMfC,sBAAUd,GAAGQ,GAAH,CAAOM;AANF,SAAnB;AAQAtB,eAAOuB,YAAP,CAAoBf,GAAGC,GAAvB,EAA4BD,GAAGC,GAA/B,EAAoCD,GAAGgB,IAAvC;AACA5B,uBAAe6B,UAAf,CAA0B;AACtBC,uBAAWd,UADW;AAEtBR,wBAFsB;AAGtBuB,oBAAQd,OAHc;AAItBe,4BAAgB,kBAJM;AAKtBC,mBAAOtB,YALe;AAMtBuB,iBAAKxB,KANiB;AAOtByB,oBAAQjB,UAPc;AAQtBf;AARsB,SAA1B;AAUAW,wBAAgBsB,WAAhB;AACH,KAzBD;;AA2BA,SAAKC,QAAL,GAAgB,YAAI;AAChB,eAAO,MAAK7B,KAAZ;AACH,KAFD;;AAIA,SAAK8B,YAAL,GAAoB,UAACC,QAAD,EAAc;AAAA,YAE1BC,MAF0B,GAG1BD,QAH0B,CAE1BC,MAF0B;AAAA,YAElBC,UAFkB,GAG1BF,QAH0B,CAElBE,UAFkB;;AAI9B,YAAIC,kBAAJ;AACA,YAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,mBAAOC,cAAP,CAAsB,UAASC,KAAT,EAAgB;AAClCA,sBAAMC,QAAN,CAAe,QAAf,EAAyBN,MAAzB;AACH,aAFD;AAGH;AACD,YAAIC,UAAJ,EAAgB;AACZC,wBAAY5C,QAAQ,eAAR,CAAZ;AACH,SAFD,MAEO;AACH4C,wBAAY5C,QAAQ,cAAc0C,MAAtB,CAAZ;AACH;AACD,YAAI,CAACE,SAAL,EAAgB;;AAEhB,eAAO,IAAIA,SAAJ,CAAc,EAACH,kBAAD,EAAd,CAAP;AACH,KAlBD;;AAoBA,SAAKQ,iBAAL,GAAyB,YAAM;AAC3B/C,uBAAegD,eAAf;AACH,KAFD;;AAIA,SAAKC,OAAL,GAAe,YAAM,CAAE,CAAvB;AACH;;AAEDC,OAAOC,OAAP,GAAiB7C,eAAjB","file":"globalNetworkV3.js","sourceRoot":"../../../../../../assets/cc-common/cc-network/v3","sourcesContent":["/* global Sentry */\n\nconst gameNetwork = window.GameNetwork || require('game-network');\nconst MessageManager = gameNetwork.MessageManager;\nconst messageManager = MessageManager.getInstance();\nconst ServiceRest = gameNetwork.ServiceRest;\nconst serviceRest = ServiceRest.getInstance('cc');\nconst logger = gameNetwork.lib.logger;\n\nfunction globalNetworkV3() {\n    this.gamesData = {};\n    this.token = null;\n    this.init = (token, envId = 'portal', gameIdSocket = 'all') => {\n        cc.log(\"Network using V3\");\n        this.token = token;\n        const loadConfigAsync = require('loadConfigAsync');\n        const {SOCKET_URL, API_URL} = loadConfigAsync.getConfig();\n        const deviceInfo = {\n            os: cc.sys.os,\n            osVersion: cc.sys.osVersion,\n            platform: cc.sys.platform,\n            browser: cc.sys.browserType,\n            browserVersion: cc.sys.browserVersion,\n            language: cc.sys.language\n        };\n        logger.updateLogger(cc.log, cc.log, cc.warn);\n        messageManager.initSocket({\n            socketUrl: SOCKET_URL,\n            token,\n            apiUrl: API_URL,\n            urlVerifyToken: 'auth/token/login',\n            games: gameIdSocket,\n            env: envId,\n            device: deviceInfo,\n            serviceRest,\n        });\n        loadConfigAsync.setUpSentry();\n    };\n\n    this.getToken = ()=>{\n        return this.token;\n    };\n\n    this.registerGame = (gameData) => {\n        const {\n            gameId, isSlotGame,\n        } = gameData;\n        let gameState;\n        if (typeof Sentry !== 'undefined') {\n            Sentry.configureScope(function(scope) {\n                scope.setExtra(\"gameId\", gameId);\n            });\n        }\n        if (isSlotGame) {\n            gameState = require('gameStateSlot');\n        } else {\n            gameState = require('gameState' + gameId);\n        }\n        if (!gameState) return;\n\n        return new gameState({gameData});\n    };\n\n    this.triggerUserLogout = () => {\n        messageManager.closeAndCleanUp();\n    };\n\n    this.outGame = () => {};\n}\n\nmodule.exports = globalNetworkV3;\n"]}