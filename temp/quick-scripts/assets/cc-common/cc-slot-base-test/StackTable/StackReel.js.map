{"version":3,"sources":["StackReel.js"],"names":["cc","Class","extends","require","onLoad","_super","stackFormat","stackSymbolName","stackSize","_remainStep","maxStep","_countStack","init","_symbols","reel","children","slice","processStack","fastStopSpinning","director","getScheduler","unschedule","setStepToStop","currentSpeed","showResult","totalNumber","step","remainStep","getRandomSymbolName","randomSymbol","symbolList","Math","floor","random","length","circularSymbols","lastSymbol","index","changeToBlurSymbol","stop","isRealSymbol","config","TABLE_SYMBOL_BUFFER","TOP","showNumber","symbolValue","matrix","BOT","changeToSymbol","showSymbols","unshift","_processStackSymbol","y","SYMBOL_HEIGHT","reset","MAX_STEP"],"mappings":"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","file":"StackReel.js","sourceRoot":"../../../../../../assets/cc-common/cc-slot-base-test/StackTable","sourcesContent":["cc.Class({\n    extends: require('SlotReelv2'),\n\n    /**\n     * @LIFE_CYCLE\n     */\n    onLoad() {\n        this._super();\n        this.stackFormat = {};\n        this.stackSymbolName = \"A\";\n        this.stackSize = 6;\n        this._remainStep = this.maxStep;\n        this._countStack = 0;\n    },\n    /** \n     * @API\n     */\n    init(...params) {\n        this._super(...params);\n        this._symbols = this.reel.children.slice();\n    },\n    processStack(stackFormat) { // {size = 6, format: 0: step : 3}\n        this.stackFormat = stackFormat;\n    },\n    fastStopSpinning(maxStep) {\n        cc.director.getScheduler().unschedule(this.setStepToStop, this);\n        this.currentSpeed = this.currentSpeed / 3;\n        if (this.showResult === 1) return;\n        if (maxStep < this.totalNumber) {\n            this.step = this.totalNumber;\n        } else if (this.step > maxStep) {\n            this.step = maxStep;\n        }\n        this.remainStep = this.step;\n    },\n\n    /**\n     * @private\n     */\n    getRandomSymbolName() {\n        const randomSymbol = this.symbolList[Math.floor(Math.random() * this.symbolList.length)];\n        return (randomSymbol === this.stackSymbolName) ? this.getRandomSymbolName() : randomSymbol;\n    },\n    circularSymbols() {\n        const lastSymbol = this._symbols[this.index % this.totalNumber];\n        if (!this.showResult) {\n            this.remainStep = this.step;\n            lastSymbol.changeToBlurSymbol(this.getRandomSymbolName());\n        } else if (this.stop < this.totalNumber) {\n            this.remainStep = this.totalNumber - 1 - this.stop;\n            let isRealSymbol = this.stop >= this.config.TABLE_SYMBOL_BUFFER.TOP && this.stop < this.showNumber + this.config.TABLE_SYMBOL_BUFFER.TOP;\n            let symbolValue = this.matrix[this.stop];\n            this.step = this.totalNumber + this.showNumber - (this.stop + this.config.TABLE_SYMBOL_BUFFER.BOT);\n            if (isRealSymbol) {\n                lastSymbol.changeToSymbol(symbolValue);\n                this.showSymbols.unshift(lastSymbol);\n            } else {\n                lastSymbol.changeToBlurSymbol(symbolValue);\n            }\n            this.stop++;\n        }\n        this._processStackSymbol(lastSymbol);\n        lastSymbol.y = lastSymbol.y + this.config.SYMBOL_HEIGHT * (this.totalNumber);\n        this.index++;\n    },\n    setStepToStop() {\n        this._super();\n        this.remainStep = this.step;\n    },\n    _processStackSymbol(lastSymbol) {\n        if (this.remainStep === this.stackFormat.step) {\n            lastSymbol.changeToSymbol(this.stackSymbolName);\n            this._countStack = 1;\n            return;\n        }\n        if (this._countStack > 0 && this._countStack < this.stackSize) {\n            lastSymbol.changeToSymbol(this.stackSymbolName);\n            this._countStack++;\n            return;\n        }\n        if (this._countStack === this.stackSize) {\n            this._countStack = 0;\n            return;\n        }\n    },\n    reset() {\n        this._super();\n        this.remainStep = this.MAX_STEP;\n        this.stackFormat = {};\n    }\n\n});\n"]}