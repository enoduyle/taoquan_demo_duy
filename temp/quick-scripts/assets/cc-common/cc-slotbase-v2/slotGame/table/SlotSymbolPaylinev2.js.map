{"version":3,"sources":["SlotSymbolPaylinev2.js"],"names":["cc","Class","extends","require","properties","spineNode","Node","winEffect","spineList","default","type","SymbolSpineDefine","onLoad","_super","node","init","bind","animation","getComponent","sp","Skeleton","currentScale","staticSymbol","scale","symbolName","asset","assets","symbol","skeData","findSymbolSpineData","havingAnim","undefined","active","Sprite","spriteFrame","skeletonData","spine","opacity","changeToSymbol","symbolStatic","symbolAnim","log","playAnimation","duration","isNearWin","NORMAL_DURATION","findAnimation","setAnimation","timeScale","warn","name","seq","repeat","sequence","scaleTo","runAction","stopAnimation","stopAllActions","find"],"mappings":"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","file":"SlotSymbolPaylinev2.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/table","sourcesContent":["\n\ncc.Class({\n    extends: require(\"SlotSymbolPayline\"),\n\n    properties: {\n        spineNode: cc.Node,\n        winEffect: cc.Node,\n        spineList:{\n            default: [],\n            type: require('SlotCustomDataType').SymbolSpineDefine\n        },\n    },\n\n    onLoad(){\n        this._super();\n        this.node.init = this.init.bind(this);\n        this.animation = this.spineNode.getComponent(sp.Skeleton);\n        this.currentScale = this.staticSymbol.scale;\n    },\n\n    init(symbolName) {\n        const asset = this.assets[symbolName];\n        this.node.symbol = symbolName; // for easy debug\n        let skeData = this.findSymbolSpineData(symbolName);\n        this.havingAnim = skeData != undefined;\n        if (asset) {\n            this.staticSymbol.active = true;\n            this.staticSymbol.getComponent(cc.Sprite).spriteFrame = asset;\n        } else {\n            this.staticSymbol.active = false;\n        }\n        if (skeData) {\n            this.spineNode.active = true;\n            this.spineNode.getComponent(sp.Skeleton).skeletonData = skeData.spine;\n        } else {\n            this.spineNode.active = false;\n        }\n        this.staticSymbol.opacity = 0;\n        this.spineNode.opacity = 0;\n    },\n\n    changeToSymbol(symbolName) {\n        this.staticSymbol.active = false;\n        this.spineNode.active = false;\n        this.havingAnim = false;\n        this.node.symbol = symbolName;\n\n        let symbolStatic = this.assets[symbolName];\n        this.symbolAnim = this.findSymbolSpineData(symbolName);\n\n        if (this.symbolAnim) {\n            this.animation.skeletonData = this.symbolAnim.spine;\n            this.havingAnim = true;\n        }\n        else\n        if (this.assets[symbolName]) {\n            this.staticSymbol.active = true;\n            this.staticSymbol.getComponent(cc.Sprite).spriteFrame = symbolStatic;\n        }\n        else\n        {\n            cc.log('Must set anim or static for symbol ' + symbolName);\n        }\n        \n        this.staticSymbol.opacity = 0;\n        this.spineNode.opacity = 0;\n    },\n\n    playAnimation(duration = 2, isNearWin = false){\n        const NORMAL_DURATION = 2;\n        if (this.havingAnim) {\n            this.spineNode.opacity = 255;\n            this.spineNode.active = true;\n            this.staticSymbol.opacity = 0;\n            if(this.animation.findAnimation(\"animation\")){\n                this.animation.setAnimation(0, \"animation\", isNearWin);\n                this.animation.timeScale = NORMAL_DURATION / duration;\n            }else {\n                cc.warn(\"wrong animation name on spine: \", this.animation.skeletonData.name);\n            }\n        } \n        else {\n            this.staticSymbol.opacity = 255;\n            this.staticSymbol.active = true;\n            this.spineNode.opacity = 0;\n            const seq = cc.repeat(\n                cc.sequence(\n                    cc.scaleTo(0.2, 1.05 * this.currentScale),\n                    cc.scaleTo(0.2, 0.95 * this.currentScale),\n                    cc.scaleTo(0.2, 1 * this.currentScale),\n                ), 2);\n            this.staticSymbol.runAction(seq);\n        }\n    },\n\n    stopAnimation() {\n        this.staticSymbol.stopAllActions();\n        this.staticSymbol.scale = 1;\n        this.winEffect.scale = 1;\n        this.staticSymbol.active = false;\n        this.spineNode.active = false;\n    },\n\n    findSymbolSpineData(symbolName) {\n        return this.spineList.find(spine => spine.name === symbolName) || null;\n    },\n});\n"]}