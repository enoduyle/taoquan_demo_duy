{"version":3,"sources":["../../../../../../assets/cc-common/cc-share-v1/shareServices/assets/cc-common/cc-share-v1/shareServices/serviceRest.js"],"names":["encodeQueryData","data","Object","keys","map","key","encodeURIComponent","join","apiObject","getRawDataWeb","fullURL","callback","callbackErr","request","XMLHttpRequest","open","timeout","onreadystatechange","readyState","responseText","JSON","parse","status","ontimeout","e","onerror","send","get","url","params","apiUrl","loadConfigAsync","require","getConfig","API_URL","cc","loader","getXMLHttpRequest","querystring","setRequestHeader","getWithHeader","headers","forEach","post","dataPost","postWithHeader","stringify","postRaw","put","module","exports"],"mappings":";;;;;;AACA;;;AAGA,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,WAAOC,OAAOC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAsB,UAASC,GAAT,EAAc;AACvC,eAAO,CAACA,GAAD,EAAMJ,KAAKI,GAAL,CAAN,EAAiBD,GAAjB,CAAqBE,kBAArB,EAAyCC,IAAzC,CAA8C,GAA9C,CAAP;AACH,KAFM,EAEJA,IAFI,CAEC,GAFD,CAAP;AAGH;;AAED,IAAMC,YAAY;;AAEdC,mBAAe,6BAAiE;AAAA,gCAA/DC,OAA+D;AAAA,YAA/DA,OAA+D,gCAArD,EAAqD;AAAA,iCAAjDC,QAAiD;AAAA,YAAjDA,QAAiD,iCAAtC,YAAM,CAAE,CAA8B;AAAA,oCAA5BC,WAA4B;AAAA,YAA5BA,WAA4B,oCAAd,YAAM,CAAE,CAAM;;;AAE5E,YAAMC,UAAU,IAAIC,cAAJ,EAAhB;AACAD,gBAAQE,IAAR,CAAa,KAAb,EAAoBL,OAApB,EAA6B,IAA7B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQI,kBAAR,GAA6B,YAAY;AACrC,gBAAIJ,QAAQK,UAAR,IAAsB,CAA1B,EAA6B;AACzB;AACA,oBAAIP,QAAJ,EAAc;AACV,wBAAIE,QAAQM,YAAZ,EAA0B;AACtBR,iCAASS,KAAKC,KAAL,CAAWR,QAAQM,YAAnB,CAAT;AACH,qBAFD,MAEO;AACHP;AACH;AACJ;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR;AACH,KA/Ba;;AAiCdC,SAAK,oBAAuF;AAAA,8BAArFC,GAAqF;AAAA,YAArFA,GAAqF,6BAA/E,EAA+E;AAAA,iCAA3EC,MAA2E;AAAA,YAA3EA,MAA2E,gCAAlE,EAAkE;AAAA,mCAA9DlB,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;;AAExF,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AAFwF,oCAGtED,gBAAgBE,SAAhB,EAHsE;AAAA,YAGjFC,OAHiF,yBAGjFA,OAHiF;;AAKxF,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMC,cAAc,MAAMtC,gBAAgB6B,MAAhB,CAA1B;AACA,YAAMnB,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9B,GAAoCU,WAApD;AACAzB,gBAAQE,IAAR,CAAa,KAAb,EAAoBL,OAApB,EAA6B,IAA7B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAwC,gCAAxC;AACA1B,gBAAQI,kBAAR,GAA6B,YAAY;AACrC,gBAAIJ,QAAQK,UAAR,IAAsB,CAA1B,EAA6B;AACzB;AACA,oBAAIP,QAAJ,EAAc;AACV,wBAAIE,QAAQM,YAAZ,EAA0B;AACtBR,iCAASS,KAAKC,KAAL,CAAWR,QAAQM,YAAnB,CAAT;AACH,qBAFD,MAEO;AACHP;AACH;AACJ;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR;AACH,KApEa;;AAsEdc,mBAAe,8BAAqG;AAAA,8BAAnGZ,GAAmG;AAAA,YAAnGA,GAAmG,6BAA7F,EAA6F;AAAA,iCAAzFC,MAAyF;AAAA,YAAzFA,MAAyF,gCAAhF,EAAgF;AAAA,kCAA5EY,OAA4E;AAAA,YAA5EA,OAA4E,iCAAlE,EAAkE;AAAA,mCAA9D9B,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;AAChH,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AADgH,qCAE9FD,gBAAgBE,SAAhB,EAF8F;AAAA,YAEzGC,OAFyG,0BAEzGA,OAFyG;;AAIhH,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMC,cAAc,MAAMtC,gBAAgB6B,MAAhB,CAA1B;AACA,YAAMnB,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9B,GAAoCU,WAApD;AACAzB,gBAAQE,IAAR,CAAa,KAAb,EAAoBL,OAApB,EAA6B,IAA7B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAwC,gCAAxC;;AAEArC,eAAOC,IAAP,CAAYsC,OAAZ,EAAqBC,OAArB,CAA8B,UAACrC,GAAD,EAAS;AACnCQ,oBAAQ0B,gBAAR,CAAyBlC,GAAzB,EAA8BoC,QAAQpC,GAAR,CAA9B;AACH,SAFD;;AAIAQ,gBAAQI,kBAAR,GAA6B,YAAY;AACrC,gBAAIJ,QAAQK,UAAR,IAAsB,CAA1B,EAA6B;AACzB;AACA,oBAAIP,QAAJ,EAAc;AACV,wBAAIE,QAAQM,YAAZ,EAA0B;AACtBR,iCAASS,KAAKC,KAAL,CAAWR,QAAQM,YAAnB,CAAT;AACH,qBAFD,MAEO;AACHP;AACH;AACJ;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,YAAY;AAC5BX;AACH,SAFD;AAGAC,gBAAQY,OAAR,GAAkB,YAAM;AACpBb;AACH,SAFD;AAGAC,gBAAQa,IAAR;AACH,KA7Ga;;AA+GdiB,UAAM,qBAAqF;AAAA,8BAAnFf,GAAmF;AAAA,YAAnFA,GAAmF,6BAA7E,EAA6E;AAAA,+BAAzE3B,IAAyE;AAAA,YAAzEA,IAAyE,8BAAlE,EAAkE;AAAA,mCAA9DU,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;AACvF,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AADuF,qCAErED,gBAAgBE,SAAhB,EAFqE;AAAA,YAEhFC,OAFgF,0BAEhFA,OAFgF;;AAGvF,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMO,WAAW5C,gBAAgBC,IAAhB,CAAjB;AACA,YAAMS,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9C;AACAf,gBAAQE,IAAR,CAAa,MAAb,EAAqBL,OAArB,EAA8B,IAA9B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAyC,mCAAzC;AACA1B,gBAAQI,kBAAR,GAA6B,YAAW;AACpC,gBAAGJ,QAAQK,UAAR,IAAsB,CAAzB,EAA4B;AACxB,oBAAIL,QAAQM,YAAZ,EAA0B;AACtBR,6BAAS;AACLW,gCAAQT,QAAQS,MADX;AAELrB,8BAAMmB,KAAKC,KAAL,CAAWR,QAAQM,YAAnB;AAFD,qBAAT;AAIH,iBALD,MAKO;AACHP;AACH;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR,CAAakB,QAAb;AACH,KAhJa;;AAkJdC,oBAAgB,+BAA+G;AAAA,8BAA7GjB,GAA6G;AAAA,YAA7GA,GAA6G,6BAAvG,EAAuG;AAAA,iCAApGC,MAAoG;AAAA,YAApGA,MAAoG,gCAA3F,EAA2F;AAAA,kCAAvFY,OAAuF;AAAA,YAAvFA,OAAuF,iCAA7E,EAA6E;AAAA,+BAAzExC,IAAyE;AAAA,YAAzEA,IAAyE,8BAAlE,EAAkE;AAAA,mCAA9DU,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;AAC3H,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AAD2H,qCAEzGD,gBAAgBE,SAAhB,EAFyG;AAAA,YAEpHC,OAFoH,0BAEpHA,OAFoH;;AAG3H,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMO,WAAWxB,KAAK0B,SAAL,CAAe7C,IAAf,CAAjB;AACA,YAAMqC,cAAc,MAAMtC,gBAAgB6B,MAAhB,CAA1B;AACA,YAAMnB,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9B,GAAoCU,WAApD;AACAzB,gBAAQE,IAAR,CAAa,MAAb,EAAqBL,OAArB,EAA8B,IAA9B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAyC,kBAAzC;;AAEArC,eAAOC,IAAP,CAAYsC,OAAZ,EAAqBC,OAArB,CAA8B,UAACrC,GAAD,EAAS;AACnCQ,oBAAQ0B,gBAAR,CAAyBlC,GAAzB,EAA8BoC,QAAQpC,GAAR,CAA9B;AACH,SAFD;;AAIAQ,gBAAQI,kBAAR,GAA6B,YAAW;AACpC,gBAAGJ,QAAQK,UAAR,IAAsB,CAAzB,EAA4B;AACxB,oBAAIL,QAAQM,YAAZ,EAA0B;AACtBR,6BAAS;AACLW,gCAAQT,QAAQS,MADX;AAELrB,8BAAMmB,KAAKC,KAAL,CAAWR,QAAQM,YAAnB;AAFD,qBAAT;AAIH,iBALD,MAKO;AACHP;AACH;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR,CAAakB,QAAb;AACH,KAzLa;;AA2LdG,aAAS,wBAAqF;AAAA,8BAAnFnB,GAAmF;AAAA,YAAnFA,GAAmF,6BAA7E,EAA6E;AAAA,+BAAzE3B,IAAyE;AAAA,YAAzEA,IAAyE,8BAAlE,EAAkE;AAAA,mCAA9DU,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;AAC1F,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AAD0F,qCAExED,gBAAgBE,SAAhB,EAFwE;AAAA,YAEnFC,OAFmF,0BAEnFA,OAFmF;;AAG1F,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMO,WAAW3C,IAAjB;AACA,YAAMS,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9C;AACAf,gBAAQE,IAAR,CAAa,MAAb,EAAqBL,OAArB,EAA8B,IAA9B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAyC,mCAAzC;AACA1B,gBAAQI,kBAAR,GAA6B,YAAW;AACpC,gBAAGJ,QAAQS,MAAR,IAAkB,GAArB,EAA0B;AACtBX,yBAAS;AACLW,4BAAQT,QAAQS,MADX;AAELrB,0BAAMY,QAAQM;AAFT,iBAAT;AAIH,aALD,MAKO;AACHP;AACH;AACJ,SATD;AAUAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR,CAAakB,QAAb;AACH,KArNa;;AAuNdI,SAAK,oBAAqF;AAAA,8BAAnFpB,GAAmF;AAAA,YAAnFA,GAAmF,6BAA7E,EAA6E;AAAA,+BAAzE3B,IAAyE;AAAA,YAAzEA,IAAyE,8BAAlE,EAAkE;AAAA,mCAA9DU,QAA8D;AAAA,YAA9DA,QAA8D,kCAAnD,YAAM,CAAE,CAA2C;AAAA,iCAAzCmB,MAAyC;AAAA,YAAzCA,MAAyC,gCAAhC,EAAgC;AAAA,sCAA5BlB,WAA4B;AAAA,YAA5BA,WAA4B,qCAAd,YAAM,CAAE,CAAM;;AACtF,YAAMmB,kBAAkBC,QAAQ,iBAAR,CAAxB;;AADsF,qCAEpED,gBAAgBE,SAAhB,EAFoE;AAAA,YAE/EC,OAF+E,0BAE/EA,OAF+E;;AAGtF,YAAMrB,UAAUsB,GAAGC,MAAH,CAAUC,iBAAV,EAAhB;AACA,YAAMO,WAAW5C,gBAAgBC,IAAhB,CAAjB;AACA,YAAMS,UAAU,CAACoB,SAASA,MAAT,GAAkBI,OAAnB,IAA8BN,GAA9C;;AAEAf,gBAAQE,IAAR,CAAa,KAAb,EAAoBL,OAApB,EAA6B,IAA7B;AACAG,gBAAQG,OAAR,GAAkB,KAAlB;AACAH,gBAAQ0B,gBAAR,CAAyB,cAAzB,EAAyC,mCAAzC;AACA1B,gBAAQI,kBAAR,GAA6B,YAAW;AACpC,gBAAGJ,QAAQK,UAAR,IAAsB,CAAzB,EAA4B;AACxB,oBAAIL,QAAQM,YAAZ,EAA0B;AACtBR,6BAAS;AACLW,gCAAQT,QAAQS,MADX;AAELrB,8BAAMmB,KAAKC,KAAL,CAAWR,QAAQM,YAAnB;AAFD,qBAAT;AAIH,iBALD,MAKO;AACHP;AACH;AACJ,aATD,MASO,IAAIC,QAAQK,UAAR,KAAuB,CAA3B,EAA8B;AACjCN;AACH;AACD,gBAAIC,QAAQS,MAAR,KAAmB,GAAvB,EAA4B;AACxBV;AACH;AACJ,SAhBD;AAiBAC,gBAAQU,SAAR,GAAoB,UAAUC,CAAV,EAAa;AAC7BZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQY,OAAR,GAAkB,UAACD,CAAD,EAAO;AACrBZ,wBAAYY,CAAZ;AACH,SAFD;AAGAX,gBAAQa,IAAR,CAAakB,QAAb;AACH;AAzPa,CAAlB;;AA4PAK,OAAOC,OAAP,GAAiB1C,SAAjB","file":"serviceRest.js","sourceRoot":"../../../../../../assets/cc-common/cc-share-v1/shareServices","sourcesContent":["\n// Rest API to connect to server\n\n\nfunction encodeQueryData(data) {\n    return Object.keys(data).map(function(key) {\n        return [key, data[key]].map(encodeURIComponent).join(\"=\");\n    }).join(\"&\");\n}\n\nconst apiObject = {\n\n    getRawDataWeb: ({fullURL = '', callback = () => {}, callbackErr = () => {}}) => {\n\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", fullURL, true);\n        request.timeout = 15000;\n        request.onreadystatechange = function () {\n            if (request.readyState == 4) {\n                //get status text\n                if (callback) {\n                    if (request.responseText) {\n                        callback(JSON.parse(request.responseText));\n                    } else {\n                        callbackErr();\n                    }\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send();\n    },\n\n    get: ({url = '', params = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n\n        const request = cc.loader.getXMLHttpRequest();\n        const querystring = '?' + encodeQueryData(params);\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url + querystring;\n        request.open(\"GET\", fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader(\"Content-Type\",\"application/json;charset=UTF-8\");\n        request.onreadystatechange = function () {\n            if (request.readyState == 4) {\n                //get status text\n                if (callback) {\n                    if (request.responseText) {\n                        callback(JSON.parse(request.responseText));\n                    } else {\n                        callbackErr();\n                    }\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send();\n    },\n    \n    getWithHeader: ({url = '', params = {}, headers = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n\n        const request = cc.loader.getXMLHttpRequest();\n        const querystring = '?' + encodeQueryData(params);\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url + querystring;\n        request.open(\"GET\", fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader(\"Content-Type\",\"application/json;charset=UTF-8\");\n        \n        Object.keys(headers).forEach( (key) => {\n            request.setRequestHeader(key, headers[key]);\n        });\n\n        request.onreadystatechange = function () {\n            if (request.readyState == 4) {\n                //get status text\n                if (callback) {\n                    if (request.responseText) {\n                        callback(JSON.parse(request.responseText));\n                    } else {\n                        callbackErr();\n                    }\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function () {\n            callbackErr();\n        };\n        request.onerror = () => {\n            callbackErr();\n        };\n        request.send();\n    },\n\n    post: ({url = '', data = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n        const request = cc.loader.getXMLHttpRequest();\n        const dataPost = encodeQueryData(data);\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url;\n        request.open('POST', fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        request.onreadystatechange = function() {\n            if(request.readyState == 4) {\n                if (request.responseText) {\n                    callback({\n                        status: request.status,\n                        data: JSON.parse(request.responseText)\n                    });\n                } else {\n                    callbackErr();\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send(dataPost);\n    },\n\n    postWithHeader: ({url = '',params = {}, headers = {}, data = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n        const request = cc.loader.getXMLHttpRequest();\n        const dataPost = JSON.stringify(data);\n        const querystring = '?' + encodeQueryData(params);\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url + querystring;\n        request.open('POST', fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader('Content-type', 'application/json');\n\n        Object.keys(headers).forEach( (key) => {\n            request.setRequestHeader(key, headers[key]);\n        });\n\n        request.onreadystatechange = function() {\n            if(request.readyState == 4) {\n                if (request.responseText) {\n                    callback({\n                        status: request.status,\n                        data: JSON.parse(request.responseText)\n                    });\n                } else {\n                    callbackErr();\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send(dataPost);\n    },\n\n    postRaw: ({url = '', data = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n        const request = cc.loader.getXMLHttpRequest();\n        const dataPost = data;\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url;\n        request.open('POST', fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        request.onreadystatechange = function() {\n            if(request.status == 200) {\n                callback({\n                    status: request.status,\n                    data: request.responseText\n                });\n            } else {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send(dataPost);\n    },\n\n    put: ({url = '', data = {}, callback = () => {}, apiUrl = '', callbackErr = () => {}}) => {\n        const loadConfigAsync = require('loadConfigAsync');\n        const {API_URL} = loadConfigAsync.getConfig();\n        const request = cc.loader.getXMLHttpRequest();\n        const dataPost = encodeQueryData(data);\n        const fullURL = (apiUrl ? apiUrl : API_URL) + url;\n\n        request.open('PUT', fullURL, true);\n        request.timeout = 15000;\n        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        request.onreadystatechange = function() {\n            if(request.readyState == 4) {\n                if (request.responseText) {\n                    callback({\n                        status: request.status,\n                        data: JSON.parse(request.responseText)\n                    });\n                } else {\n                    callbackErr();\n                }\n            } else if (request.readyState === 0) {\n                callbackErr();\n            }\n            if (request.status !== 200) {\n                callbackErr();\n            }\n        };\n        request.ontimeout = function (e) {\n            callbackErr(e);\n        };\n        request.onerror = (e) => {\n            callbackErr(e);\n        };\n        request.send(dataPost);\n    }\n};\n\nmodule.exports = apiObject;\n"]}