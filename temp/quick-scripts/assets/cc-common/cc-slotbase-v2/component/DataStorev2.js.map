{"version":3,"sources":["DataStorev2.js"],"names":["BetDataStore","require","convertSlotMatrixTBLR","convertPayLine","convertPayLineAllways","cc","Class","extends","Component","properties","isEnableBGM","isEnableSFX","onLoad","node","gSlotDataStore","slotBetDataStore","playSession","lastEvent","lastedNormalPaylines","modeTurbo","isAutoSpin","spinTimes","gameId","betValueWithGame","Array","config","PAY_LINE_LENGTH","keys","map","i","createDefaultBet","formatData","bind","convertSlotMatrix","PAY_LINE_ALLWAYS","TABLE_FORMAT","normalGameResult","freeGameResult","bonusGameResult","freeSpinOptionResult","bonusGameRemain","extend","bonusGameMatrix","tableFormat","type","freeGameTableFormat","normalGameTableFormat","_mapNewKeys","matrix","payLines","currentBonusCredits","cfPlayBonus","forEach","it","warn","mapKeys","pLines","bg","fg","wAmt","jpInfo","Object","key","newKey"],"mappings":"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","file":"DataStorev2.js","sourceRoot":"../../../../../../assets/cc-common/cc-slotbase-v2/component","sourcesContent":["\n\nconst BetDataStore = require('MoneyDataStore');\nconst {convertSlotMatrixTBLR, convertPayLine, convertPayLineAllways} = require('utils');\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        isEnableBGM: false,\n        isEnableSFX: true\n    },\n    onLoad() {\n        this.node.gSlotDataStore = {\n            slotBetDataStore: new BetDataStore(),\n            playSession: {},\n            lastEvent: {},\n            lastedNormalPaylines: {},\n            modeTurbo: false,\n            isAutoSpin: false,\n            spinTimes: 0,\n            gameId: \"9984\",\n            isEnableBGM: false,\n            isEnableSFX: false,\n            betValueWithGame: [...Array(this.node.config.PAY_LINE_LENGTH).keys()].map(i => i + 1) // Store selected paylines\n        };\n        this.node.gSlotDataStore.gameId = this.gameId;\n        this.node.gSlotDataStore.isEnableBGM = this.isEnableBGM;\n        this.node.gSlotDataStore.isEnableSFX = this.isEnableSFX;\n        this.node.gSlotDataStore.slotBetDataStore.createDefaultBet(this.node.config);\n\n        this.node.gSlotDataStore.formatData = this.formatData.bind(this);\n        this.node.gSlotDataStore.convertSlotMatrix = convertSlotMatrixTBLR.bind(this);\n\n        if (this.node.config.PAY_LINE_ALLWAYS)\n        {\n            this.node.gSlotDataStore.convertPayLine = convertPayLineAllways.bind(this);\n        }\n        else\n        {\n            this.node.gSlotDataStore.convertPayLine = convertPayLine.bind(this);\n        }\n    },\n    formatData(playSession) {\n        const {TABLE_FORMAT} = this.node.config;\n        this.node.gSlotDataStore.playSession = playSession;\n        let lastEvent;\n\n        const {normalGameResult, freeGameResult, bonusGameResult, freeSpinOptionResult} = playSession.lastEvent;\n        const {bonusGameRemain, extend, bonusGameMatrix} = playSession;\n        let tableFormat = TABLE_FORMAT;\n\n        if (bonusGameResult) {\n            lastEvent = bonusGameResult;\n            lastEvent.type = \"bonusGame\";\n        } \n        else if (freeSpinOptionResult) {\n            lastEvent = freeSpinOptionResult;\n            lastEvent.type = \"freeGameOptionResult\";\n        }\n        else if (freeGameResult) {\n            lastEvent = freeGameResult;\n            lastEvent.type = \"freeGame\";\n\n            const {freeGameTableFormat} = this.node.gSlotDataStore.playSession;\n            if (freeGameTableFormat)\n                tableFormat = freeGameTableFormat;\n        } else {\n            lastEvent = normalGameResult;\n            lastEvent.type = \"normalGame\";\n\n            const {normalGameTableFormat} = this.node.gSlotDataStore.playSession;\n            if (normalGameTableFormat)\n                tableFormat = normalGameTableFormat;\n        }\n\n        lastEvent = this._mapNewKeys(lastEvent);\n\n        if (lastEvent.matrix) {\n            lastEvent.matrix = this.node.gSlotDataStore.convertSlotMatrix(lastEvent.matrix, tableFormat);\n        }\n\n        if (lastEvent.payLines) {\n            lastEvent.payLines = this.node.gSlotDataStore.convertPayLine(lastEvent.payLines);\n        }\n\n        this.node.gSlotDataStore.playSession.currentBonusCredits = 0;\n        if (bonusGameRemain > 0 && bonusGameRemain != extend.cfPlayBonus && bonusGameMatrix)\n        {\n            this.node.gSlotDataStore.playSession.bonusGameMatrix.forEach(it => {\n                if (it > 0) this.node.gSlotDataStore.playSession.currentBonusCredits += it;\n            });\n        }\n\n        this.node.gSlotDataStore.lastEvent = lastEvent;\n        cc.warn(\"%c data-update \", \"color: red\", this.node.gSlotDataStore.playSession);\n        return lastEvent;\n    },\n\n    _mapNewKeys(lastEvent) {\n        const mapKeys = {\n            pLines: 'payLines',\n            bg: 'bonusGame',\n            fg: 'freeGame',\n            wAmt: 'winAmount',\n            jpInfo: 'jackpotJnfo'\n        };\n\n        Object.keys(lastEvent).forEach(key => {\n            if (mapKeys[key]) {\n                const newKey = mapKeys[key];\n                lastEvent[newKey] = lastEvent[key];\n            }\n        });\n\n        return lastEvent;\n    },\n});\n"]}