{"version":3,"sources":["StackTable.js"],"names":["require","randRange","getRandomElement","fakeFormats","cc","Class","extends","onLoad","_super","init","showNumber","node","config","TABLE_FORMAT","stackSize","_testIndex","startSpinning","_testResultReceive","setupStack","stackFormats","reels","forEach","reel","col","processStack","setMode","evt","mode","fastToResult","stopSpinningCallbackCount","isFastToResult","remainSteps","map","format","step","maxStep","Math","max","apply","slotReel","fastStopSpinning","_processStack","formats","_getStep","scheduleOnce","_getTestFormats","matrix","_getTestMatrix","stopSpinning","testFormats","length"],"mappings":"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","file":"StackTable.js","sourceRoot":"../../../../../../assets/cc-common/cc-slot-base-test/StackTable","sourcesContent":["const { randRange, getRandomElement } = require('utils');\nconst fakeFormats = [3, 9, 4, 9, 5, 9, 3, 4, 5];\ncc.Class({\n    extends: require('SlotTablev2'),\n\n    onLoad() {\n        this._super();\n        this.init();\n        this.showNumber = this.node.config.TABLE_FORMAT[0];\n        this.stackSize = 6;\n        this._testIndex = 0;\n    },\n    /**\n     * @public \n     */\n    startSpinning() {\n        this._super();\n        this._testResultReceive();\n    },\n    setupStack(stackFormats = null) {\n        this.stackFormats = stackFormats;\n        this.node.reels.forEach((reel, col) => reel.processStack(this.stackFormats[col]));\n    },\n    setMode(evt, mode) {\n        this.node.mode = mode || evt;\n    },\n    fastToResult() {\n        if (this.stopSpinningCallbackCount >= 5) return;\n        if (!this.stackFormats) return;\n        if (this.isFastToResult) return;\n        this.isFastToResult = true;\n        const remainSteps = this.stackFormats.map(format => format.step);\n        const maxStep = Math.max.apply(null, remainSteps);\n        this.node.reels.forEach(slotReel => slotReel.fastStopSpinning(maxStep));\n    },\n    /**\n     * @private \n     */\n    _processStack(formats) {\n        const stackFormats = formats.map((format) => {\n            if (format === 9)\n                format = getRandomElement(fakeFormats);\n            // format = 0 // !hard code test\n            const step = this._getStep(format);\n            return { format, step };\n        });\n        // console.table(stackFormats);\n        return stackFormats;\n    },\n    _getStep(format) {\n        if (format === 9) return null;\n        if (format > 0) return format + this.stackSize;\n        if (format < 0) return this.showNumber + format;\n        if (format === 0) return randRange(this.showNumber, this.stackSize);\n    },\n    /**\n     * @TEST \n     * @fakeData\n     */\n    _testResultReceive() {\n        this.scheduleOnce(() => {\n            this.setupStack(this._getTestFormats());\n            const matrix = this._getTestMatrix();\n            this.stopSpinning(matrix, () => { });\n        }, 0.2);\n    },\n    _getTestFormats() {\n        const testFormats = [\n            [9, 9, 9, 9, 9],\n            [9, 9, 9, 9, 9],\n        ];\n        let format = testFormats[this._testIndex %= testFormats.length];\n        this._testIndex++;\n        return this._processStack(format);\n    },\n\n    _getTestMatrix() {\n        return [\n            [\"3\", \"A\", \"R\"],\n            [\"A\", \"3\", \"3\"],\n            [\"A\", \"2\", \"4\"],\n            [\"3\", \"2\", \"3\"],\n            [\"2\", \"3\", \"7\"]\n        ];\n    },\n\n\n});\n"]}