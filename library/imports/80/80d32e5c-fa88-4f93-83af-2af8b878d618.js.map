{"version":3,"sources":["../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/BetHistory/assets/cc-common/cc-slotbase-v2/slotGame/BetHistory/SlotTableHistory.js"],"names":["require","formatWalletMoney","cc","Class","extends","Component","properties","freeGame","Node","normalGame","bonusGame","topupGame","symbolNode","symbolPrefab","Prefab","symbolBonus","scaleRate","scaleNode","paylineInfo","isFormatMatrix","onLoad","symbolPool","NodePool","bonusPool","bonusPositions","getChildByName","currentFree","paylineTime","setFreePage","page","renderResult","data","active","clearTable","betDenom","currentMode","mode","martrixFormat","matrixFormat","renderGameTable","matrixResult","renderExtendData","scale","renderBonusTable","bettingLines","renderExtendBonusData","matrix","format","startX","length","node","config","SYMBOL_WIDTH","count","i","startY","SYMBOL_HEIGHT","j","symbol","getSymbol","parent","setPosition","changeToSymbol","col","row","val","denom","totalLines","unOpen","credit","parseInt","value","Number","setScore","children","position","showPaylinePerline","payLineID","payLineWinNumbers","payline","PAY_LINE_MATRIX","forEach","it","opacity","showPaylineAllWay","symbolId","symbolCount","clearPayline","pool","showingPayline","put","emit","type","prefab","result","get","instantiate"],"mappings":"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","file":"SlotTableHistory.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/BetHistory","sourcesContent":["const { formatWalletMoney } = require('utils');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        freeGame: cc.Node,\n        normalGame: cc.Node,\n        bonusGame: cc.Node,\n        topupGame: cc.Node,\n        symbolNode: cc.Node,\n        symbolPrefab: cc.Prefab,\n        symbolBonus: cc.Prefab,\n        scaleRate: 1,\n        scaleNode: cc.Node,\n        paylineInfo: cc.Node,\n        isFormatMatrix: false\n    },\n\n    onLoad() {\n        this.symbolPool = new cc.NodePool(\"SymbolPool\");\n        this.bonusPool = new cc.NodePool(\"BonusPool\");\n        this.bonusPositions = this.bonusGame ? this.bonusGame.getChildByName(\"Position\") : null;\n        this.currentFree = 0;\n        this.paylineTime = 2;\n    },\n\n    setFreePage(page) {\n        this.currentFree = page;\n    },\n\n    renderResult(data) {\n        this.normalGame.active = false;\n        this.freeGame.active = false;\n        if (this.bonusGame) this.bonusGame.active = false;\n        if (this.topupGame) this.topupGame.active = false;\n        this.clearTable();\n        this.betDenom = data.betDenom;\n        this.currentMode = data.mode;\n        this.martrixFormat = data.matrixFormat;\n        switch (data.mode) {\n            case \"normal\":\n                this.normalGame.active = true;\n                this.renderGameTable(data.matrixResult, data.matrixFormat);\n                this.renderExtendData(data);\n                this.scaleNode.scale = this.scaleRate;\n                break;\n            case \"free\":\n                this.freeGame.active = true;\n                this.renderGameTable(data.matrixResult, data.matrixFormat);\n                this.renderExtendData(data);\n                this.scaleNode.scale = this.scaleRate;\n                break;\n            case \"bonus\":\n                this.bonusGame.active = true;\n                this.renderBonusTable(data.matrixResult, data.matrixFormat, data.betDenom, data.bettingLines);\n                this.renderExtendBonusData(data);\n                this.scaleNode.scale = this.scaleRate;\n                break;\n            case \"topup\":\n                if (this.topupGame) {\n                    this.topupGame.active = true;\n                    this.renderGameTable(data.matrixResult, data.matrixFormat);\n                    this.renderExtendData(data);\n                    this.scaleNode.scale = this.scaleRate;\n                }\n                break;\n        }\n    },\n\n    renderGameTable(matrix, format) {\n        let startX = (-format.length / 2 + 0.5) * this.node.config.SYMBOL_WIDTH;\n        let count = 0;\n        for (let i = 0; i < format.length; i++) {\n            let startY = (format[i] / 2 - 0.5) * this.node.config.SYMBOL_HEIGHT;\n            for (let j = 0; j < format[i]; j++) {\n                let symbol = this.getSymbol(this.currentMode);\n                symbol.parent = this.symbolNode;\n                symbol.setPosition(startX + i * this.node.config.SYMBOL_WIDTH, startY - j * this.node.config.SYMBOL_HEIGHT);\n                symbol.changeToSymbol(matrix[count]);\n                symbol.col = i;\n                symbol.row = j;\n                symbol.val = matrix[count];\n                count++;\n            }\n        }\n    },\n\n    renderExtendData() {\n    },\n    renderExtendBonusData() {\n    },\n\n    renderBonusTable(matrix, format, denom, totalLines) {\n        let startX = (-format.length / 2 + 0.5) * this.node.config.SYMBOL_WIDTH;\n        let count = 0;\n        for (let i = 0; i < format.length; i++) {\n            let startY = (format[i] / 2 - 0.5) * this.node.config.SYMBOL_HEIGHT;\n            for (let j = 0; j < format[i]; j++) {\n                let symbol = this.getSymbol(this.currentMode);\n                symbol.parent = this.symbolNode;\n                symbol.setPosition(startX + i * this.node.config.SYMBOL_WIDTH, startY - j * this.node.config.SYMBOL_HEIGHT);\n                symbol.unOpen();\n                let credit = parseInt(matrix[count]);\n                let value = credit * Number(denom) * Number(totalLines);\n                if (value >= 0)\n                    symbol.setScore(formatWalletMoney(value));\n                if (this.bonusPositions && this.bonusPositions.children[count]) {\n                    symbol.setPosition(this.bonusPositions.children[count].position);\n                }\n                count++;\n            }\n        }\n    },\n\n    /*showNextPayline() {\n        let paylineInfo = this.paylines[this.paylineIndex];\n        if (!paylineInfo.betDenom) paylineInfo.betDenom = this.betDenom;\n        if (this.node.config.PAY_LINE_ALLWAYS) {\n            this.showPaylineAllWay(paylineInfo);\n        }\n        else {\n            this.showPaylinePerline(paylineInfo);\n        }\n        this.paylineInfo.emit('SHOW_PAYLINE',{line: this.paylines[this.paylineIndex]});\n        this.paylineIndex = (this.paylineIndex + 1) % this.paylines.length;\n        this.paylineTime = 2;\n    },*/\n\n    showPaylinePerline({ payLineID, payLineWinNumbers }) {\n        let payline = this.node.config.PAY_LINE_MATRIX[payLineID];\n        let count = 0;\n        this.symbolNode.children.forEach(it => {\n            it.opacity = 100;\n        });\n        for (let i = 0; i < payLineWinNumbers; i++) {\n            let symbol = this.symbolNode.children[count + payline[i]];\n            if (symbol) symbol.opacity = 255;\n            count += this.martrixFormat[i];\n        }\n    },\n\n    showPaylineAllWay({ symbolId, symbolCount }) {\n        this.symbolNode.children.forEach((it) => {\n            if (it.val == symbolId && it.col < symbolCount) {\n                it.opacity = 255;\n            } else {\n                it.opacity = 100;\n            }\n        });\n    },\n\n    clearPayline() {\n        this.symbolNode.children.forEach(it => it.opacity = 255);\n    },\n\n    /*update(dt) {\n        if (this.paylineTime > 0 && this.showingPayline)\n        {\n            this.paylineTime -= dt;\n            if (this.paylineTime <= 0)\n            {\n                this.showNextPayline();\n            }\n        }\n    },*/\n\n    clearTable() {\n        let pool = this.symbolPool;\n        if (this.currentMode == \"bonus\") pool = this.bonusPool;\n        this.showingPayline = false;\n        while (this.symbolNode.children.length > 0) {\n            pool.put(this.symbolNode.children[0]);\n        }\n        this.paylineInfo.emit('HIDE_PAYLINE');\n    },\n\n    getSymbol(type) {\n        let pool = this.symbolPool;\n        let prefab = this.symbolPrefab;\n        if (type == \"bonus\") {\n            pool = this.bonusPool;\n            prefab = this.symbolBonus;\n        }\n        let result = pool.get();\n        if (!result) {\n            result = cc.instantiate(prefab);\n        }\n        return result;\n    },\n\n});\n"]}