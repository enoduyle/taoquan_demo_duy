{"version":3,"sources":["ButtonAutoRotatingControl.js"],"names":["cc","Class","extends","Component","properties","radius","normalSpeed","highSpeed","rotatingSpeed","isClockwise","circleMovingNodes","Node","highSpeedColor","Color","normalSpeedColor","highSpeedColorVarStar","normalSpeedColorVarStar","onLoad","_timer","_speed","length","_segmentAngle","Math","PI","node","on","onSpinClick","onSpinShow","start","rotateNodes","_parentRotating","update","dt","angle","isRotate","i","_rotateAngle","x","cos","y","sin","position","Vec2","particle","getComponent","ParticleSystem","startColor","endColor","startColorVar"],"mappings":"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","file":"ButtonAutoRotatingControl.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/controller","sourcesContent":["\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        radius: 50,\n        normalSpeed: 10,\n        highSpeed: 20,\n        rotatingSpeed: 5,\n        isClockwise: false,\n        circleMovingNodes: [cc.Node],\n        highSpeedColor : cc.Color,\n        normalSpeedColor : cc.Color,\n        highSpeedColorVarStar : cc.Color,\n        normalSpeedColorVarStar : cc.Color,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this._timer = 0;\n        this._speed = 0;\n        if(this.circleMovingNodes && this.circleMovingNodes.length>0){\n            this._segmentAngle = (2*Math.PI)/this.circleMovingNodes.length;\n        }\n        this.node.on(\"ON_SPIN_CLICK\", this.onSpinClick, this);\n        this.node.on(\"ON_SPIN_SHOW\", this.onSpinShow, this);\n\n    },\n\n    start () {\n        this._speed = this.normalSpeed;\n        this.rotateNodes();\n        this._parentRotating = false;\n    },\n\n    update (dt) {\n        this.rotateNodes(dt, true);\n        if(this._parentRotating){\n            this.node.angle += (this.isClockwise?-1:1)*this.rotatingSpeed*dt;\n        }\n    },\n\n    rotateNodes(dt, isRotate = false){\n        if(this.circleMovingNodes && this.circleMovingNodes.length>0){\n            for(let i = 0; i<this.circleMovingNodes.length; i++){\n                if(!isRotate){\n                    this.circleMovingNodes[i]._rotateAngle = i*this._segmentAngle;\n                }else{\n                    this.circleMovingNodes[i]._rotateAngle += (this.isClockwise?-1:1)*this._speed*dt;\n                }\n                let x = Math.cos(this.circleMovingNodes[i]._rotateAngle)*this.radius;\n                let y = Math.sin(this.circleMovingNodes[i]._rotateAngle)*this.radius;\n                this.circleMovingNodes[i].position = new cc.Vec2(x,y);\n            }\n        }\n    },\n\n    onSpinClick(){\n        this._speed = this.highSpeed;\n        this._parentRotating = true;\n        if(this.circleMovingNodes && this.circleMovingNodes.length>0)\n        {\n            for(let i = 0; i<this.circleMovingNodes.length; i++){\n                const particle = this.circleMovingNodes[i].getComponent(cc.ParticleSystem);\n                if(particle){\n                    particle.startColor = this.highSpeedColor;\n                    particle.endColor = this.highSpeedColor;\n                    particle.startColorVar = this.highSpeedColorVarStar;\n                }\n            }\n        }\n    },\n\n    onSpinShow(){\n        this._speed = this.normalSpeed;\n        this._parentRotating = false;\n        for(let i = 0; i<this.circleMovingNodes.length; i++){\n            const particle = this.circleMovingNodes[i].getComponent(cc.ParticleSystem);\n            if(particle){\n                particle.startColor = this.normalSpeedColor;\n                particle.endColor = this.normalSpeedColor;\n                particle.startColorVar = this.normalSpeedColorVarStar;\n            }\n        }\n    },\n});\n"]}