{"version":3,"sources":["SlotTableHistory4LBase.js"],"names":["require","formatMoney","convertAssetArrayToObject","arrayTypeJackpot","cc","Class","extends","properties","bonusSprite","type","SpriteFrame","default","isShowSpecialPayline","onLoad","_super","node","on","showTableMatrix","hideTableMatrix","turnSpecialPayline","showPaylineAllWay","payLineSymbol","paylineMaxColumn","symbolId","symbolCount","symbolNode","children","forEach","it","val","currentMode","col","opacity","renderResult","data","typeJackpot","paylines","listSpecialLine","showingPayline","paylineInfo","emit","gameMode","mode","selectedOption","latestWinJackpotInfo","getTypeJackpot","jackpotId","length","paylineTime","setBonusPayline","bonusList","push","setWildPayline","wildJackpotList","index","jp","includes","renderGameTable","matrix","format","startX","config","SYMBOL_WIDTH","count","i","startY","SYMBOL_HEIGHT","j","symbol","getSymbol","parent","setPosition","getComponent","changeToSymbol","row","disableNumber","renderBonusTable","width","Math","floor","value","parseInt","displayTypeJackpot","setResult","onNextButton","currentFree","onBackButton","currentPage","max","updateTitle","titleMode","winAmount","totalFreeWinAmount","totalBonusWinAmount","jackpotAmount","title","string","renderExtendData","extraData","scaterA","scatterA1","scatterA2","lsa8","lsan","lta","bg","opt","scatterCredit","concat","indexSpecialLine","isBonusPayline","bonusWinAmount","totalCredit","split","credit","addNumber","showNextPayline","showBonusPayline","showWildJackpot","update","clearPayline"],"mappings":"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","file":"SlotTableHistory4LBase.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slotbase-v2/slotGame/BetHistory","sourcesContent":["const {formatMoney} = require('utils');\nconst {convertAssetArrayToObject} = require('utils');\n\nconst arrayTypeJackpot = [\"MINI\",\"MINOR\",\"MAJOR\",\"GRAND\"];\n\ncc.Class({\n    extends: require(\"SlotTableHistory\"),\n\n    properties: {\n        bonusSprite: {\n            type: cc.SpriteFrame,\n            default: []\n        },\n        isShowSpecialPayline: false,\n    },\n\n    onLoad() {\n        this.bonusSprite = convertAssetArrayToObject(this.bonusSprite);\n        \n        this._super();\n\n        this.node.on(\"SHOW_TABLE_MATRIX\", this.showTableMatrix, this);\n        this.node.on(\"HIDE_TABLE_MATRIX\", this.hideTableMatrix, this);\n        this.turnSpecialPayline = false;\n    },\n\n    showPaylineAllWay({payLineSymbol, paylineMaxColumn}) {\n        let symbolId = payLineSymbol;\n        let symbolCount = paylineMaxColumn;\n        this.symbolNode.children.forEach((it) => {\n            if ((it.val == symbolId || it.val == \"K\" || (this.currentMode == \"free\" && it.val == \"A1\")) && it.col < symbolCount) {\n                it.opacity = 255;\n            }\n            else {\n                it.opacity = 100;\n            }\n        });\n    },\n\n    renderResult(data) {\n        //data.selectedOption = 2;\n        //data.extraData = {\"scatterA1\":[\"0;358\",\"10;358\"],\"scatterA2\":[\"7;1074\"],\"extraBet\":\"5;88\",\"scaterA\":[\"1;168\",\"2;68\",\"5;8\",\"6;38\",\"11;38\",\"13;38\"]};\n        this.typeJackpot = 0;\n        this.paylines = [];\n        this.listSpecialLine = [];\n        this.showingPayline = false;\n        this.paylineInfo.emit('HIDE_PAYLINE');\n        // selectedOption\n        // 1 = FREE8; 2 TOPUP\n\n        this.gameMode = data.mode;\n        if (data.mode == \"free\" && data.selectedOption == 2) {\n            this.gameMode = data.mode = \"topup\";\n        } else if (data.mode == \"free\" && data.selectedOption == 1) {\n            this.gameMode = data.mode = \"free\";\n        } else if (data.mode == \"bonus\") {\n            let {latestWinJackpotInfo} = data;\n            if (latestWinJackpotInfo) {\n                this.typeJackpot = this.getTypeJackpot(latestWinJackpotInfo.jackpotId);\n            }\n            \n            this.gameMode = \"bonus\";\n        }\n\n        this._super(data);\n\n        if (this.listSpecialLine.length > 0) {\n            this.showingPayline = true;\n        }\n        this.paylineTime = 0.02;\n    },\n\n    setBonusPayline() {\n        // only for 9991\n        this.bonusList = [];\n        this.symbolNode.children.forEach((it) => {\n            if (it.val == \"A\" || it.val == \"A1\" || it.val == \"A2\") {\n                this.bonusList.push(it);\n            }\n        });\n    },\n\n    setWildPayline() {\n        this.wildJackpotList = [];\n        this.symbolNode.children.forEach((it) => {\n            if (it.val == \"K\") {\n                this.wildJackpotList.push(it);\n            }\n        });\n    },\n\n    getTypeJackpot(jackpotId) {\n        for (let index = 0; index < arrayTypeJackpot.length; index++) {\n            const jp = arrayTypeJackpot[index];\n            if (jackpotId.includes(jp)) {\n                return  (index + 1);\n            }\n        }\n        return 0;\n    },\n\n    renderGameTable(matrix, format) {\n        let startX = (-format.length/2 + 0.4) * this.node.config.SYMBOL_WIDTH;\n        let count = 0;\n        for (let i=0; i<format.length; i++) {\n            let startY = (format[i]/2 - 0.5) * this.node.config.SYMBOL_HEIGHT + 5;\n            for (let j=0; j<format[i]; j++) {\n                let symbol = this.getSymbol(this.currentMode);\n                symbol.parent = this.symbolNode;\n                symbol.setPosition(startX + i * (this.node.config.SYMBOL_WIDTH + 10), startY - j*(this.node.config.SYMBOL_HEIGHT + 10));\n                symbol.getComponent(\"SlotSymbol\").changeToSymbol(matrix[count]);\n                symbol.col = i;\n                symbol.row = j;\n                symbol.val = matrix[count];\n                symbol.disableNumber();\n                count++;\n            }\n        }\n    },\n\n\n    renderBonusTable(matrix, format) {\n        let width = this.node.config.SYMBOL_WIDTH - 14;\n        let startX = (-format.length / 2 + 0.5) * width;\n        let count = 0;\n\n        for (let i = 0; i < matrix.length; i++) {\n            let startY = (format[0] / 2 - 0.5) * this.node.config.SYMBOL_HEIGHT;\n\n            let col = Math.floor(i % 4);\n            let row = Math.floor(i / 4);\n            let value = parseInt(matrix[count]);\n\n            let displayTypeJackpot = parseInt(value % 10);\n            let symbol = this.getSymbol(this.currentMode);\n            symbol.parent = this.symbolNode;\n            symbol.setPosition(startX + col * width, startY - (row * this.node.config.SYMBOL_HEIGHT));\n            symbol.setResult('treasure' + value);\n\n            if (this.typeJackpot == displayTypeJackpot || this.typeJackpot == 0) {\n                symbol.opacity = 255;\n            } else {\n                symbol.opacity = 100;\n            }\n            count++;\n        }\n    },\n\n    onNextButton() {\n        if (this.currentMode == \"free\" || this.currentMode == \"topup\") {\n            this.currentFree++;\n        }\n    },\n\n    onBackButton() {\n        this.currentPage = this.currentPage-1;\n        if (this.currentMode == \"free\" || this.currentMode == \"topup\") {\n            this.currentFree = Math.max(0, this.currentFree - 1);\n        }\n    },\n\n    updateTitle(data) {\n        let titleMode = \"Normal\";\n        let winAmount = 0;\n        switch (data.mode) {\n            case \"normal\":\n                titleMode = \"Normal\";\n                winAmount = data.winAmount;\n                break;\n            case \"free\":\n                titleMode = \"Free\";\n                winAmount = data.winAmount;\n                break;\n            case \"topup\":\n                titleMode = \"Topup\";\n                winAmount = data.totalFreeWinAmount;\n                break;\n            case \"bonus\":\n                titleMode = \"Bonus\";\n                winAmount = data.totalBonusWinAmount;\n                break;\n        }\n        if (this.currentMode == \"free\") {\n            titleMode += \" lần \" + (this.currentFree + 1);\n            titleMode += \" : \" + formatMoney(winAmount || 0);\n        }\n        else if (this.currentMode == \"topup\") {\n            titleMode += \" lần \" + (this.currentFree + 1);\n            if (winAmount && winAmount > 0)\n                titleMode += \" : \" + formatMoney(winAmount || 0);\n        }\n\n        if (data.latestWinJackpotInfo) {\n            titleMode += \" Jackpot: \" + data.latestWinJackpotInfo.jackpotAmount;\n        }\n        else if (data.mode == \"bonus\") {\n            titleMode += \" : \" + formatMoney(winAmount || 0);\n        }\n        this.title.string = titleMode;\n    },\n\n    renderExtendData(data) {\n        const {scaterA, scatterA1, scatterA2, lsa8, lsan, lta, bg, opt} = data.extraData;\n        let scatterCredit = scaterA.concat(scatterA1).concat(scatterA2);\n        \n        this.bonusList = [];\n        this.wildJackpotList = [];\n        this.indexSpecialLine = 0;\n\n        let isBonusPayline = (this.gameMode != \"normal\"  && (lsa8 > 0 || lsan > 0 || lta > 0)) ||\n            (this.gameMode == \"normal\" && opt);\n\n        if (isBonusPayline) {\n            this.setBonusPayline();\n            this.listSpecialLine.push(\"SCATTER\");\n            this.bonusWinAmount = lsa8 || lsan || lta;\n        }\n\n        if (bg) {\n            this.listSpecialLine.push(\"WILD\");\n            this.setWildPayline();\n        }\n\n        let totalCredit = 0;\n        for(let i = 0; i < scaterA.length; i++) {\n            let data = scaterA[i].split(';');\n            let credit = parseInt(data[1]);\n            totalCredit += credit;\n        }\n        if(this.gameMode == 'free') {\n            for(let i = 0; i < this.symbolNode.children.length; i++) {\n                const symbol = this.symbolNode.children[i];\n                // let credit = parseInt(scatterA1[0]);\n                if (symbol.val == \"A1\")\n                    symbol.addNumber(totalCredit);\n            }\n        } else {\n            for (let i=0; i < scatterCredit.length; i++) {\n                let data = scatterCredit[i].split(';');\n                let index = parseInt(data[0]);\n                let credit = parseInt(data[1]);\n                const symbol = this.symbolNode.children[index];\n                if (symbol.val == \"A\" || symbol.val == \"A1\" || symbol.val == \"A2\")\n                    symbol.addNumber(credit);\n            }\n        }\n    },\n\n    showNextPayline() {\n        /*\n        try {\n            if (this.turnSpecialPayline) {\n                if (this.indexSpecialLine < this.listSpecialLine.length) {\n                    if (this.listSpecialLine[this.indexSpecialLine] == \"SCATTER\") {\n                        // show special payline\n                        this.showBonusPayline();\n                        if (this.gameMode == \"free\") {\n                            this.paylineInfo.emit('SHOW_PAYLINE_BONUS',this.bonusWinAmount, true);\n                        } else if (this.gameMode == \"topup\") {\n                            this.paylineInfo.emit('SHOW_PAYLINE_BONUS',this.bonusWinAmount, false);\n                        } else {\n                            this.paylineInfo.emit('HIDE_PAYLINE');\n                        }\n                        \n                        this.indexSpecialLine++;\n                    } else if (this.listSpecialLine[this.indexSpecialLine] == \"WILD\") {\n                        // show special payline\n                        this.showWildJackpot();\n                        this.paylineInfo.emit('SHOW_WILD_JACKPOT');\n                        this.indexSpecialLine++;\n                    }\n                } else {\n                    this.turnSpecialPayline = false;\n                }\n                this.paylineTime = 2;\n                return;\n            }\n    \n            if (this.paylines && this.paylines.length > 0) {\n                let paylineInfo = this.paylines[this.paylineIndex];\n                if (!paylineInfo.betDenom) paylineInfo.betDenom = this.betDenom;\n                if (this.node.config.PAY_LINE_ALLWAYS) {\n                    this.showPaylineAllWay(paylineInfo);\n                }\n                else {\n                    this.showPaylinePerline(paylineInfo);\n                }\n                this.paylineInfo.emit('SHOW_PAYLINE',{line: this.paylines[this.paylineIndex]});\n                this.paylineTime = 2;\n        \n                let isDisplayBonusPayline = this.isShowSpecialPayline && this.listSpecialLine && this.listSpecialLine.length > 0;\n\n                if (this.paylineIndex + 1 == this.paylines.length && isDisplayBonusPayline) {\n                    this.turnSpecialPayline = true;\n                    this.indexSpecialLine = 0;\n                    this.paylineIndex = 0;\n                } else {\n                    this.paylineIndex = (this.paylineIndex + 1) % this.paylines.length;\n                }\n            } else if (this.listSpecialLine && this.listSpecialLine.length > 0) {\n                this.turnSpecialPayline = true;\n                this.indexSpecialLine = 0;\n                this.paylineTime = 0.02;\n            }\n            \n        } catch (exception) {\n            // change next page but this called by update\n        }\n        */\n    },\n\n    showBonusPayline() {\n        // only for 9991\n        if (this.bonusList && this.bonusList.length > 0) {\n            this.symbolNode.children.forEach(it => {\n                it.opacity = 100;\n            });\n            for (let i = 0; i < this.bonusList.length; i++) {\n                let symbol = this.bonusList[i];\n                if (symbol) symbol.opacity = 255;\n            }\n        }\n    },\n\n    showWildJackpot() {\n        // only for 9991\n        if (this.wildJackpotList && this.wildJackpotList.length > 0) {\n            this.symbolNode.children.forEach(it => {\n                it.opacity = 100;\n            });\n            for (let i = 0; i < this.wildJackpotList.length; i++) {\n                let symbol = this.wildJackpotList[i];\n                if (symbol) symbol.opacity = 255;\n            }\n        }\n    },\n\n    update() {\n    },\n\n    clearPayline() {\n        if (this.gameMode != \"bonus\") {\n            this.symbolNode.children.forEach(it => it.opacity = 255);\n        }\n    },\n\n    showTableMatrix() {\n        this.node.opacity = 255;\n    },\n\n    hideTableMatrix() {\n        this.node.opacity = 0;\n    },\n});\n"]}