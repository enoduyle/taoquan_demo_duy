{"version":3,"sources":["../../../../../../../assets/cc-common/cc-slot-base-test/Table3D/scripts/assets/cc-common/cc-slot-base-test/Table3D/scripts/SlotTable3D.js"],"names":["TABLE_STATE","SPINNING","GOT_RESULT","FAST_TO_RESULT","IDLE","cc","Class","extends","Component","properties","reelPrefab","Prefab","symbolPrefab","onLoad","init","node","mode","isFastToResult","curentConfig","config","STATS","reels","tableFormat","TABLE_FORMAT","col","length","reel","instantiate","name","parent","mainComponent","setPosition","getXPosition","currentState","setMode","index","startX","SYMBOL_WIDTH","startSpinning","log","isStop","canFTR","startSpinningWithDelay","scheduleOnce","stopReeWithRandomMatrix","callback","matrixRandom","row","getRandomSymbolNameWithExceptions","stopSpinning","data","matrix","stopSpinningCallbackCount","console","table","forEach","currentCol","symbolValue","push","stopSpinningWithDelay","checkStopSpinningCallback","bind","count","fastToResult","fastStopSpinning"],"mappings":"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","file":"SlotTable3D.js","sourceRoot":"../../../../../../../assets/cc-common/cc-slot-base-test/Table3D/scripts","sourcesContent":["const TABLE_STATE = {\n    SPINNING: 0,\n    GOT_RESULT: 1,\n    FAST_TO_RESULT: 2,\n    IDLE: 3\n};\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        reelPrefab: cc.Prefab,\n        symbolPrefab: cc.Prefab,\n    },\n\n    onLoad () {\n        this.init();\n        this.node.mode = 'FAST';\n    },\n\n    init() {\n        this.isFastToResult = false;\n        this.node.curentConfig = this.node.config.STATS[this.node.mode];\n        this.node.reels = [];\n        this.tableFormat = this.node.config.TABLE_FORMAT;\n        for (let col = 0; col < this.tableFormat.length; ++col) {\n            const reel = cc.instantiate(this.reelPrefab);\n            reel.name = \"Reel_\" + col;\n            reel.parent = this.node;\n            reel.mainComponent.init(this.tableFormat[col], this.node.config, col, this.symbolPrefab);\n            reel.setPosition(this.getXPosition(col), 0);\n            this.node.reels[col] = reel.mainComponent;\n        }\n        this.currentState = TABLE_STATE.IDLE;\n    },\n\n    setMode(mode) {\n        this.node.mode = mode;\n    },\n\n    getXPosition(index) {\n        let startX = -(this.tableFormat.length / 2 - 0.5) * this.node.config.SYMBOL_WIDTH;\n        return (startX + this.node.config.SYMBOL_WIDTH * index);\n    },\n\n    startSpinning() {\n        if (this.currentState !== TABLE_STATE.IDLE) return cc.log('Table is spinning');\n        this.currentState = TABLE_STATE.SPINNING;\n        this.isStop = false;\n        this.isFastToResult = false;\n        this.canFTR = false;\n        this.node.curentConfig = this.node.config.STATS[this.node.mode];\n        for (let col = 0; col < this.node.reels.length; ++col) {\n            this.node.reels[col].setMode(this.node.mode);\n            this.node.reels[col].startSpinningWithDelay(col);\n        }\n        this.scheduleOnce(() => {\n            this.currentState = TABLE_STATE.GOT_RESULT;\n            cc.log('Stop with random matrix');\n            this.stopReeWithRandomMatrix(() => {\n                this.currentState = TABLE_STATE.IDLE;\n                cc.log('All reel stopped');\n            });\n        }, 0.2);\n    },\n\n    stopReeWithRandomMatrix(callback) {\n        this.matrixRandom = [];\n        for (let col = 0; col < this.tableFormat.length; ++col) {\n            this.matrixRandom[col] = [];\n            for (let row = this.tableFormat[col] - 1; row >=0 ; --row) {\n                const reel = this.node.reels[col];\n                if(reel && reel.getRandomSymbolNameWithExceptions){\n                    this.matrixRandom[col][row] = reel.getRandomSymbolNameWithExceptions(['A', 'R', 'K']);\n                }else{\n                    this.matrixRandom[col][row] = \"3\";\n                }\n            }\n        }\n        this.stopSpinning(this.matrixRandom, () => {\n            callback && callback();\n        });\n    },\n\n    stopSpinning(data, callback) {\n        this.matrix = data;\n        this.stopSpinningCallbackCount = 0;\n        console.table(this.matrix);\n        this.node.reels.forEach((reel, col) => {\n            const currentCol = this.matrix[col];\n            let matrix = [];\n            for (let row = currentCol.length-1; row >=0 ; --row) {\n                let symbolValue = currentCol[row];\n                matrix.push(symbolValue);\n            }\n            reel.stopSpinningWithDelay(col, matrix, this.checkStopSpinningCallback.bind(this, matrix, callback));\n        });\n    },\n    \n    checkStopSpinningCallback(matrix, callback) {\n        this.stopSpinningCallbackCount++;\n        const count = this.stopSpinningCallbackCount;\n\n        if (count >= this.node.reels.length && callback && typeof callback == \"function\") {\n            callback();\n        }\n    },\n    \n    fastToResult() {\n        if (this.stopSpinningCallbackCount < this.node.reels.length && this.currentState === TABLE_STATE.GOT_RESULT) {\n            this.currentState = TABLE_STATE.FAST_TO_RESULT;\n            this.isFastToResult = true;\n            for (let col = 0; col < this.node.reels.length; ++col) {\n                this.node.reels[col].fastStopSpinning();\n            }\n        } else {\n            cc.log('Can not fast to result');\n        }\n    },\n});\n"]}